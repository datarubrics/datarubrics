{"id": "duRRoGeoQT", "page_num": 9, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying using the Hard-ALiBi positional encoding, which improves the model's ability to learn n-gram matching.\\n\\n6. Discussion\\nWe have demonstrated through theory and experiments that transformers are better than GSSMs at copying from their input context. However, we emphasize that state space models have many advantages over transformers. The memory and computational complexity of GSSMs does not increase with the input length, which is ideal for training and inference on long inputs. Additionally, state space models such as RNNs are better at tracking state variables across long sequences (Liu et al., 2023a), which may be useful for generating long consistent text. Importantly, language processing in the human brain appears to be much more similar to how state space models process language (Tikochinski et al., 2024).\\n\\nWe therefore believe that future work should focus on building hybrid architectures that endow state space models with an attention-like mechanism, allowing them to retrieve relevant pieces of text from their input. Indeed, humans have an incredibly limited capacity for memorizing sequences (Miller, 1956), but can translate entire novels if we allow them to look back at the text (Shelton, 1612).\\n\\nImpact Statement\\nThis paper presents work whose goal is to advance the field of Machine Learning. There are many potential societal consequences of our work, none which we feel must be specifically highlighted here.\\n\\nAcknowledgements\\nWe thank Boaz Barak for helpful discussions. Kempner Institute computing resources enabled this work. Samy Jelassi acknowledges funding supported by the Center of Mathematical Sciences and Applications. This work has been made possible in part by a gift from the Chan Zuckerberg Initiative Foundation to establish the Kempner Institute for the Study of Natural and Artificial Intelligence. Sham Kakade acknowledges funding from the Office of Naval Research under award N00014-22-1-2377.\\n\\nReferences\\nAky\u00fcrek, E., Wang, B., Kim, Y., and Andreas, J. In-context language learning: architectures and algorithms. arXiv preprint arXiv:2401.12973, 2024.\\n\\nAnil, C., Wu, Y., Andreassen, A., Lewkowycz, A., Misra, V., Ramasesh, V., Slone, A., Gur-Ari, G., Dyer, E., and Neyshabur, B. Exploring length generalization in large language models. Advances in Neural Information Processing Systems, 35:38546\u201338556, 2022.\\n\\nBiderman, S., Schoelkopf, H., Anthony, Q. G., Bradley, H., O'Brien, K., Hallahan, E., Khan, M. A., Purohit, S., Prashanth, U. S., Raff, E., et al. Pythia: A suite for analyzing large language models across training and scaling. In International Conference on Machine Learning, pp. 2397\u20132430. PMLR, 2023.\\n\\nBradbury, J., Merity, S., Xiong, C., and Socher, R. Quasi-recurrent neural networks. arXiv preprint arXiv:1611.01576, 2016.\\n\\nBrown, T., Mann, B., Ryder, N., Subbiah, M., Kaplan, J. D., Dhariwal, P., Neelakantan, A., Shyam, P., Sastry, G., Askell, A., et al. Language models are few-shot learners. Advances in neural information processing systems, 33:1877\u20131901, 2020.\\n\\nCarlini, N., Ippolito, D., Jagielski, M., Lee, K., Tramer, F., and Zhang, C. Quantifying memorization across neural language models. arXiv preprint arXiv:2202.07646, 2022.\\n\\nChiang, D., Cholak, P., and Pillay, A. Tighter bounds on the expressivity of transformer encoders. arXiv preprint arXiv:2301.10743, 2023.\\n\\nChoromanski, K., Likhosherstov, V., Dohan, D., Song, X., Gane, A., Sarlos, T., Hawkins, P., Davis, J., Mohiuddin, A., Kaiser, L., et al. Rethinking attention with performers. arXiv preprint arXiv:2009.14794, 2020.\\n\\nDao, T., Fu, D., Ermon, S., Rudra, A., and R\u00e9, C. Flashattention: Fast and memory-efficient exact attention with io-awareness. Advances in Neural Information Processing Systems, 35:16344\u201316359, 2022.\\n\\nDel\u00e9tang, G., Ruoss, A., Grau-Moya, J., Genewein, T., Wenliang, L. K., Catt, E., Hutter, M., Legg, S., and Ortega, P. A. Neural networks and the chomsky hierarchy. arXiv preprint arXiv:2207.02098, 2022.\\n\\nDevlin, J., Chang, M.-W., Lee, K., and Toutanova, K. Bert: Pre-training of deep bidirectional transformers for language understanding. arXiv preprint arXiv:1810.04805, 2018.\\n\\nEdelman, B. L., Goel, S., Kakade, S., and Zhang, C. Inductive biases and variable creation in self-attention mechanisms. In International Conference on Machine Learning, pp. 5793\u20135831. PMLR, 2022.\\n\\nGao, L., Biderman, S., Black, S., Golding, L., Hoppe, T., Foster, C., Phang, J., He, H., Thite, A., Nabeshima, N., et al. The pile: An 800gb dataset of diverse text for language modeling. arXiv preprint arXiv:2101.00027, 2020.\"}"}
{"id": "duRRoGeoQT", "page_num": 10, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying\\n\\nGrazzi, R., Siems, J., Schrodi, S., Brox, T., and Hutter, F. Is mamba capable of in-context learning? arXiv preprint arXiv:2402.03170, 2024.\\n\\nGu, A. and Dao, T. Mamba: Linear-time sequence modeling with selective state spaces. arXiv preprint arXiv:2312.00752, 2023.\\n\\nGu, A., Goel, K., and R\u00e9, C. Efficiently modeling long sequences with structured state spaces. arXiv preprint arXiv:2111.00396, 2021.\\n\\nHochreiter, S. and Schmidhuber, J. Long short-term memory. Neural computation, 9(8):1735\u20131780, 1997.\\n\\nJelassi, S., d'Ascoli, S., Domingo-Enrich, C., Wu, Y., Li, Y., and Charton, F. Length generalization in arithmetic transformers. arXiv preprint arXiv:2306.15400, 2023.\\n\\nKamradt, G. Llmtest needleinahaystack. https://github.com/gkamradt/LLMTest_NeedleInAHaystack, 2023.\\n\\nKatharopoulos, A., Vyas, A., Pappas, N., and Fleuret, F. Transformers are rnns: Fast autoregressive transformers with linear attention. In International conference on machine learning, pp. 5156\u20135165. PMLR, 2020.\\n\\nKazemnejad, A., Padhi, I., Ramamurthy, K. N., Das, P., and Reddy, S. The impact of positional encoding on length generalization in transformers. arXiv preprint arXiv:2305.19466, 2023.\\n\\nLiu, B., Ash, J. T., Goel, S., Krishnamurthy, A., and Zhang, C. Exposing attention glitches with flip-flop language modeling. arXiv preprint arXiv:2306.00946, 2023a.\\n\\nLiu, N. F., Lin, K., Hewitt, J., Paranjape, A., Bevilacqua, M., Petroni, F., and Liang, P. Lost in the middle: How language models use long contexts. arXiv preprint arXiv:2307.03172, 2023b.\\n\\nLoshchilov, I. and Hutter, F. Decoupled weight decay regularization. arXiv preprint arXiv:1711.05101, 2017.\\n\\nMcCoy, R. T., Smolensky, P., Linzen, T., Gao, J., and Celikyilmaz, A. How much do language models copy from their training data? evaluating linguistic novelty in text generation using raven. Transactions of the Association for Computational Linguistics, 11:652\u2013670, 2023.\\n\\nMerrill, W. Sequential neural networks as automata. arXiv preprint arXiv:1906.01615, 2019.\\n\\nMerrill, W., Weiss, G., Goldberg, Y., Schwartz, R., Smith, N. A., and Yahav, E. A formal hierarchy of rnn architectures. arXiv preprint arXiv:2004.08500, 2020.\\n\\nMerrill, W., Sabharwal, A., and Smith, N. A. Saturated Transformers are Constant-Depth Threshold Circuits. Transactions of the Association for Computational Linguistics, 10:843\u2013856, 08 2022. ISSN 2307-387X. doi:10.1162/tacl_a_00493. URL https://doi.org/10.1162/tacl_a_00493.\\n\\nMiller, G. A. The magic number seven plus or minus two: Some limits on our capacity for processing information. Psychological review, 63:91\u201397, 1956.\\n\\nNguyen, E., Poli, M., Faizi, M., Thomas, A., Birch-Sykes, C., Wornow, M., Patel, A., Rabideau, C., Massaroli, S., Bengio, Y., et al. Hyenadna: Long-range genomic sequence modeling at single nucleotide resolution. arXiv preprint arXiv:2306.15794, 2023.\\n\\nOlsson, C., Elhage, N., Nanda, N., Joseph, N., DasSarma, N., Henighan, T., Mann, B., Askell, A., Bai, Y., Chen, A., et al. In-context learning and induction heads. arXiv preprint arXiv:2209.11895, 2022.\\n\\nPark, J., Park, J., Xiong, Z., Lee, N., Cho, J., Oymak, S., Lee, K., and Papailiopoulos, D. Can mamba learn how to learn? a comparative study on in-context learning tasks. arXiv preprint arXiv:2402.04248, 2024.\\n\\nPascanu, R., Mikolov, T., and Bengio, Y. On the difficulty of training recurrent neural networks. In International conference on machine learning, pp. 1310\u20131318. Pmlr, 2013.\\n\\nPaszke, A., Gross, S., Massa, F., Lerer, A., Bradbury, J., Chanan, G., Killeen, T., Lin, Z., Gimelshein, N., Antiga, L., et al. Pytorch: An imperative style, high-performance deep learning library. Advances in neural information processing systems, 32, 2019.\\n\\nPeng, B., Alcaide, E., Anthony, Q., Albalak, A., Arcadinho, S., Cao, H., Cheng, X., Chung, M., Grella, M., GV, K. K., et al. Rwkv: Reinventing rnns for the transformer era. arXiv preprint arXiv:2305.13048, 2023.\\n\\nPetroni, F., Lewis, P., Piktus, A., Rockt\u00e4schel, T., Wu, Y., Miller, A. H., and Riedel, S. How context affects language models' factual predictions. arXiv preprint arXiv:2005.04611, 2020.\\n\\nPress, O., Smith, N. A., and Lewis, M. Train short, test long: Attention with linear biases enables input length extrapolation. arXiv preprint arXiv:2108.12409, 2021.\\n\\nRadford, A., Wu, J., Child, R., Luan, D., Amodei, D., and Sutskever, I. Language models are unsupervised multitask learners, 2019. URL https://api.semanticscholar.org/CorpusID:160025533.\"}"}
{"id": "duRRoGeoQT", "page_num": 11, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying\\n\\nRaffel, C., Shazeer, N., Roberts, A., Lee, K., Narang, S., Matena, M., Zhou, Y., Li, W., and Liu, P. J. Exploring the limits of transfer learning with a unified text-to-text transformer. The Journal of Machine Learning Research, 21(1):5485\u20135551, 2020.\\n\\nRajpurkar, P., Jia, R., and Liang, P. Know what you don\u2019t know: Unanswerable questions for squad. arXiv preprint arXiv:1806.03822, 2018.\\n\\nRuoss, A., Del\u00e9tang, G., Genewein, T., Grau-Moya, J., Csord\u00e1s, R., Bennani, M., Legg, S., and Veness, J. Randomized positional encodings boost length generalization of transformers. arXiv preprint arXiv:2305.16843, 2023.\\n\\nSanford, C., Hsu, D., and Telgarsky, M. Representational strengths and limitations of transformers. arXiv preprint arXiv:2306.02896, 2023.\\n\\nShelton, T. The Ingenious Gentleman Don Quixote of La Mancha. 1612. Written by Miguel de Cervantes, translated by Thomas Shelton.\\n\\nShen, R., Bubeck, S., Eldan, R., Lee, Y.T., Li, Y., and Zhang, Y. Positional description matters for transformers arithmetic. arXiv preprint arXiv:2311.14737, 2023.\\n\\nStrobl, L., Merrill, W., Weiss, G., Chiang, D., and Angluin, D. Transformers as recognizers of formal languages: A survey on expressivity. arXiv preprint arXiv:2311.00208, 2023.\\n\\nSu, J., Ahmed, M., Lu, Y., Pan, S., Bo, W., and Liu, Y. Roformer: Enhanced transformer with rotary position embedding. Neurocomputing, pp. 127063, 2023.\\n\\nSun, Y., Dong, L., Huang, S., Ma, S., Xia, Y., Xue, J., Wang, J., and Wei, F. Retentive network: A successor to transformer for large language models. arXiv preprint arXiv:2307.08621, 2023.\\n\\nTikochinski, R., Goldstein, A., Meiri, Y., Hasson, U., and Reichart, R. An incremental large language model for long text processing in the brain. 2024.\\n\\nVaswani, A., Shazeer, N., Parmar, N., Uszkoreit, J., Jones, L., Gomez, A.N., Kaiser, \u0141., and Polosukhin, I. Attention is all you need. Advances in neural information processing systems, 30, 2017.\\n\\nWei, C., Chen, Y., and Ma, T. Statistically meaningful approximation: a case study on approximating turing machines with transformers. Advances in Neural Information Processing Systems, 35:12071\u201312083, 2022.\\n\\nWeiss, G., Goldberg, Y., and Yahav, E. Thinking like transformers. In International Conference on Machine Learning, pp. 11080\u201311090. PMLR, 2021.\\n\\nWolf, T., Debut, L., Sanh, V., Chaumond, J., Delangue, C., Moi, A., Cistac, P., Rault, T., Louf, R., Funtowicz, M., et al. Huggingface's transformers: State-of-the-art natural language processing. arXiv preprint arXiv:1910.03771, 2019.\\n\\nZhou, H., Bradley, A., Littwin, E., Razin, N., Saremi, O., Susskind, J., Bengio, S., and Nakkiran, P. What algorithms can transformers learn? a study in length generalization. arXiv preprint arXiv:2310.16028, 2023.\"}"}
{"id": "duRRoGeoQT", "page_num": 12, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying\\n\\nA. Experimental setup\\n\\nIn this section, we provide additional details about our experimental setup. We first give a description of the positional encodings used in our transformers experiments (Subsection A.1) and then give details about the training and evaluation procedures (Subsection A.2).\\n\\nA.1. Positional encodings in the transformers\\n\\n(a) (b) (c)\\n\\nFigure 8. Positional encoding schemes for transformers: illustration of the different positional encodings of the transformers that are trained in our experiments. (a) corresponds to the NoPE encoding (Kazemnejad et al., 2023) where no positional encoding is applied to any of the attention heads. (b) depicts the ALiBi encoding (Press et al., 2021) where $m$ is a head-specific scalar. (c) the Hard-ALiBi encoding introduced in Section 2. For the sake of illustration, we consider the case where we mask three heads which means that we force Heads 1, 2 and 3 to attend to their current token, their current and preceding tokens and their current, preceding and prior to the preceding tokens. The remaining heads are set as NoPE heads.\\n\\nWe consider multiple positional encoding schemes in our experiments in Section 3:\\n\\n\u2013 the NoPE scheme (Kazemnejad et al., 2023) where no positional information is added to any of the attention scores (Figure 8a). This architecture choice helps to get better length generalization in multiple tasks including the copy task.\\n\\n\u2013 the ALiBi scheme (Press et al., 2021) which biases the attention scores with a penalty that is proportional to their distance (Figure 8b). $m$ is a head-specific slope fixed before training.\\n\\n\u2013 the Hard-ALiBi scheme introduced in Section 2 which has $M$ masked attention heads where we explicitly force the model to attend to their directly previous tokens and $H - M$ heads set to be NoPE attention heads. In Figure 8c, we display the case where we have $M = 4$ masked heads: in the first head, the tokens just attend to themselves; in the second head, the tokens attend to themselves and to previous ones; in the third head, the tokens attend to themselves, the previous ones and the second preceding tokens. The remaining $H - M$ heads are set to NoPE.\"}"}
{"id": "duRRoGeoQT", "page_num": 5, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying\\n\\n![Image](image.png)\\n\\n**Figure 4.** String-level copying accuracy on data with duplicated n-grams. Copying fails when the duplicated n-gram is too long as the model can no longer perform n-gram lookups.\\n\\nPositional information. Positional information also plays an important role in the length generalization capacity of Transformers (Jelassi et al., 2023; Kazemnejad et al., 2023; Shen et al., 2023). Previously popular methods of input-layer positional embeddings (e.g. sinusoidal (Vaswani et al., 2017) or learned (Radford et al., 2019)) have been replaced by relative positional encodings at each attention layer (e.g. RoPE (Su et al., 2023), Alibi (Press et al., 2021), or NoPE (Kazemnejad et al., 2023)). Below, we experiment these positional encodings along with the Hard-Alibi encoding introduced in Section 2.\\n\\n### 3.2. Data efficiency on the copy task\\n\\nWe begin by training our models on the simple task of copying a sequence of input tokens described in Figure 2. The model gets an input of $\\\\leq L$ tokens followed by a Separator ($\\\\langle\\\\text{COPY}\\\\rangle$) token, and needs to output the same sequence again from the beginning. In this section, we focus on in-distribution learning: we train on strings of random length $\\\\leq L = 300$ and record the string-level accuracy on evaluation strings sampled from the training distribution. Results for this experiment are shown in Figure 1a. Clearly, there is a large gap between the transformers and GSSMs. We observe that the transformers need 100x less samples than the best GSSMs to learn the copy task.\\n\\nNote that the sharp changes in accuracy displayed in Figure 1a are due to the log-scaled x-axis and choice of string-level accuracy as a metric. In Figure 9a, we report the character-level accuracy, which yields smoother curves demonstrating the learning process of GSSMs. Regarding LSTMs, we find that they do not manage to learn on length-300 strings even at the character level. In Figure 9b, we show that LSTMs are able to learn to copy on shorter strings and that string length is the bottleneck.\\n\\n### 3.3. Length generalization on the copy task\\n\\nThe prior experiment demonstrates superior efficiency of learning in-distribution. Now, we test the ability of the learned functions to generalize out-of-distribution. Specifically, we consider generalization from short sequences to longer sequences. Testing this sort of generalization can help us to better understand which function the model has learned, i.e. whether the model has truly learned the \u201ccorrect\u201d copy operation or whether it just learned to copy sequences of the particular size it was trained on.\\n\\nHere, we train all models on sequences of $\\\\leq 50$ tokens, and test them on sequences of up to 1000 tokens, reporting string-level accuracy. As seen in Figure 1b, all models are able to (eventually) solve the task in-distribution on lengths of $\\\\leq 50$, but transformer-based models display much better generalization to longer inputs compared to GSSMs. Namely, we observe that the performance of the GSSMs (LSTM and MAMBA) drops to zero almost immediately when increasing the input length, while the performance of transformers decays much more gradually with length.\\n\\nPositional information. When looking at the relative performance of different transformer models in Figure 1b, it becomes clear that the positional encoding is important to length generalization. Specifically, the ALiBi and NoPE transformers dramatically outperform the RoPE model on longer inputs. This is likely because the sinusoidal embeddings of RoPE create a more dramatic change than the decay of ALiBi or NoPE when we go to longer inputs.\\n\\nImproved generalization with Hard-ALiBi. To test our understanding of how transformers learn to copy, we now consider swapping in the Hard-ALiBi positional encoding that we used in our theoretical construction of hash-based copying (introduced in Subsection 2.2 and illustrated in Figure 8 in the Appendix). Figure 1b shows that a transformer trained with Hard-ALiBi embedding on sequences of length $\\\\leq 50$ achieves almost perfect length generalization up to sequences of length 1000. Note that this is well beyond the context length ever encountered in training.\\n\\n### 3.4. Transformers learn to use n-gram hashing\\n\\nNext, we attempt to determine whether the transformer trained on the copy task indeed applies the mechanism of storage and retrieval of n-grams. To do this, we evaluate the performance of a transformer with Hard-ALiBi positional encoding trained on the copy task when tested on a distribution of examples that intentionally contains duplicate n-grams. That is, we draw uniform sequences of tokens, and then randomly replace some n-gram with another n-gram that already appears in the sequence, such that each example always contains two copies of the same n-gram.\"}"}
{"id": "duRRoGeoQT", "page_num": 6, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying\\n\\nFigure 5. Top: An illustration of the suffix key variant of the n-gram lookup task. Bottom: When trained on strings of length $\\\\leq 30$, transformers outperform GSSMs on longer inputs, illustrating superior performance on this memory-intensive task.\\n\\nWe use the Hard-Alibi model here since it performs the best for the copy task as showed in Figure 1a. Figure 4 shows the performance of the transformer for different choices of $n$. We observe that the transformer maintains roughly the same accuracy for $n \\\\leq 4$, but that its accuracy starts dropping when the inputs contain duplicate sequences of 5 or more tokens. This suggests that the transformer relies on something like 5-gram retrieval to do the copy task. Figure 11 further strengthens this point. We report the performance of perfect n-gram models in the copy task and observe that the performance of Transformers enhanced with Hard-ALiBi matches with the one of a 5-gram model.\\n\\n3.5. GSSMs cannot arbitrarily retrieve from context\\n\\nWe now introduce another task to probe the mechanisms that the models use to copy from the context: the n-gram lookup task. In this task the model needs to use a given n-gram as a key to look up the $k$-token key that follows the query. We consider two variants of the task: suffix keys and prefix keys. In both variants, we assess length generalization to understand the function that the models have learned.\\n\\nFirst, we consider the suffix key version of n-gram lookup. In this task, the model is given a sequence $L$ of input tokens, a separator, and then an n-gram from the input sequence. The model then needs to output a sequence of $k$ tokens following the chosen n-gram (see Figure 5 for an illustration).\\n\\nThis task is closely related to induction heads (Olsson et al., 2022). This task requires the model to be able to \u201cstore\u201d the entire context in order to effectively find the correct key to access it\u2019s query. We train all models on sequences of at most 30 tokens and show results in Figure 5. Transformers perform well on this task, with a relatively small drop in performance when increasing the sequence length up to 100. This suggests that transformers can learn to perform n-gram storage and retrieval. GSSMs, however, perform poorly beyond their training distribution. Intuitively, this task still requires the models to store the entire input sequence, something that GSSMs struggle to do.\\n\\nNext, we try the prefix key version of n-gram lookup. Here we provide the n-gram key at the beginning and then the full input sequence (illustrated in Figure 6). In this version of the task the model does not need to store the entire input since it can look for the key on the fly as the sequence is processed. This is good for the GSSMs, since they can write the key into the state and then ignore inputs that do not match. Indeed, GSSMs achieve perfect length-generalization on this variant. Interestingly, the GSSMs even outperform the NoPE and ALiBi transformers (although not the Hard-Alibi model). We hypothesize that this may be an issue where these positional embeddings make it more difficult to effectively perform the hashing lookup over a long distance in relative positions. Taken together, these results illustrate how GSSMs seem to be memory limited, but can be effective when the tasks only require a summary of the inputs.\"}"}
{"id": "duRRoGeoQT", "page_num": 7, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying rather than storing the entire context.\\n\\n4. Pre-trained Models\\n\\nIn this section, we compare the performance of pre-trained transformers and pre-trained GSSMs on memory-intensive tasks such as copying long strings, retrieval and few-shot question answering. We show that transformers outperform GSSMs of similar scale on such memory-intensive tasks, even when the GSSM has lower perplexity as a language model. These results confirm that the limitation of GSSMs raised in previous sections apply to large scale models trained on real pretraining data.\\n\\n4.1. Setup\\n\\nIn the experiments below, we compare Pythia transformer models (Biderman et al., 2023) of sizes ranging from 410M to 2.8B against Mamba models (Gu & Dao, 2023) of similar sizes. All these models have been pre-trained on the Pile (Gao et al., 2020) and use the same tokenizer. The Mamba models generally have slightly lower perplexity on the training set for a given size. The main difference between the Pythia and the Mamba models is their architectural design. We compare these models by measuring their performance while varying the input instance length and consider two types of tasks: copy-based and information retrieval tasks. The copy-based tasks consist of presenting a random text to the model and asking it to copy the text. In the information retrieval tasks, we provide a text to the model and ask it a related question. These retrieval tasks can be seen as \u201cselective copy\u201d, since the model needs to copy a small chunk of the input text in order to respond to the question. To measure performance, we use the string-level accuracy in all the experiments except in Figure 7c where we consider question answering and thus report the F1 score. We evaluate the models over 10 batches of size 64 for all the tasks except for question answering where we evaluate over 50 questions because the number of questions with a given context length is limited. Further details are in Appendix A.\\n\\n4.2. Copying the input context\\n\\nWe first observe that pre-trained transformers outperform pre-trained GSSMs at copying long natural language strings. In Figure 7a, we randomly sample strings from the C4 dataset (Raffel et al., 2020) with varying number of tokens. Our prompt consists of two copies of the sampled string plus the first word of the string and we expect the model to complete the third copy. Even the smallest transformer model dramatically outperforms the largest GSSM. This happens even though the large GSSMs have enough bits in the state variable to potentially store the context. This confirms the idea that this is an architectural bias of transformers that makes it easier for them to copy from the context. Unlike strings of tokens sampled uniformly at random, natural text can often be compressed, possibly allowing language models to copy longer strings even with limited memory. To test whether this matters, in Figure 7b we conduct the same experiment as above but randomly shuffle the order of the words in the strings. We find that when we shuffle the words, both GSSMs and transformers perform worse on the task, but the effect is more stark for GSSMs. Even the largest GSSM now gets zero accuracy on strings of length 300. This suggests that when the input is more difficult to compress, the GSSM suffers due to its fixed size state.\\n\\n4.3. Retrieval from the input context\\n\\nWhile copying provides a clear task to separate the model classes, it is not a particularly realistic task. That said, it presents an extreme case of a type of behavior that is highly relevant for many tasks of interest. In particular, many tasks require retrieving specific information from the context that is relevant to the desired output. This subsection presents examples of how our results transfer to more practical tasks.\\n\\nPhone-book lookup.\\n\\nWe first consider a \u201cphone-book\u201d experiment where we provide a synthetic phone-book to the model and ask it to return the phone number when given a name. We generate the phone-book by randomly sampling \\\\( L \\\\) names and their associated phone number. One line of this phone-book looks like \u201cJohn Powell: 609-323-7777\u201d. Our prompt to the model consists of the phone-book, two few-shot examples and a question asking for the phone number of a randomly sampled name from the phone-book. Figure 1c reports the accuracy obtained by the pretrained transformers and GSSMs while varying the size of the phone-book \\\\( L \\\\). We observe that even the smallest transformer (410M parameters) outperforms the largest GSSMs (2.8B parameters) when the phone-book size is long enough (\\\\( L \\\\geq 70 \\\\)). This shows that in retrieval tasks which require access to the whole context, GSSMs struggle to store the relevant information in their fixed-size state.\\n\\nQuestion-Answering.\\n\\nIn this experiment, we compare the 2.8B parameter Mamba and transformer models, on the SQuAD question-answering dataset (Rajpurkar et al., 2018). This dataset provides text paragraphs together with a few questions regarding the text. We probe the models to answer the question by providing a single demonstration of a question/answer pair (corresponding to the same text) before giving the target question. We bin the paragraphs according to their lengths, and report the F1 score as a function of the paragraph length for both models in Figure 7c. We note that in our experiments, smaller models were unable to achieve reasonable and consistent performance on this dataset.\\n\\n7\"}"}
{"id": "duRRoGeoQT", "page_num": 8, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying\\n\\nFigure 7.\\n(a) Copy: natural language strings. We compare pretrained models on their ability to copy natural language strings sampled from C4 of varying lengths and report string-level accuracy. The transformer models substantially outperform the GSSMs.\\n\\n(b) Copy: shuffled strings. To test whether it mattered that the strings were in natural language, we randomly shuffle the word order of the strings from the previous experiment. We find that this degrades performance, especially for the Mamba models.\\n\\n(c) Question answering (SQUAD). We compare Pythia and Mamba on a standard question answering dataset where we bin the dataset based on the length of the context paragraph. We find that Mamba performance decays more quickly with the length of the context.\\n\\nWe observe that while for short paragraphs, both the Pythia transformer and Mamba achieve comparable performance, the performance of Mamba degrades more quickly with the paragraph length, while the transformer-based model maintains a similar accuracy even for longer texts. This result shows that the fixed-memory of GSSMs also limits their performance on standard natural tasks.\\n\\n5. Related Work\\n\\nThere exists a broad body of prior work on the representational capacity of GSSMs like RNNs (Merrill, 2019; Merrill et al., 2020) as well as transformers (Weiss et al., 2021; Merrill et al., 2022; Wei et al., 2022; Sanford et al., 2023; Edelman et al., 2022). Previous works that study transformers do so through comparison to other complexity classes, such as threshold circuits (Merrill et al., 2022), RASP language (Weiss et al., 2021) or first-order logic (Chiang et al., 2023) (see Strobl et al. (2023) for a thorough review). These works do not provide insights into how transformers implement algorithms for solving specific problems. In contrast, our theoretical result constructs a transformer for the copy task, which illustrates the mechanism and provides tight bounds on the model size. Together with the result showing that GSSMs cannot copy long sequences, our theory characterizes the power of different sequence models on the copy task. Other theoretical separation results between transformers and RNNs (Sanford et al., 2023; Merrill, 2019) use more complex tasks of less practical relevance.\\n\\nOther papers have previously demonstrated the capacity of transformers to leverage the entire input context for tasks like retrieval, question answering, and in-context learning (Devlin et al., 2018; Raffel et al., 2020; Petroni et al., 2020; Brown et al., 2020; Liu et al., 2023b; Kamradt, 2023). Another line of work has studied the \u201cinduction head\u201d mechanism in transformers that performs a retrieval operation much like the one we observe for copying (Olsson et al., 2022). But, to our knowledge, there is not a comparison in related work between transformers and GSSMs of similar quality on these tasks.\\n\\nSeveral of our experiments study length generalization as a way to assess whether the model found the \u201cright way\u201d to solve the task. Prior work on length generalization in transformers has focused on the data distribution (Anil et al., 2022), positional embeddings (Kazemnejad et al., 2023), and arithmetic tasks (Del \u00b4etang et al., 2022; Ruoss et al., 2023; Jelassi et al., 2023; Zhou et al., 2023). We extend many of these ideas to the copying task.\\n\\nFinally, we note that while we focus on tasks where transformers outperform GSSMs, there are also tasks where GSSMs outperform transformers. For example, Liu et al. (2023a) shows that transformers fail to generalize out of distribution for \u201cflip-flop language modeling\u201d, while LSTMs do so easily. These tasks require tracking a small $O(1)$ state variable over time. Another benefit of GSSMs is the ability to input long contexts like DNA sequences that may be impractical for transformers (Nguyen et al., 2023).\\n\\nConcurrently to our work, Aky\u00a8urek et al. (2024); Grazzi et al. (2024); Park et al. (2024) studied the difference between Transformers and Mamba at in-context learning, which can be seen as a form of copying. In particular, Aky \u00a8urek et al. (2024) finds that Transformers have an advantage over other architectures at this task because they have \u201cn-gram heads\u201d. Similarly to these works, we hint the limitations of SSMs in memory-intensive tasks such as copying because of their limited state size. We also show that Transformers can...\"}"}
{"id": "duRRoGeoQT", "page_num": 13, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"A.2. Pretraining and evaluation details\\n\\nSoftware dependencies. We implement all of our training in Pytorch (Paszke et al., 2019). We use the HuggingFace library (Wolf et al., 2019) and the Mamba GitHub repository (Gu & Dao, 2023).\\n\\nArchitectures. In our experiments in Section 3, the backbone of our transformers is the GPT-NeoX architecture. We set the number of layers to 12, the hidden size to 1024 and the number of heads $H = 16$. We consider the different positional encodings that are described in Subsection A.1. For Alibi, we set the head-specific scalar as in the original paper i.e. $m_h = 2^{-h/2}$ for $h \\\\in \\\\{1, \\\\ldots, H\\\\}$. For the Hard-Alibi model, we sweep over the number of masked heads $M \\\\in \\\\{2, \\\\ldots, 10\\\\}$ and found that the best model corresponds to $M = 6$. Regarding the Mamba models, we set the number of layers to 24 and the hidden size 1024. We also sweep over the state space dimension $S \\\\in \\\\{16, 32, 64, 128, 256\\\\}$ and found the best model is $S = 32$. This choice of hyperparameters ensures that both transformers and Mamba models have a comparable number of parameters. Lastly, our LSTM is made of 4 layers and width 1024.\\n\\nTraining hyperparameters. In Section 3, at each epoch, we sample online a batch size of size 64. We fill the context with examples so we choose a context length ($C = 420$ for all the experiments except Figure 1a where we set $C = 620$) and pack as many examples as possible to fit this context. So in our case, one sample contains many instances. We run the experiments for 15 epochs for both transformers and Mamba while for LSTMs we need 300 epochs. All methods are trained with the AdamW optimizer (Loshchilov & Hutter, 2017) with learning rate 5e-5, a linear rate decay schedule, 300 steps of warmup and default weight decay of 1e-1. Finally, to train all the models, we use the next-token prediction loss but we apply a mask on the input instance so that we only penalize the model whenever it makes a mistake on the labels (and not on the inputs and labels jointly).\\n\\nCompute resources. Pretraining was all done on an internal cluster using RTX8000 GPUs. We estimate that the final training run needed to produce the results in the paper took approximately 600 GPU hours.\\n\\nEvaluation algorithm. We evaluate the models over 10 batches of size 64 for all the tasks except for the question answering one where we evaluate over 50 questions because the number of questions with a given context length is limited.\\n\\nDecoding algorithm. At inference, all our models use greedy decoding for generation and we set the temperature to 0.\\n\\nB. Additional Experiments\\n\\nIn Subsection B.1, we focus on the in-distribution learning of the copy task and show that the number of samples needed by GSSMs is much higher than the one for transformers. In Subsection B.2, we study the performance of pre-trained models on the copy task in the case where the strings are sampled uniformly. This experiment shows that when the text to copy is totally random, the gap between pre-trained transformers and GSSMs is even larger.\\n\\nB.1. Data efficiency on the copy task\\n\\nIn this section, we provide additional plots to complement the data efficiency experiment from Figure 1a. We want to highlight the following points:\\n\\n\u2013 in Figure 1a, we see a sharp transition for the Mamba learning curve. However, Figure 9a shows that the learning process is more smooth at the character level. Besides, LSTMs are not able to learn the copy on length-300 strings even at the character level.\\n\\n\u2013 We consider the experiment of learning to copy much shorter strings namely strings with length $\\\\leq 30$. Figure 9b shows that the gap in terms of training examples between transformers and Mamba is much smaller i.e. Mamba only needs 10x more data. Besides, we see that the LSTM is able to learn the copy task but it needs 100x more data than transformers.\\n\\nB.2. Pre-trained models on the uniform copy task\\n\\nIn this section, we provide an additional experiment that shows the superiority of pre-trained Pythia over pre-trained Mamba models in the copy task.\"}"}
{"id": "duRRoGeoQT", "page_num": 14, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying\\n\\nNumber of training examples\\n0\\n25\\n50\\n75\\n100\\nAccuracy (%)\\n\\n(a) Copying long strings: character-level accuracy. Here we train models to copy strings of length $\\\\leq 300$ and evaluate character-level accuracy on strings of length 300. Transformers train much faster than GSSMs. Mamba has a more progressive learning curve than in Figure 1a. An LSTM cannot even learn the task within this number of samples at the character level.\\n\\n(b) Copying short strings: string-level accuracy. Here we train models to copy strings of length $\\\\leq 30$ and evaluate character-level accuracy on strings of length 30. Transformers train much faster than GSSMs. Compared to Figure 1a, we see that Mamba needs way less samples in order to learn to copy length-30 strings. An LSTM can learn to copy but requires 100x more training examples.\\n\\n(c) Copying short strings: character-level accuracy. Here we train models to copy strings of length $\\\\leq 30$ and evaluate character-level accuracy on strings of length 30 and report the character-level accuracy.\\n\\nFigure 10. Copy: uniform strings. To test whether it mattered that the strings were in natural language, we generate uniformly sampled strings (the generation process is described in Section 3). We find that this degrades the Mamba models while Pythia models are able to keep a high performance.\\n\\nWe consider the same setup as in Section 3: we sample uniform strings of alphabet characters with a fixed length and ask the model to copy it by using the same prompt format as the one described in Subsection 4.2. This setting is a more extreme version of Figure 7b since the strings are more random: in Figure 7b, the order of the nouns were random but the nouns were English nouns while in Figure 7b, the strings are totally random. In Figure 10, we see a clear separation between the transformers and Mamba models with the smallest Pythia outperforming the largest Mamba. However, compared to Figure 7b, the Pythia performance is much higher since the 1.4B model able to get almost 100% accuracy.\\n\\nFigure 11. String-level copying accuracy obtained by perfect n-gram models and Transformers with Hard-ALiBi. Transformers performance matches the one of 5-gram model.\\n\\nIn Figure 11, we display the performance of perfect n-gram models in the copy task. To obtain these curves, we uniformly sample 128 strings over 3 seeds and report the probability there is a n-gram. This probability corresponds to the performance of a perfect n-gram model. We observe that Transformers enhanced with the Hard-ALiBi positional encoding have a performance close to a perfect 5-gram model.\"}"}
{"id": "duRRoGeoQT", "page_num": 15, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying\\n\\nAlgorithm 1\\n\\nHash-based copying\\n\\nInput:\\nsequence \\\\( x_1, \\\\ldots, x_L \\\\)\\n\\nLet \\\\( s : \\\\mathcal{D}^{\\\\ast} \\\\rightarrow \\\\mathbb{R}^d \\\\) be some hashing function.\\n\\nfor \\\\( i = n + 2, \\\\ldots, L \\\\) do\\n\\n\\\\( k_i \\\\leftarrow s(x_i - n, x_i - n + 1, \\\\ldots, x_i - 1) \\\\)\\n\\n\\\\( v_i \\\\leftarrow x_i \\\\)\\n\\nend for\\n\\nfor \\\\( j = 1, \\\\ldots, L \\\\) do\\n\\nif \\\\( j \\\\leq n \\\\) then\\n\\n\\\\( y_j \\\\leftarrow x_j \\\\)\\n\\nelse\\n\\n\\\\( q_j \\\\leftarrow s(y_j - n, \\\\ldots, y_j - 1) \\\\)\\n\\nLet \\\\( i \\\\in \\\\mathbb{I}^L \\\\) s.t. \\\\( k_i = q_j \\\\), and set \\\\( y_j \\\\leftarrow x_i \\\\)\\n\\nend if\\n\\nend for\\n\\nOutput:\\nsequence \\\\( y_1, \\\\ldots, y_L \\\\)\\n\\nC. Proofs - Upper Bound\\n\\nThis section gives a detailed proof of Theorem 2.3 and Lemma 2.4.\\n\\nC.1. Technical Lemmas\\n\\nWe begin by introducing some technical lemmas that we use in the proof of Theorem 2.3.\\n\\nLemma C.1.\\n\\nLet \\\\( h_t(x_1, \\\\ldots, x_i) = \\\\min(t, i) \\\\sum_{j=1}^{\\\\max(1, i-t+1)} x_j \\\\). Then, \\\\( h_t \\\\) can be computed using a hard-ALiBi attention head.\\n\\nProof.\\n\\nLet \\\\( W_k, W_q = 0 \\\\) (zero matrix) and let \\\\( W_v = I^d \\\\) (identity matrix). We choose \\\\( b_i \\\\in \\\\{0, -\\\\infty\\\\} \\\\) s.t. \\\\( b_{i,j} = \\\\begin{cases} -\\\\infty & j \\\\leq i-t+1 \\\\\\\\ 0 & j > i-t \\\\end{cases} \\\\).\\n\\nLemma C.2.\\n\\nAssume that \\\\( d = \\\\lceil \\\\log(D) \\\\rceil + 2 \\\\). Then, there exists an embedding \\\\( \\\\Psi \\\\) s.t.\\n\\n- For every \\\\( x \\\\in \\\\mathcal{D} \\\\) it holds that \\\\( \\\\|\\\\Psi(x)\\\\|_2 = 1 \\\\) and \\\\( \\\\|\\\\Psi(x)\\\\|_\\\\infty \\\\leq 1 \\\\).\\n- For \\\\( x' \\\\neq x \\\\) it holds that \\\\( \\\\langle x, x' \\\\rangle < 1 - \\\\frac{1}{d} \\\\).\\n- For every \\\\( x \\\\neq \\\\langle \\\\text{BOS} \\\\rangle \\\\), \\\\( \\\\langle \\\\Psi(x), \\\\Psi(\\\\langle \\\\text{BOS} \\\\rangle) \\\\rangle = 0 \\\\), and for every \\\\( x \\\\neq \\\\langle \\\\text{COPY} \\\\rangle \\\\), \\\\( \\\\langle \\\\Psi(x), \\\\Psi(\\\\langle \\\\text{COPY} \\\\rangle) \\\\rangle = 0 \\\\).\\n\\nProof.\\n\\nDenote \\\\( d' = \\\\lceil \\\\log(D) \\\\rceil \\\\), and observe that we can encode all \\\\( \\\\mathcal{D} \\\\) \\\"non-special\\\" tokens as vectors in \\\\( n \\\\pm \\\\sqrt{d} \\\\), and denote this encoding by \\\\( \\\\Psi' \\\\). Now, define:\\n\\n\\\\[\\n\\\\Psi(x) = \\\\begin{cases} \\\\[1, 0, \\\\ldots, 0\\\\] & x = \\\\langle \\\\text{BOS} \\\\rangle \\\\\\\\ \\\\[0, 1, 0, \\\\ldots, 0\\\\] & x = \\\\langle \\\\text{COPY} \\\\rangle \\\\\\\\ \\\\Psi'(x) & \\\\text{otherwise} \\\\end{cases}\\n\\\\]\"}"}
{"id": "duRRoGeoQT", "page_num": 16, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying\\n\\nLemma C.3. Let $z \\\\in \\\\mathbb{R}^K$ be some vector such that, for some constants $a > b > 0$, there exists $i \\\\in [K]$ s.t. $z_i = a$ and for all $j \\\\neq i$ we have $|z_j| \\\\leq b$. Denote $s = \\\\text{softmax}(z)$. Then $s_i \\\\geq \\\\frac{1}{1+K \\\\exp(b-a)}$ and $s_j \\\\leq \\\\exp(b-a)$ for all $j \\\\neq i$.\\n\\nProof. First, notice that:\\n\\n$$\\\\exp(a) = \\\\exp(z_i) \\\\leq K \\\\sum_{j=1}^{\\\\infty} \\\\exp(z_j) \\\\leq \\\\exp(z_i) + (K-1) \\\\exp(b) \\\\leq \\\\exp(a) + K \\\\exp(b-a) = \\\\exp(a)(1+K \\\\exp(b-a))$$\\n\\nObserve the following:\\n\\n$$s_i = \\\\frac{\\\\exp(z_i)}{\\\\sum_{j=1}^{\\\\infty} \\\\exp(z_j)} \\\\geq \\\\frac{\\\\exp(a)}{1+K \\\\exp(b-a)} = \\\\frac{1}{1+K \\\\exp(b-a)}$$\\n\\nFinally, for every $j \\\\neq i$:\\n\\n$$s_j = \\\\frac{\\\\exp(z_j)}{\\\\sum_{j=1}^{\\\\infty} \\\\exp(z_j)} \\\\leq \\\\frac{\\\\exp(b)}{\\\\exp(a)} = \\\\exp(b-a)$$\\n\\nC.2. Proof of Theorem 2.3\\n\\nWe begin by constructing the first block of the transformer, which computes the \\\"lookup-table\\\" for the copy algorithm. This lookup-table consists of pairs of (key,values) for each position $i$, where the key encodes the $n$-gram preceding the $i$-th token, and the value is the $i$-th token. Namely, if the sequence is $x_1, \\\\ldots, x_i$, then $\\\\text{key}_i = (x_i-n-1, \\\\ldots, x_i)$ and $\\\\text{value}_i = x_i$.\\n\\nAdditionally, the transformer block also computes a query, which is just the \\\"current\\\" $n$-gram, i.e. $\\\\text{query}_i = (x_i-n, \\\\ldots, x_i)$.\\n\\nThe copy algorithm matches the current query with previous key-s, retrieving the matching value.\\n\\nThe following theorem shows that by using a combination of $n$ hard-ALiBi attention heads (with different choice of $m$ for each head), together with an MLP layer, can compute the correct $(\\\\text{key}_i, \\\\text{value}_i, \\\\text{query}_i)$ for each position. We use a slightly modified key, query to handle cases where the $i \\\\leq n$ (or, $i$ is one of the first $n$ tokens after the $\\\\langle$COPY$\\\\rangle$ token).\\n\\nLemma C.4. Let $\\\\Psi$ be the one-hot embedding. Then, there exists a hard-ALiBi transformer block with 3 outputs, denoted $T_{\\\\text{key}}, T_{\\\\text{query}}, T_{\\\\text{value}}$, which correspond to 3 blocks of the output dimension, s.t. $T_{\\\\text{key}}: \\\\mathbb{R}^{d \\\\times \\\\ast} \\\\rightarrow \\\\mathbb{R}^{(d+1)n \\\\times \\\\ast}$, $T_{\\\\text{query}}: \\\\mathbb{R}^{d \\\\times \\\\ast} \\\\rightarrow \\\\mathbb{R}^{(d+1)n \\\\times \\\\ast}$ and $T_{\\\\text{value}}: \\\\mathbb{R}^{d \\\\times \\\\ast} \\\\rightarrow \\\\mathbb{R}^{d \\\\times \\\\ast}$ satisfying, for all $x$ sampled from a length-$n$ copy distribution,\\n\\n1. Value output: for all $i$, $T_{\\\\text{value}}_i(\\\\Psi(x_1), \\\\ldots, \\\\Psi(x_i)) = \\\\Psi(x_i)$\\n2. Key output:\\n   - For $t = 1, \\\\ldots, n$, if $i > n$ $T_{\\\\text{key}}(t-1)d+1:td,i(\\\\Psi(x_1), \\\\ldots, \\\\Psi(x_i)) = \\\\Psi(x_i-t)$ and if $i \\\\leq n$ $T_{\\\\text{key}}(t-1)d+1:td,i(\\\\Psi(x_1), \\\\ldots, \\\\Psi(x_i)) = 0$\\n   - Additionally, for $t = 1, \\\\ldots, n$, for all $i$ $T_{\\\\text{key}}nd+t,i(\\\\Psi(x_1), \\\\ldots, \\\\Psi(x_i)) = 1 \\\\{i = t+1\\\\}$\\n3. Query output:\\n   - For $t = 1, \\\\ldots, n$, if $i \\\\geq n$ $T_{\\\\text{query}}(t-1)d+1:td,i(\\\\Psi(x_1), \\\\ldots, \\\\Psi(x_i)) = \\\\Psi(x_i-t+1)$ and if $i < n$ $T_{\\\\text{query}}(t-1)d+1:td,i(\\\\Psi(x_1), \\\\ldots, \\\\Psi(x_i)) = 0$\"}"}
{"id": "duRRoGeoQT", "page_num": 17, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Proof.\\n\\nWe prove the following:\\n\\n1. For the value output, we simply take $t$.\\n\\n2. For each $t$.\\n\\n3. For all $i$ and if $j$.\\n\\nFor every $t$.\\n\\nFinally, we can take $T$.\\n\\nClaim:\\n\\nDenote $\\\\tilde{g}$\\n\\nClaim:\\n\\nDenote $\\\\hat{g}$\\n\\nClaim:\\n\\nFix some $i$.\\n\\nProof:\\n\\nDenote $\\\\Psi$\\n\\nClaim:\\n\\nProof:\\n\\nClaim:\\n\\nRepeat After Me: Transformers are Better than State Space Models at Copying\"}"}
{"id": "duRRoGeoQT", "page_num": 18, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying\\n\\n\u2022 If $i = L + t$ then $g_{t-1,i} = \\\\Psi(x_{i-t+1}) = \\\\Psi(x_{L+1}) = \\\\Psi(\\\\langle\\\\text{COPY}\\\\rangle)$ and therefore $g^*_{t,i} = 1$.\\n\\n\u2022 If $i \\\\neq L + t$ and $i > t - 1$ then $g_{t-1,i} = \\\\Psi(x_{i-t+1}) \\\\perp \\\\Psi(\\\\langle\\\\text{COPY}\\\\rangle)$ and therefore $g^*_{t,i} = 0$.\\n\\n\u2022 If $i \\\\leq t$ then since $x_1, \\\\ldots, x_i \\\\neq \\\\langle\\\\text{COPY}\\\\rangle$ we get $\\\\Psi(\\\\langle\\\\text{COPY}\\\\rangle) \\\\cdot g_{t-1,i} = 0$ and therefore $g^*_{t,i} = 0$.\\n\\nTherefore, we can take $T_{\\\\text{query}} = [\\\\hat{g}^*_0, \\\\ldots, \\\\hat{g}^*_{q-1}, n \\\\cdot g^*_1, \\\\ldots, n \\\\cdot g^*_q]$.\\n\\nNow, we prove Theorem 2.3 by showing that using a single attention head with no positional embedding on top of the construction in Lemma C.4 realizes the copy algorithm. Since the first block computes the correct choice of key, query, value, by correctly scaling of the attention matrix we verify that the output of the second layer at position $i$ corresponds to $\\\\approx$ value $j$ for $j$ s.t. key $j = \\\\text{query}_i$.\\n\\nProof of Theorem 2.3.\\n\\nLet $T_{\\\\text{value}}, T_{\\\\text{key}}, T_{\\\\text{query}}$ be the outputs of the Transformer block guaranteed by Lemma C.4. Observe that, for some temperature $\\\\tau \\\\in \\\\mathbb{R}$, the following function can be computed by a softmax-attention layer on-top of this block:\\n\\n$$H(\\\\Psi(x_1), \\\\ldots, \\\\Psi(x_i)) = T_{\\\\text{value}} \\\\cdot \\\\text{softmax}(\\\\tau \\\\cdot T_{\\\\text{key}} \\\\cdot T_{\\\\text{query}}_i)$$\\n\\nwhere e.g. $T_{\\\\text{value}}$ denotes $T_{\\\\text{value}}(\\\\Psi(x_1), \\\\ldots, \\\\Psi(x_i))$.\\n\\nFor now, assume that all the $n$-grams in $x$ are unique, and that the length of the input satisfies $2L + 2 \\\\leq K$ for $K = D_n$. \\n\\nClaim: Fix some $i > L$, denote $z = T_{\\\\text{key}} \\\\cdot T_{\\\\text{query}}_i$. Then, $z_{i-L+1} = n$ and $|z_j| < n - 1$ d for all $j \\\\neq i - L + 1$.\\n\\nProof: We separate to the following cases:\\n\\n\u2022 If $i > L + n - 1$, then for every $j$ we have $T_{\\\\text{key}}_j \\\\cdot T_{\\\\text{query}}_i = 1 \\\\{j > n\\\\} \\\\cdot [\\\\Psi(x_{j-t+1}), \\\\ldots, \\\\Psi(x_{j-n})]^\\\\top [\\\\Psi(x_{i-t+1}), \\\\ldots, \\\\Psi(x_{i-n+1})] = 1 \\\\{j > n\\\\} \\\\cdot n \\\\sum_{t=1}^{n-1} \\\\Psi(x_{j-t+1})\\\\Psi(x_{i-t+1})$\\n\\nNow, if $j = i - L + 1$ then $x_{j-t+1} = x_{i-L+1-t+1} = x_{i-t+1}$ and since $j > n$ we get $T_{\\\\text{key}}_j \\\\cdot T_{\\\\text{query}}_i = n \\\\sum_{t=1}^{n-1} \\\\Psi(x_{i-t+1})\\\\Psi(x_{i-t+1})$\\n\\nIf $j \\\\neq i - L + 1$ then there are no repeated $n$-grams, there is at least some $t \\\\in [n]$ s.t. $\\\\Psi(x_{j-t+1}) \\\\neq \\\\Psi(x_{i-t+1})$ and by the choice of the embedding $T_{\\\\text{key}}_j \\\\cdot T_{\\\\text{query}}_i \\\\leq 1 - 1d$.\\n\\n\u2022 If $L < i \\\\leq L + n - 1$ and $j \\\\leq n$ then $T_{\\\\text{key}}_j \\\\cdot T_{\\\\text{query}}_i = ne_{j-1} \\\\cdot e_{i-L} = n \\\\cdot 1 \\\\{j = i - L + 1\\\\}$ which satisfies the required.\\n\\n\u2022 If $L < i \\\\leq L + n - 1$ and $j > n$ then $T_{\\\\text{key}}_j \\\\cdot T_{\\\\text{query}}_i = n \\\\sum_{t=1}^{n-1} \\\\Psi(x_{j-t+1})\\\\Psi(x_{i-t+1})$ and as before, since there are no repeated $n$-grams, we get $T_{\\\\text{key}}_j \\\\cdot T_{\\\\text{query}}_i \\\\leq n - 1d$.\\n\\nClaim: Fix some $\\\\epsilon \\\\in (0, 1)$ and some $i > L$, denote $s = \\\\text{softmax}(\\\\tau T_{\\\\text{key}} \\\\cdot T_{\\\\text{query}}_i) = \\\\text{softmax}(\\\\tau z)$. If $\\\\tau = d \\\\ln(2K/\\\\epsilon)$, then $s_{i-L+1} \\\\geq 1 - \\\\epsilon$ and $s_j \\\\leq \\\\epsilon 2K$ for all $j \\\\neq i - L + 1$.\\n\\nProof: Using the previous claim, together with Lemma C.3, we get that:\"}"}
{"id": "duRRoGeoQT", "page_num": 19, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying\\n\\n\\\\[ s_i - L + 1 \\\\geq 1 + \\\\exp(-\\\\tau/d) \\\\geq 1 + K \\\\exp(-\\\\tau/d) \\\\geq 1 + \\\\epsilon/2 = 1 - \\\\epsilon/2 \\\\geq 1 - \\\\epsilon \\\\]\\n\\nFor \\\\( j \\\\neq i - L + 1 \\\\), \\\\( s_j \\\\leq \\\\exp(-\\\\tau/d) \\\\leq \\\\epsilon/2 K \\\\)\\n\\nClaim: Fix some \\\\( \\\\epsilon \\\\in (0, 1) \\\\) and some \\\\( i > L \\\\). Then, for \\\\( \\\\tau \\\\geq d \\\\ln(2K \\\\epsilon) \\\\), it holds that:\\n\\n\\\\[ \\\\| H(\\\\Psi(x_1), \\\\ldots, \\\\Psi(x_i)) - \\\\Psi(x_{i - L + 1}) \\\\| \\\\leq \\\\epsilon \\\\]\\n\\nProof: Let \\\\( s \\\\) as defined in the previous claim. Then:\\n\\n\\\\[ \\\\| H(\\\\Psi(x_1), \\\\ldots, \\\\Psi(x_i)) - \\\\Psi(x_{i - L + 1}) \\\\| = \\\\sum_{j=1}^{i} s_j \\\\Psi(x_j) - \\\\Psi(x_{i - L + 1}) \\\\leq (1 - s_{i - L + 1}) \\\\| \\\\Psi(x_{i - L + 1}) \\\\| + \\\\sum_{j \\\\neq i - L + 1} s_j \\\\| \\\\Psi(x_j) \\\\| = (1 - s_{i - L + 1}) + \\\\epsilon/2 K \\\\leq 2 \\\\epsilon \\\\]\\n\\nNow, denote by \\\\( \\\\Phi : \\\\mathbb{R}^d \\\\to \\\\mathbb{D} \\\\) the output map given by \\\\( \\\\Phi(z) = \\\\arg \\\\max_{x \\\\in \\\\mathbb{D}} z \\\\cdot \\\\Psi(x) \\\\)(which can be computed by an \\\\( \\\\arg \\\\max \\\\) over a linear function).\\n\\nClaim: If \\\\( \\\\tau \\\\geq d \\\\ln(8Kd) \\\\), then for all \\\\( i > L \\\\) we have \\\\( \\\\Phi(H(\\\\Psi(x_1), \\\\ldots, \\\\Psi(x_i))) = x_{i - L + 1} \\\\).\\n\\nProof: Denote \\\\( y_i = H(\\\\Psi(x_1), \\\\ldots, \\\\Psi(x_i)) \\\\). First, using the previous claim, we observe that\\n\\n\\\\[ y_i \\\\cdot \\\\Psi(x_{i - L + 1}) = (y_i - \\\\Psi(x_{i - L + 1})) \\\\cdot \\\\Psi(x_{i - L + 1}) + \\\\| \\\\Psi(x_{i - L + 1}) \\\\| \\\\geq 1 - \\\\| y_i - \\\\Psi(x_{i - L + 1}) \\\\| \\\\geq 1 - 1/4d \\\\]\\n\\nNext, observe that for all \\\\( j \\\\neq i - L + 1 \\\\) we have\\n\\n\\\\[ y_i \\\\cdot \\\\Psi(x_j) = (y_i - \\\\Psi(x_{i - L + 1})) \\\\cdot \\\\Psi(x_j) + \\\\Psi(x_j) \\\\cdot \\\\Psi(x_{i - L + 1}) \\\\leq \\\\| y_i - \\\\Psi(x_{i - L + 1}) \\\\| + 1 - 3/4d < y_i \\\\cdot \\\\Psi(x_{i - L + 1}) \\\\]\\n\\nFrom the above claim, the Transformer construction outputs the correct token at each step of the auto-regressive generation.\\n\\nC.3. Proof of Lemma 2.4\\n\\nProof of Lemma 2.4. Fix some \\\\( i < j \\\\in [L] \\\\). Let \\\\( I := \\\\{i, \\\\ldots, i+n\\\\} \\\\) and \\\\( J := \\\\{j, \\\\ldots, j+n\\\\} \\\\). We first bound the probability of drawing some \\\\( x \\\\) s.t. \\\\( x_I = x_J \\\\). Note that there are \\\\( D|I \\\\cup J| \\\\) choices for \\\\( x_I \\\\cup J \\\\). We count the number of choices for \\\\( x_I \\\\cup J \\\\) s.t. \\\\( x_I = x_J \\\\). Notice that in this case, \\\\( x_I \\\\cup J \\\\) is determined by \\\\( x_I \\\\setminus J \\\\), therefore there are \\\\( D|I \\\\setminus J| \\\\) possible choices. We conclude that\\n\\n\\\\[ \\\\Pr [x_I = x_J] = \\\\frac{D|I \\\\setminus J|}{D|I \\\\cup J|} = \\\\frac{D|I \\\\setminus J|}{D|I \\\\cup J|} = D - n \\\\]\\n\\nUsing the union bound, we get that\\n\\n\\\\[ \\\\Pr [\\\\exists i < j \\\\text{ s.t. } x_i, \\\\ldots, i+n = x_j, \\\\ldots, j+n] \\\\leq \\\\sum_{i<j} \\\\Pr [x_i, \\\\ldots, i+n = x_j, \\\\ldots, j+n] < L \\\\frac{D - n}{19} \\\\]\"}"}
{"id": "duRRoGeoQT", "page_num": 20, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying\\n\\nD. Proofs - Lower Bound\\n\\nIn this section, we prove Theorem 2.7. We begin by showing that, for every input, the output of the model in each iteration is a deterministic function of the state of the model after observing the input:\\n\\nLemma D.1. Let $H_{u,r} : D^n \\\\rightarrow D^n$ be some fixed-state sequence-to-sequence model. Then, there exists a map $G : S \\\\rightarrow D^n$ such that for all $x \\\\in D^n$, $H_{u,r}(x) = G \\\\circ S_n(x)$.\\n\\nProof. Let $x_{n+1}, \\\\ldots, x_{n+n}$ be the outputs of $H_{u,r}$. We need to show that there exist functions $G_1, \\\\ldots, G_n$ such that $H_{u,r}(x_1, \\\\ldots, x_{n'}) = G(S_n(x_1, \\\\ldots, x_{n'}))$. We give the following recursive definition:\\n\\n- $G_1(s) = r(s)$,\\n- $\\\\tilde{G}_1(s) = u(s, G_1(s))$.\\n\\n- $G_i(s) = r(\\\\tilde{G}_{i-1}(s))$,\\n- $\\\\tilde{G}_i(s) = u(\\\\tilde{G}_{i-1}(s), G_i(s))$.\\n\\nDenote $s = S_n(x_1, \\\\ldots, x_{n'})$. We prove by induction that $G_i(s) = x_{n'+i}$ and also that $\\\\tilde{G}_i(s) = S_{n'+i}(x_1, \\\\ldots, x_{n'+i})$.\\n\\n- $G_1(s) = r(s) = R_{n'}(x_1, \\\\ldots, x_{n'}) = x_{n'+1}$.\\n- $\\\\tilde{G}_1(s) = u(s, G_1(s)) = u(s, x_{n'+1}) = S_{n'+1}(x_1, \\\\ldots, x_{n'+1})$.\\n\\n- $G_i(s) = r(\\\\tilde{G}_{i-1}(s)) = r(S_{n'+i-1}(x_1, \\\\ldots, x_{n'+i-1})) = R_{n'+i-1}(x_1, \\\\ldots, x_{n'+i-1}) = x_{n'+i}$.\\n- $\\\\tilde{G}_i(s) = u(\\\\tilde{G}_{i-1}(s), G_i(s)) = u(S_{n'+i-1}(x_1, \\\\ldots, x_{n'+i-1}), x_{n'+i}) = S_{n'+i}(x_1, \\\\ldots, x_{n'+i})$.\\n\\nGiven the previous Lemma, we bound the error of the model by comparing the number of possible states to the number of possible inputs.\\n\\nProof of Theorem 2.7. From Lemma D.1, there exists some function $G : S \\\\rightarrow D^n$ such that $H_{u,r} = G \\\\circ S_n$. For each $x$, we denote by $\\\\tilde{x}$ the sequence $\\\\langle \\\\text{BOS} \\\\rangle, x, \\\\langle \\\\text{COPY} \\\\rangle$. Now, observe the following:\\n\\n$$1 - \\\\text{err}_{D^n}(H_{u,r}) = \\\\Pr_{D^n}[H_{u,r}(\\\\tilde{x}) = x] = \\\\frac{1}{D^n} \\\\sum_{x \\\\in D^n} 1\\\\{H_{u,r}(\\\\tilde{x}) = x\\\\} = \\\\frac{1}{D^n} \\\\sum_{s \\\\in S} \\\\sum_{x \\\\in S - 1 \\\\{\\\\tilde{x}\\\\}} 1\\\\{G \\\\circ S_n(\\\\tilde{x}) = x\\\\} \\\\leq |S|.$$\"}"}
{"id": "duRRoGeoQT", "page_num": 1, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Transformers are Better than State Space Models at Copying\\n\\nSamy Jelassi 1\\nDavid Brandfonbrener 2\\nSham M. Kakade 2 3\\nEran Malach 2\\n\\nAbstract\\nTransformers are the dominant architecture for sequence modeling, but there is growing interest in models that use a fixed-size latent state that does not depend on the sequence length, which we refer to as \u201cgeneralized state space models\u201d (GSSMs). In this paper we show that while GSSMs are promising in terms of inference-time efficiency, they are limited compared to transformer models on tasks that require copying from the input context. We start with a theoretical analysis of the simple task of string copying and prove that a two layer transformer can copy strings of exponential length while GSSMs are fundamentally limited by their fixed-size latent state. Empirically, we find that transformers outperform GSSMs in terms of efficiency and generalization on synthetic tasks that require copying the context. Finally, we evaluate pretrained large language models and find that transformer models dramatically outperform state space models at copying and retrieving information from context. Taken together, these results suggest a fundamental gap between transformers and GSSMs on tasks of practical interest.\\n\\n1. Introduction\\nTransformers (Vaswani et al., 2017) are the workhorse of modern sequence modeling, achieving remarkable performance on a variety of tasks, but they have unavoidable inefficiencies. Specifically, they require $\\\\Omega(L^2)$ memory and $\\\\Omega(L)$ compute to predict the next token of a sequence of length $L$. This has spurred a boom in attempts to create architectures that can achieve similar performance as transformers, but with $O(1)$ memory to predict each token. This class of models includes state space models like S4 (Gu et al., 2021) or Mamba (Gu & Dao, 2023), as well as traditional RNN models (Hochreiter & Schmidhuber, 1997) and models that can be trained in parallel like linear attention (Katharopoulos et al., 2020; Choromanski et al., 2020) and parallel RNNs (Bradbury et al., 2016; Peng et al., 2023; Sun et al., 2023). In this paper, we will refer to this entire class of models that use a fixed-size memory as \u201cgeneralized state space models\u201d or GSSMs (see a formal definition in Section 2).\\n\\nRecent work has demonstrated impressive performance of GSSMs, but it is not yet clear what these models sacrifice for their improved efficiency, if anything. In this paper, we find that one particular capability that is sacrificed is the ability to retrieve and repeat parts of the input context. As a result, transformers are better than GSSMs at a variety of tasks that require accessing arbitrary parts of the context. To understand this gap in capabilities, we begin by presenting a theoretical analysis of the copying task. First, we show via construction that a simple transformer model can copy strings of length that is exponential in the number of heads of the transformer. This construction relies on the ability of the transformer to implement a mechanism of \u201cstorage\u201d and retrieval of sequences of $n$ tokens ($n$-grams), where the $n$-grams are used to track where to copy from. In contrast, we show that, trivially, GSSMs cannot accurately copy strings with more bits than the size of the latent state. Our theory studies representation expressivity, but not whether these representations will be learned. Moreover, in practice a large GSSM may have enough capacity to represent the entire input in the latent state, at least in theory. To resolve these concerns, we conduct a variety of synthetic experiments with models of $\\\\sim 160$M parameters. We find memory efficient implementations, such as FlashAttention (Dao et al., 2022), compute the attention with $O(L)$ memory.\\n\\n2 Note that we study copying of the input and not copying of training data (McCoy et al., 2023; Carlini et al., 2022)\"}"}
{"id": "duRRoGeoQT", "page_num": 2, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying\\n\\n2. Theory: Representational Capacity\\n\\nIn this section we use the copy task for a theoretical comparison between state space models and transformers. We prove two main results. First, we construct a small transformer that solves the copy task for sequences lengths that are exponential in the transformer size. Second, we show that any state space model fails to solve the copy task, unless its latent state grows linearly with the sequence length.\\n\\n2.1. Setting\\n\\nLet $D$ be a dictionary, which contains $D$ \u201calphabet\u201d tokens. A sequence-to-sequence model is a function $H: D^* \\\\rightarrow D^*$, which maps an input sequence of tokens to an output sequence. We think of the input $x_1, \\\\ldots, x_i$ as the \u201cprompt\u201d to the model, and of the output sequence $H(x_1, \\\\ldots, x_i)$ as the generated \u201canswer.\u201d\\n\\nA sequence-to-token mapping is a function $h: D^* \\\\rightarrow D$. Any sequence-to-token model $h$ naturally defines a sequence-to-sequence model $H$ by auto-regressive inference. Namely, for every input sequence $x_1, \\\\ldots, x_i \\\\in D$ we define recursively $x_{i+j} = h(x_1, \\\\ldots, x_{i+j-1})$ and let $H(x_1, \\\\ldots, x_i) = (x_{i+1}, x_{i+2}, \\\\ldots)$.\\n\\nGeneralized state space models. A state space $S$ is some finite set. We denote by $\\\\text{mem}(S)$ the number of bits required to encode the states of $S$, namely $\\\\text{mem}(S) = \\\\log(|S|)$. A generalized state space model (GSSM) is a sequence model defined by an update rule $u: S \\\\times D \\\\rightarrow S$ and some output function $r: S \\\\rightarrow D$. Let $s_0 \\\\in S$ be some initial state. Given some sequence $x_1, \\\\ldots, x_L$, the state of the model at iteration $i$ is denoted by $S_i(x_1, \\\\ldots, x_i)$ and the output token is denoted by $R_i(x_1, \\\\ldots, x_i)$. The state and output are defined recursively: 1) $S_0(\\\\emptyset) = s_0$, 2) $S_i(x_1, \\\\ldots, x_i) = u(S_{i-1}(x_1, \\\\ldots, x_{i-1}), x_i)$, 3) $R_i(x_1, \\\\ldots, x_i) = r(S_i(x_1, \\\\ldots, x_i))$.\\n\\nRemark 2.1. It is important to note that for any sequence model, there are two types of memory considerations: 1) input-independent memory (parameters) and 2) input-dependent memory (activations). The GSSM definition constrains the input-dependent memory (activations), which\"}"}
{"id": "duRRoGeoQT", "page_num": 3, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying\\n\\nFigure 2. An illustration of the copy task.\\n\\ncorresponds to \\\\( \\\\text{mem}(S) \\\\), and does not restrict in any way the amount of input-independent memory (parameters) or the run-time of state updates. Since our main goal is to show a lower bound on the state space memory, leaving all other considerations unconstrained only strengthens our results.\\n\\nTransformers. Given some input of length \\\\( L \\\\) and dimension \\\\( d \\\\), denoted \\\\( x_1, \\\\ldots, x_L \\\\in \\\\mathbb{R}^d \\\\), an attention head is parameterized by \\\\( W_k, W_q, W_v \\\\in \\\\mathbb{R}^{d \\\\times d} \\\\). We denote \\\\( k_i = W_k x_i \\\\), \\\\( q_i = W_q x_i \\\\), \\\\( v_i = W_v x_i \\\\) and denote \\\\( K_i = [k_1, \\\\ldots, k_i] \\\\in \\\\mathbb{R}^{d \\\\times i} \\\\) and \\\\( V_i = [v_1, \\\\ldots, v_i] \\\\in \\\\mathbb{R}^{d \\\\times i} \\\\). We denote the output of the head at token \\\\( i \\\\) by \\\\( o_i \\\\in \\\\mathbb{R}^d \\\\), where \\\\( o_i = V_i \\\\cdot \\\\text{softmax}(K_i \\\\cdot q_i) \\\\).\\n\\nWe consider a transformer with \\\\( l \\\\) attention heads, each one of dimension \\\\( d \\\\) so that the full dimension of the Transformer is \\\\( dL \\\\). An embedding is some mapping \\\\( \\\\Psi : D \\\\rightarrow \\\\mathbb{R}^d \\\\). An MLP is a function \\\\( f : \\\\mathbb{R}^{dL} \\\\rightarrow \\\\mathbb{R}^{dL} \\\\) s.t. \\\\( f(x) = U_1 \\\\sigma(U_2 x) \\\\), for some activation function \\\\( \\\\sigma \\\\). Both the embedding and the MLP layer are assumed to be applied on the token level. An attention-block is a set of \\\\( l \\\\) heads applied in parallel, and a transformer-block is an attention-block followed by an MLP which operates on the concatenated output of the \\\\( l \\\\) heads.\\n\\nThe output of the model is sampled based on the output of the final layer. For simplicity, we study the \\\\( \\\\text{arg max} \\\\) \u201csampling\u201d (i.e., predicting the most probable token).\\n\\nThe copy task. To define the copy task, we add two special tokens to \\\\( D \\\\): (1) beginning-of-sequence token, denoted \\\\( \\\\langle \\\\text{BOS} \\\\rangle \\\\), and (2) copy token, denoted \\\\( \\\\langle \\\\text{COPY} \\\\rangle \\\\). So now \\\\( |D| = D + 2 \\\\). A length-\\\\( L \\\\) copy distribution \\\\( D_L \\\\) over \\\\( D_L + 2 \\\\) generates strings of the form: \\\\( \\\\langle \\\\text{BOS} \\\\rangle, x_1, \\\\ldots, x_L, \\\\langle \\\\text{COPY} \\\\rangle \\\\), where \\\\( x \\\\in (D \\\\setminus \\\\{ \\\\langle \\\\text{BOS} \\\\rangle, \\\\langle \\\\text{COPY} \\\\rangle \\\\})^L \\\\).\\n\\nFor some sequence-to-sequence model \\\\( H : D^* \\\\rightarrow D^* \\\\), we denote the error of \\\\( H \\\\) on a copy distribution \\\\( D_L \\\\) by \\\\( \\\\text{err}_{D_L}(H) = \\\\Pr_{D_L}[H_1: L(\\\\langle \\\\text{BOS} \\\\rangle, x, \\\\langle \\\\text{COPY} \\\\rangle) \\\\neq x] \\\\) where \\\\( H_1: L(\\\\cdot) \\\\) denotes the first \\\\( L \\\\) tokens generated by \\\\( H \\\\).\\n\\nThat is, we expect the model to output an exact copy of \\\\( x \\\\).\\n\\n2.2. Transformers can copy inputs of exponential length\\n\\nIn this section, we show that transformers can implement the copy operation for input sequences with length exponential in the number of heads. Namely, we construct a transformer with two blocks that gets small error on the copy task.\\n\\nConstruction: hash-based copying. The key idea in the construction is to first \u201chash\u201d sequences of \\\\( n \\\\) tokens (\\\\( n \\\\)-grams), then at each iteration of the auto-regression attend to the previous occurrence of the most recent \\\\( n \\\\)-gram, and output the succeeding token. That is, we show that a transformer can implement the copying algorithm illustrated in Figure 3 (and see also Algorithm 1 in the Appendix).\\n\\nPositional embedding: Hard-ALiBi. To perform the hashing described in the algorithm, we need to be able to leverage local positional information to define a hash, and also to apply this hash function globally on the entire input. To do this, we use a hard version of ALiBi (Press et al., 2021), which we call Hard-ALiBi. Just as in ALiBi, we add a bias \\\\( b_i \\\\) to the \\\\( i \\\\)-th attention head as follows: \\\\( o_i = V_i \\\\cdot \\\\text{softmax}(K_i \\\\cdot q_i + b_i) \\\\). Specifically, we set \\\\( b_i \\\\) s.t. \\\\( b_{i,j} = -\\\\infty \\\\) for \\\\( j \\\\leq i - m \\\\) and \\\\( b_{i,j} = 0 \\\\) for \\\\( j > i - m \\\\). We allow different heads with different choices of \\\\( m \\\\) and also allow for \\\\( m = \\\\infty \\\\) which corresponds to softmax attention with no positional embedding. This is illustrated in Figure 8c (Appendix). While the Hard-ALiBi is introduced for our theoretical construction, we observe it also offers significant benefits empirically, as discussed in Section 3.\\n\\nGuarantees. The copy algorithm given in Algorithm 1 (and similarly, our transformer construction) can perfectly copy the input sequence, as long as there are no repeated \\\\( n \\\\)-gram patterns in the input. Therefore, the error of the algorithm depends on the probability of repeated \\\\( n \\\\)-grams:\\n\\n**Definition 2.2.** Let \\\\( D_L \\\\) be some copy distribution. For some \\\\( n \\\\in \\\\mathbb{N} \\\\), let \\\\( p_n\\\\text{-gram}(D_L) \\\\) be the probability that \\\\( x_1, \\\\ldots, x_L \\\\) contains two repeated sequences of \\\\( n \\\\) tokens. Namely:\\n\\n\\\\[\\np_n\\\\text{-gram}(D_L) = \\\\Pr_{D_L}[\\\\exists i \\\\neq j s.t. x_i, \\\\ldots, x_i+n = x_j, \\\\ldots, x_j+n]\\n\\\\]\"}"}
{"id": "duRRoGeoQT", "page_num": 4, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Repeat After Me: Transformers are Better than State Space Models at Copying\\n\\nBelow we state the main theoretical result on copying with transformers, showing that transformers can copy their input, with error bounded by the probability of repeated $n$-grams:\\n\\n**Theorem 2.3.** For all $n$, there exists a depth-2 transformer $T$ of dimension $\\\\tilde{O}(n \\\\log(D))$ s.t. for all $2^n \\\\leq L \\\\leq D$, and for any copy distribution $D_L$, $\\\\text{err}_{D_L}(T) < p_n^{\\\\text{gram}}(D_L)$.\\n\\nIntuitively, the probability of repeated $n$-grams decays quickly when increasing the value of $n$. Indeed, we show that for the uniform distribution over sequences, this probability decays exponentially with $n$:\\n\\n**Lemma 2.4.** Let $D_L$ be the copy distribution generated by sampling $x$ from the uniform distribution over the \\\"alphabet\\\" (non-special) tokens. Then, $p_n^{\\\\text{gram}}(D_L) < L^{2^n - n}$.\\n\\nCombining the above results, we get that transformers can copy sequences of tokens drawn from the uniform distribution, using a number of parameters that depends only logarithmically on the input sequence length.\\n\\n**Corollary 2.5.** Fix some $\\\\epsilon \\\\in (0, 1/2)$ and some $L \\\\geq \\\\Omega(\\\\log(1/\\\\epsilon))$. There exists a depth-2 transformer $T$ of dimension $\\\\tilde{O}(\\\\log(L/\\\\epsilon) \\\\log(D))$ s.t. for the uniform copy distribution $D_L$, $\\\\text{err}_{D_L}(T) < \\\\epsilon$.\\n\\n**Remark 2.6.** For simplicity we do not limit the precision of the parameters or activations, but note that our results hold for finite-precision transformers, using $\\\\tilde{O}(\\\\log(\\\\log(L)))$ bits.\\n\\n2.3. State Space Models cannot copy inputs beyond memory size\\n\\nWe saw that transformers are able to copy uniform sequences of tokens, with parameter count logarithmic in the sequence length. We now show that GSSMs cannot copy uniform input sequences, unless the capacity of their state space grows linearly with the size of the sequence length.\\n\\nThis is intuitive: to be able to copy the entire input sequence, the model needs to store it in its state space, which requires the memory to grow linearly with the sequence length.\\n\\n**Theorem 2.7.** Fix some GSSM $H$ over state space $S$. Then, for all $L$, for the uniform copy distribution $D_L$, the model $H$ has error $\\\\text{err}_{D_L}(H) > 1 - |S|^{D_L}$.\\n\\nGiven Theorem 2.7, the following Corollary is immediate:\\n\\n**Corollary 2.8.** Fix some $L \\\\in \\\\mathbb{N}$. Then, every GSSM $H$ with state space $S$ s.t. $\\\\text{mem}(S) < L \\\\log(D) - 1$ has error $\\\\text{err}_{D_L}(H) > 1/2$ for the uniform copy distribution $D_L$.\\n\\n**Remark 2.9.** As mentioned previously, the input-dependent memory of transformers grows linearly with the sequence length, which is less memory-efficient compared to GSSMs. However, it is interesting to note that from the above result, at least for the copy task, transformers are almost optimal in terms of their input-dependent memory. More specifically, an implication of Theorem 2.3 is that there exists a transformer which can copy inputs of length $L$ using $\\\\tilde{O}(L)$ input-dependent memory.\\n\\n3. Learning to Copy\\n\\nIn the previous section, we proved that transformers can represent the copy operation for exponentially long sequences, while GSSMs fail to copy long sequences due to their limited memory. While these results show that in theory, transformers can outperform GSSMs, our theoretical results do not establish that such a gap will be observed in practice for two reasons. First, it is not clear that transformers can indeed learn to copy from examples. Second, GSSMs in practice may use a large latent state memory, so that our bounds only hold for very long sequences of tokens. For example, a latent state of 1000 32-bit floating point numbers has enough bits to store at least 2000 tokens from a 50K token vocabulary. However, even though a GSSM could fit the context into memory, it may not learn to do so.\\n\\nOur goal in this section is to verify that our theoretical analysis bears out experimentally when training models from scratch on synthetic data, before moving on to study pretrained models in the next section. Specifically, we train transformers and GSSMs (LSTM (Hochreiter & Schmidhuber, 1997) and Mamba (Gu & Dao, 2023)) on variants of the copy task shown in Figure 2.\\n\\n3.1. Experimental setup\\n\\nWe now provide a brief overview of our experimental setup. Further details may be found in Appendix A.\\n\\n**Architecture.** In all our experiments, we set the model hyperparameters so that the Mamba and transformers have a similar number of parameters (\u2248 160 million parameters). Since we find that large LSTMs are hard to train (as confirmed in Pascanu et al. (2013)), we use the largest LSTM we managed to train which has \u2248 40 million parameters.\\n\\n**Dataset.** During training, we generate in an online manner a batch of 64 examples at each epoch. At test time, we evaluate our models on 10 batches of 128 examples. We report the mean and standard-deviation over these 10 batches. If not specified otherwise, our token space $V$ is of size 30 and made of the alphabet letters i.e. $V = \\\\{a, \\\\ldots, z, \\\\langle \\\\text{BOS} \\\\rangle, \\\\langle \\\\text{EOS} \\\\rangle, \\\\langle \\\\text{COPY} \\\\rangle\\\\}$ where $\\\\langle \\\\text{BOS} \\\\rangle$ is the beginning of sentence token, $\\\\langle \\\\text{EOS} \\\\rangle$ the end of sentence token and $\\\\langle \\\\text{COPY} \\\\rangle$ the separator token. All the strings are sampled uniformly i.e. we first sample the length of the sequence and then independently sample each position of the string from $V$. Finally, we \u201cpack the context\u201d with i.i.d. sequences.\\n\\n3.2. Results\\n\\nWe compare the performance of transformers and GSSMs on the copy task. For transformers, we use the architecture described in Section 3.1. For GSSMs, we use LSTM and Mamba, with the same architectural constraints. The results are shown in Figure 3.\\n\\n3.3. Discussion\\n\\nThe results show that transformers outperform GSSMs in terms of copying long sequences. However, the gap in performance is not as large as predicted by theory. One reason for this is that GSSMs use a large latent state memory, which allows them to store the context. This is in contrast to transformers, which require a linear amount of input-dependent memory.\\n\\nWe hypothesize that the ability to learn to copy long sequences is crucial for tasks such as language modeling, as it allows the model to generate coherent and natural text. It is interesting to note that transformers and GSSMs have different strengths and weaknesses, and it may be possible to combine their techniques to improve overall performance. For example, one could use the state space of GSSMs to store the context, and the copying ability of transformers to generate text.\\n\\n3.4. Conclusion\\n\\nIn this section, we have demonstrated that transformers are better at copying than GSSMs, both in theory and in practice. However, there are still many open questions, such as how to design better architectures for GSSMs, or how to combine the strengths of both approaches. Overall, these results highlight the potential of transformers for natural language processing tasks, and motivate further research in this area.\"}"}
