{"id": "9FLkxTGY3B", "page_num": 1, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"To answer complex queries on knowledge graphs, logical reasoning over incomplete knowledge is required due to the open-world assumption. Learning-based methods are essential because they are capable of generalizing over unobserved knowledge. Therefore, an appropriate dataset is fundamental to both obtaining and evaluating such methods under this paradigm. In this paper, we propose a comprehensive framework for data generation, model training, and method evaluation that covers the combinatorial space of Existential First-order Queries with multiple variables (EFO\\\\(^k\\\\)). The combinatorial query space in our framework significantly extends those defined by set operations in the existing literature. Additionally, we construct a dataset, EFO\\\\(^k\\\\)-CQA, with 741 query types for empirical evaluation, and our benchmark results provide new insights into how query hardness affects the results. Furthermore, we demonstrate that the existing dataset construction process is systematically biased that hinders the appropriate development of query-answering methods, highlighting the importance of our work. Our code and data are provided in https://anonymous.4open.science/r/EFOK-CQA/README.md.\\n\\nIntroduction\\n\\nThe Knowledge Graph (KG) is a powerful database that encodes relational knowledge into a graph representation [34, 31], supporting downstream tasks [41, 8] with essential factual knowledge. However, KGs suffer from incompleteness during its construction [34, 7], which is formally acknowledged as Open World Assumption (OWA) [19]. The task of Complex Query Answering (CQA) proposed recently has attracted much research interest [13, 28]. This task ambitiously aims to answer database-level complex queries described by logical complex connectives (conjunction \\\\(^^\\\\), disjunction \\\\(\\\\_\\\\), and negation \\\\(\\\\_\\\\)) and quantifiers (existential \\\\(\\\\_\\\\)) [37, 27, 18]. However, CQA on KGs differs from query answering on databases in two aspects: (1) traditional query answering algorithms obtain incomplete answers because of the incomplete KG [13]; (2) the huge size of the knowledge graph limits the scalability of traditional algorithms [26]. Therefore, learning-based methods dominate the CQA tasks because they can empirically generalize to unseen knowledge as well as prevent the resource-demanding symbolic search. The thriving of learning-based methods also puts an urgent request on high-quality datasets and benchmarks. In the previous study, datasets are developed by progressively expanding the syntactical...\"}"}
{"id": "9FLkxTGY3B", "page_num": 2, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"expressiveness, where conjunction [13], union [26], negation [28], and other operators [20] are taken into account sequentially. In particular, the dataset proposed in [28] contains all logical connectives and becomes the standard training set for model development. [36] proposed a large evaluation benchmark EFO-1-QA that systematically evaluates the combinatorial generalizability of CQA models on such queries. More related works are included in Appendix A.\\n\\nHowever, the queries in aforementioned datasets [28, 36] are recently justified as \u201cTree-Form\u201d queries [39] as they rely on the tree combinations of set operations. Compared to the well-established TPC-H decision support benchmark [25] for database query processing, queries in existing CQA benchmarks [28, 36] have two common shortcomings: (1) lack of combinatorial answers: only one variable is queried, and (2) lack of structural hardness: all existing queries subject to the structure-based tractability [29, 39]. It is rather questionable whether existing CQA data under such limited scope can support the future development of methodologies for general decision support with open-world knowledge.\\n\\nThe goal of this paper is to establish a new framework that addresses the aforementioned shortcomings to support further research in complex query answering on knowledge graphs. Our framework is formally motivated by the well-established investigation of constraint satisfaction problems, which all queries can be formulated as. In general, the contribution of our work is four folds.\\n\\nComplete coverage We capture the complete Existential First Order (EFO) queries from their rigorous definitions, underscoring both combinatorial hardness and structural hardness and extending the existing coverage [36] which covers only a subset of EFO query. The captured query family is denoted as EFO$_k$ where $k$ stands for multiple variables.\\n\\nCurated datasets We derive EFO$_k$-CQA dataset, a non-exclusive extension of the previous EFO-1-QA benchmark [36] and contains 741 types of query. We design several rules to guarantee that our dataset includes high-quality nontrivial queries, particularly those that contain multiple query variables and are not structure-based tractable.\\n\\nConvenient implementation We implement the entire pipeline for query generation, answer sampling, model training and inference, and evaluation for the undiscussed scenarios of combinatorial answers. Our pipeline is backward compatible, which supports both set operation-based methods and more recent ones.\\n\\nResults and findings We evaluate six representative CQA methods on our benchmark. Our results refresh the previous empirical findings and further reveal the structural bias of previous data.\\n\\n2 Problem definition\\n\\n2.1 Existential first order (EFO) queries on knowledge graphs\\n\\nGiven a set $E$ of entities and a set $R$ of relations, a knowledge graph $KG$ encodes knowledge as set of factual triple $KG = \\\\{(h, r, t) \\\\in E \\\\times R \\\\times E\\\\}$. According to the OWA, the knowledge graph that we have observed $KG_o$ is only part of the real knowledge graph, meaning that $KG_o \\\\subset KG$.\\n\\nThe existing research only focuses on the logical formulas without universal quantifiers [27, 35]. We then offer the definition of it based on strict first order logic.\\n\\nDefinition 1 (Term). A term is either a variable $x$ or an entity $a$ $P$ $E$.\\n\\nDefinition 2 (Atomic formula). $\\\\phi$ is an atomic formula if $\\\\phi = r(p(h, t)q)$, where $r$ $P$ $R$ is a relation, $h$ and $t$ are two terms.\\n\\nDefinition 3 (Existential first order formula). The set of the existential formulas is the smallest set $\\\\Phi$ that satisfies the following:\\n\\n(i) For atomic formula $r(p(h, t)q)$, itself and its negation $\\\\neg r(p(h, t)q)$, $\\\\neg r(p(h, t)q) \\\\in \\\\Phi$.\\n\\n(ii) If $\\\\phi, \\\\psi \\\\in \\\\Phi$, then $\\\\phi \\\\land \\\\psi, \\\\phi \\\\lor \\\\psi \\\\in \\\\Phi$.\\n\\n(iii) If $\\\\phi \\\\in \\\\Phi$ and $x_i$ is any variable, then $\\\\exists x_i \\\\phi \\\\in \\\\Phi$. \"}"}
{"id": "9FLkxTGY3B", "page_num": 3, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"\u2203 \ud835\udc65! \\n\\nAward(Fields, \ud835\udc66!) \u2227 \u00ac Award(Fields, \ud835\udc66\\\") \u2227 Born(\ud835\udc66!, \ud835\udc65!) \u2227 Born(\ud835\udc66!, \ud835\udc65\\\") \u2227 Colleague(\ud835\udc66!, \ud835\udc66\\\") \u2227 Co-author(\ud835\udc66!, \ud835\udc66\\\")\\n\\nLocated(Europe, \ud835\udc65!) \u2227 \u00ac Held(Olympics, \ud835\udc65!) \u2227 Presdient(\ud835\udc65!, \ud835\udc66!)\\n\\nFigure 1: Operator Tree versus Query Graph. \\n\\nLeft: An operator tree representing a given query \u201cList the presidents of European countries that have never held the Olympics\u201d [28];\\n\\nRight: A query graph representing a given query \u201cFind a pair of persons who are both colleagues and co-authors and were born in the same country, with one having awarded the fields medal while the another not\u201d, which is both a multigraph and a cyclic graph, containing two free variables.\\n\\nDefinition 4 (Free variable). If a variable \ud835\udc66 is not associated with a quantifier, it is called a free variable, otherwise, it is called a bounded variable. We write \u03d5_1^\\\\cdots^\\\\cdots^k_{y_1, \\\\cdots, y_k} to indicate \ud835\udc66_1, \\\\cdots, \ud835\udc66_k are the free variables of \u03d5.\\n\\nDefinition 5 (Sentence and query). A formula \u03d5 is a sentence if it contains no free variable, otherwise, it is called a query. In this paper, we always consider formula with free variable, thus, we use formula and query interchangeably.\\n\\nDefinition 6 (Substitution). For a_1, \\\\cdots, a_k, where a_i \\\\in PE, we write \u03d5_{a_1, \\\\cdots, a_k} to indicate that \u03d5 has been substituted by a_1, \\\\cdots, a_k.\\n\\nDefinition 7 (Answer of an EFO query). For a given existential query \u03d5_{y_1, \\\\cdots, y_k}, its answer is a set that defined by A_\\\\gamma_{y_1, \\\\cdots, y_k} = \\\\{a_1, \\\\cdots, a_k \\\\mid \u03d5_{a_1, \\\\cdots, a_k} is True\\\\}.\\n\\nDefinition 8 (Disjunctive Normal Form (DNF)). For any existential formula \u03d5_{y_1, \\\\cdots, y_k}, it can be converted to the Disjunctive normal form as shown below:\\n\\n\u03d5_{y_1, \\\\cdots, y_k} = \\\\gamma_1_{y_1, \\\\cdots, y_k} \\\\lor \\\\cdots \\\\lor \\\\gamma_m_{y_1, \\\\cdots, y_k}\\n\\n(1)\\n\\n\\\\gamma_i_{y_1, \\\\cdots, y_k} = D_{x_1, \\\\cdots, x_n} \\\\rho_i_{1^\\\\cdots^\\\\cdots^i_{\\\\cdots^\\\\cdots^i}}\\n\\n(2)\\n\\nwhere \\\\rho_{ij} is either an atomic formula or the negation of an atomic formula, x_i is called an existential variable.\\n\\nDNF form has a strong property that A_\\\\gamma_{y_1, \\\\cdots, y_k} = \\\\bigcup_{i=1}^m A_{\\\\gamma_i_{y_1, \\\\cdots, y_k}}, which allows us to only consider conjunctive formulas \\\\gamma_i and then aggregate those answers to retrieve the final answers. This practical technique has been used in many previous research [22, 27]. Therefore, we only discuss conjunctive formulas in the rest of this paper.\\n\\n2.2 Constraint satisfaction problem for EFO queries\\n\\nFormally, a constraint satisfaction problem (CSP) P can be represented by a triple P_{X, D, C} where X = (x_1, \\\\cdots, x_n) is an n-tuple of variables, D = (D_1, \\\\cdots, D_n) is the corresponding n-tuple of domains, C = (C_1, \\\\cdots, C_t) is t-tuple constraint, each constraint C_i is a pair of (S_i, R_{S_i}) where S_i is a set of variables S_i = \\\\{x_i, \\\\cdots, x_u\\\\} and R_{S_i} is the constraint over those variables [29].\\n\\nHistorically, there are strong parallels between CSP and conjunctive queries in knowledge bases [10, 17]. The terms correspond to the variable set X. The domain D_i of a constant entity contains only itself, while it is the whole entity set E for other variables. Each constraint C_i is binary that is induced by an atomic formula or its negation, for example, for an atomic formula r_{p, h, t, q}, we have S_i = \\\\{h, t\\\\}, R_{S_i} = p,h, r, t \\\\in KG. Finally, by the definition of existential quantifier, we only consider the answer of free variable, rather than tracking all terms within the existential formulas.\"}"}
{"id": "9FLkxTGY3B", "page_num": 4, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":true,\"natural_text\":\"Figure 2: Left: Example of trivial abstract query graph, in the upper left graph, the \\\\( x_1 \\\\) is redundant violating Assumption 13, in the bottom left graph, answers for the whole query can be decomposed to answer two free variables \\\\( y_1 \\\\) and \\\\( y_2 \\\\) alone, violating Assumption 14. Right: Example of new query graph that is not included in previous benchmark \\\\([36]\\\\) even though it can be represented by operator-tree. The representation of query graph follows Figure 1.\\n\\n**Definition 9** (CSP answer of conjunctive formula). For a conjunctive formula \\\\( \\\\gamma \\\\) in Equation 2 with \\\\( k \\\\) free variables and \\\\( n \\\\) existential variables, the answer set of it formulated as CSP instance is:\\n\\n\\\\[\\nA_{\\\\gamma} \\\\left( y_1, \\\\ldots, y_k, \\\\rho_1, \\\\ldots, \\\\rho_t \\\\right)\\n\\\\]\\n\\nThis shows that the inference of existential formulas is easier than solving CSP instances since the existential variables do not need to be kept track of.\\n\\n2.3 The representation of query\\n\\nTo give an explicit representation of existential formula, \\\\([13]\\\\) firstly proposes to represent a formula by operator tree, where each node represents the answer set for a sub-query, and the logic operators in it naturally represent set operations. This method allows for the recursive computation from constant entity to the final answer set in a bottom-up manner \\\\([\\\\ 28]\\\\). However, this representation method is inherently directed, acyclic, and simple, therefore more recent research breaks these constraints by being bidirectional \\\\([21, 37]\\\\) or being cyclic or multi \\\\([\\\\ 39]\\\\). To meet these new requirements, they propose to represent the formula by the query graph \\\\([39]\\\\), which inherits the convention of constraint network in representing CSP instance. We utilize this design and further extend it to represent EFO formula that contains multiple free variables. We provide the illustration and comparison of the operator tree and the query graph in Figure 1, where we show the strong expressiveness of the query graph. We also provide the formal definition of query graph as follows:\\n\\n**Definition 10** (Query graph). Let \\\\( \\\\gamma \\\\) be a conjunctive formula in equation 2, its query graph is defined by \\\\( G_{\\\\gamma} \\\\) where an atomic formula \\\\( \\\\rho \\\\) corresponds to \\\\( p_{h, r, t, u} \\\\) and \\\\( \\\\rho \\\\) corresponds to \\\\( p_{h, r, t, u} \\\\). Therefore, any conjunctive formulas can be represented by a query graph, in the rest of the paper, we use query graphs and conjunctive formulas interchangeably.\\n\\n3 The combinatorial space of EFO\\n\\nAlthough previous research has given a systematic investigation in the combinatorial space of operator trees \\\\([36]\\\\), the combinatorial space of the query graph is much more challenging due to the extremely large search space and the lack of explicit recursive formulation. To tackle this issue on a strong theoretical background, we put forward additional assumptions to exclude trivial query graphs. Such assumptions or restrictions also exist in the previous dataset and benchmark \\\\([28, 36]\\\\). Specifically, we propose to split the task of generating data into two levels, the abstract level, and the grounded level. At the abstract level, we create abstract query graph, at the grounded level, we provide the abstract query graph with the relation and constant and instantiate it as a query graph. In this section, we elaborate on how we investigate the scope of the nontrivial EFO query of interest step by step.\\n\\n3.1 Nontrivial abstract query graph of EFO\\n\\nThe abstract query graph is the ungrounded query graph without information of certain knowledge graphs, and we give an example in Figure 3.\"}"}
{"id": "9FLkxTGY3B", "page_num": 5, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Definition 11\\n\\nThe abstract query graph $G = (V, E, f, g)$ is a directed graph with three node types, Constant Entity, Existential Variable, Free variable $u$, and two edge types, positive, negative $u$. The $V$ is the set of nodes, $E$ is the set of directed edges, $f$ is the function maps node to node type, $g$ is the function maps edge to edge type.\\n\\nDefinition 12\\n\\nFor an abstract query graph $G$, a grounding is a function $I$ that maps it into a query graph $I(p)q = s\\\"$.\\n\\nWe propose two assumptions of the abstract query graph as follows:\\n\\nAssumption 13 (No redundancy).\\n\\nFor an abstract query graph $G$, there is not a subgraph $G\u0139G$ such that for every grounding $I$, $A_rI(p)I_Gq$.\\n\\nAssumption 14 (No decomposition).\\n\\nFor an abstract query graph $G$, there are no such two subgraphs $G_1, G_2$ satisfying that $G_1, G_2\u0139G$, such that for every instantiation $I$, $A_rI(p)I_Gq$ and $A_rI(p)I_Gq$ $\u015a$.\\n\\nWe note that the assumption 14 inherits the idea of the structural decomposition technique in CSP [11], which allows for solving a CSP instance by solving several sub-problems and combining the answer together based on topology property. Additionally, meeting these two assumptions in the grounded query graph is extremely computationally costly which we aim to avoid in practice.\\n\\nWe provide some easy examples to be excluded for violating the assumptions above in Figure 2.\\n\\n3.2 Nontrivial query graph of EFO\\n\\nSimilarly, we propose two assumptions on the query graph.\\n\\nAssumption 15 (Meaningful negation).\\n\\nFor any negative edge $e$ in query graph $G$, we require removing it results in different CSP answers:\\n\\nAssumption 15 treats negation separately because of the fact that for any $KG$, any relation $r$ $P$ $R$, there is $|tp h, t q|$ $h, t$ $P$ $E$, $p h, r, t q$ $P$ $u|$ $E$, which means that the constraint induced by the negation of an atomic formula is much less \\\"strict\\\" than the one induced by a positive atomic formula.\\n\\nAssumption 16 (Appropriate answer size).\\n\\nThere is a constant $M$ $E$ to bound the candidate set for each free variable $f_i$ in $G$, such that for any $i$, $|a_1, $ $a_2, $ $a_k qP$ $A_rG su| $ $\\\\leq M$.\\n\\nWe note the Assumption 16 extends the \\\"bounded negation\\\" assumption in the previous dataset [28, 36]. We give an example \\\"Find a city that is located in Europe and is the capital of a country that has not held the Olympics\\\" in Figure 2, where the candidate set of $x_1$ is in fact bounded by its relation with the $y_1$ variable but not from the bottom \\\"Olympics\\\" constant, hence, this query is excluded in their dataset due to the directionality of operator tree.\\n\\nOverall, the scope of the formula investigated in this paper surpasses the previous EFO-1-QA benchmark because of: (1). We include the EFO $k$ formula with multiple free variables for the first time; (2). We include the whole family of EFO $1$ query, many of them can not be represented by operator tree; (3) Our assumption is more systematic than previous ones as shown by the example in Figure 2. More details are offered in Appendix D.3.\\n\\n4 Framework\\n\\nWe develop a versatile framework that supports five key functionalities fundamental to the whole CQA task: (1) Enumeration of nontrivial abstract query graphs as discussed in Section 3; (2) Sample grounding for the abstract query graph; (3) Compute answer for any query graph efficiently; (4) Support implementation of existing CQA models; (5) Conduct evaluation including newly introduced EFO $k$ queries with multiple free variables. We explain each functionality in the following. An illustration of the first three functionalities is given in Figure 3.\"}"}
{"id": "9FLkxTGY3B", "page_num": 6, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"4.1 Enumerate abstract query graph\\n\\nAs discussed in Section 3, we are able to abide by those assumptions as well as enumerate all possible query graphs within a given search space where certain parameters, including the number of constants, free variables, existential variables, and the number of edges are all given. Additionally, we apply the graph isomorphism algorithm to avoid duplicated query graphs being generated. More details for our generation method are provided in Appendix D.1.\\n\\n4.2 Ground abstract query graph\\n\\nTo ground an abstract query graph $G$ and comply with the assumption 15, we split the abstract query graph into two parts, the positive part and the negative part, $G_p$ and $G_n$. Then the grounding process is also split into two steps: 1. Sample grounding for the positive subgraph $G_p$ and compute its answer 2. Ground the $G_n$ to decrease the answer got in the first step. Details in Appendix D.2.\\n\\nFinally, to fulfill the assumption 16, we follow the previous practice of manually filtering out queries that have more than 100 answers [28, 36], as we have introduced the EFO queries, we slightly soften this constraint to be no more than $100^k$ answers.\\n\\n4.3 Answer for existential formula\\n\\nAs illustrated in Section 2.2, the answer to an existential formula can be solved by a CSP solver, however, we also show in Definition 9 that CSP requires keeping track of the existential variables and it leads to huge computation costs. Thus, we develop our own algorithm following the standard solving technique of CSP, which ensures consistency conditions in the first step, and do the backtracking to get the final answers in the second step. Finally, we select part of our sampled queries and double-check it with the CSP solver https://github.com/python-constraint/python-constraint.\\n\\n4.4 Learning-based methods\\n\\nAs the query graph is an extension to the operator tree regarding the express ability to existential formulas, we are able to reproduce CQA models that are initially implemented by the operator tree in our new framework. Specifically, since the operator tree is directed and acyclic, we compute its topology ordering that allows for step-by-step computation in the query graph. This algorithm is illustrated in detail in the Appendix F. We note our implementation coincides with the original one.\\n\\nConversely, for the newly proposed models that are based on query graphs, the original operator tree framework is not able to implement them, while our framework is powerful enough. We have therefore clearly shown that the query graph representation is more powerful than the previous operator tree and is able to support arbitrary existential formulas as explained in Section 2.3.\\n\\n4.5 Evaluation protocol\\n\\nAs we have mentioned in Section 2.1, there is an observed knowledge graph $KG_o$ and a full knowledge graph $KG$. Thus, there is a set of observed answers $A_o$ and a set of full answers $A$ correspondingly. Since the goal of CQA is to tackle the challenge of OWA, it has been a common practice to evaluate CQA models by the \\\"hard\\\" answers $A_h$ = $A$ $\\\\backslash A_o$[26, 27]. However, to the best of our knowledge,\"}"}
{"id": "9FLkxTGY3B", "page_num": 7, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"there has not been a systematic evaluation protocol for EFO queries, thus we leverage this idea and propose three types of different metrics to fill the research gap in the area of evaluation of queries with multiple free variables, and thus have combinatorial answers.\\n\\nMarginal. For any free variable $f_i$, its full answer is $A_{f_i}^t = \\\\{a_1, \\\\ldots, a_k\\\\}$, the observed answer of it $A_{f_i}^o$ is defined similarly. This is termed \u201csolution projection\u201d in CSP theory [12] to evaluate whether the locally retrieved answer can be extended to an answer for the whole problem.\\n\\nThen, we rank the hard answer $A_{f_i}^h$ against those non-answers $E_{f_i}^h$ and $E_{f_i}^o$ and use the ranking to compute standard metrics like MRR, HIT@K for every free variable. Finally, the metric on the whole query graph is taken as the average of the metric on all free variables. We note that this metric is an extension of the previous design proposed by [20]. However, this metric has the inherent drawback that it fails to evaluate the combinatorial answer by the $k$-length tuple and thus fails to find the correspondence among free variables.\\n\\nMultiply. Because of the limitation of the marginal metric discussed above, we propose to evaluate the combinatorial answer by each $k$-length tuple $p_a_1, \\\\ldots, a_k$ in the hard answer set $A_{f_i}^h$. Specifically, we rank each $a_i$ in the corresponding node $f_i$ the same as the marginal metric. Then, we propose the HIT@$n_k$ metric, it is 1 if all $a_i$ is ranked in the top $n_k$ in the corresponding node $f_i$, and 0 otherwise.\\n\\nJoint. Finally, we note these metrics above are not the standard way of evaluation, which is based on a joint ranking for all the $E_k$ combinations of the entire search space. We propose to estimate the joint ranking in a closed form given certain assumptions, see Appendix E for the proof and details.\\n\\n5 The EFO$^k$-CQA dataset and benchmark results\\n\\n5.1 The EFO$^k$-CQA dataset\\n\\nWith the help of our framework developed in Section 4, we are able to develop a new dataset called EFO$^k$-CQA, whose combinatorial space is parameterized by the number of constants, existential and free variables, and the number of edges. EFO$^k$-CQA dataset includes 741 different abstract query graphs in total. The parameters and the generation process, as well as its statistics, are detailed in Appendix D.4.\\n\\nThen, we conduct experiments on our new EFO$^k$-CQA dataset with six representative CQA models including BetaE [28], LogicE [24], and ConE [40], which are built on the operator tree, CQD [2], LMPNN [35], and FIT [39] which are built on query graph. The experiments are conducted in two parts, (1). the queries with one free variable, specifically, including those that can not be represented by operator tree; (2). the queries that contain multiple free variables.\\n\\nWe have made some adaptations to the implementation of CQA models, allowing them to infer EFO$^k$ queries, full detail is offered in Appendix F. The experiment is conducted on a standard knowledge graph FB15k-237 [32] and additional experiments on other standard knowledge graphs FB15k and NELL are presented in Appendix H.\\n\\n5.2 Benchmark results for $k = 1$\\n\\nBecause of the great number of abstract query graphs, we follow [36] to group query graphs by three factors: (1). the number of constant entities; (2). the number of existential variables, and (3). the topology of the query graph. The result is shown in Table 1.\\n\\nStructure analysis. Firstly, we find a clear monotonic trend that adding constant entities makes a query easier while adding existing variables makes a query harder, which the previous research [36] fails to uncover. Besides, we are the first to consider the topology of query graphs: when the number of constant entities is equal to the number of nodes in the graph, the query has only one edge and is the hardest to solve.\\n\\nWe note $A_{f_i}^h$ can be empty for some free variable or even for all free variables, making these marginal metrics not reliable, details in Appendix E.\\n\\nWe make a further constraint in our EFO$^k$-CQA dataset that the total edge is at most as many as the number of nodes, thus, a graph can not be both a multigraph and a cyclic graph.\"}"}
{"id": "9FLkxTGY3B", "page_num": 8, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":true,\"is_diagram\":false,\"natural_text\":\"Table 1: HIT@10 scores(%) for inferring queries with one free variable on FB15k-237. We denote $e$ as the number of existential variables and $c$ as the number of constant entities. SDAG represents the Simple Directed Acyclic Graph, Multi for multigraph, and Cyclic for the cyclic graph. A VG.($c$) and A VG.($e$) is the average score of queries with the number of constant entities / existential variables fixed.\\n\\n| Model  | $c=0$ | $c=1$ | $c=2$ | A VG.($c$) | A VG.($e$) | SDAG | SDAG | Multi | SDAG | Multi | Cyclic | SDAG | SDAG | Multi | SDAG | Multi | Cyclic |\\n|--------|-------|-------|-------|------------|------------|------|------|-------|------|------|--------|------|------|-------|------|------|--------|\\n| BetaE  | 31.4  | 33.0  | 22.3  | 17.7       | 43.8       | 30.7 | 22.1 | 36.4  | 57.2 | 36.2 | 35.5   | 29.3 | 29.4 | 45.3  | 32.5 |\\n| LogicE | 34.4  | 34.9  | 23.0  | 17.4       | 42.4       | 30.3 | 22.4 | 36.7  | 60.0 | 38.4 | 36.8   | 29.8 | 29.3 | 45.3  | 33.0 |\\n| ConE   | 34.9  | 35.4  | 23.6  | 18.4       | 44.9       | 34.2 | 23.5 | 39.0  | 61.0 | 39.1 | 38.4   | 32.0 | 31.5 | 50.2  | 35.2 |\\n| CQD    | 39.0  | 34.2  | 17.6  | 17.4       | 48.7       | 28.7 | 18.7 | 35.9  | 50.7 | 33.8 | 33.6   | 28.4 | 28.4 | 45.7  | 31.4 |\\n| LMPNN  | 38.6  | 37.8  | 21.8  | 17.8       | 41.5       | 31.7 | 23.2 | 35.8  | 62.2 | 40.2 | 35.0   | 30.8 | 28.1 | 44.4  | 32.5 |\\n| FIT    | 38.7  | 42.7  | 32.5  | 26.1       | 41.5       | 28.8 | 28.8 | 47.0  | 65.5 | 47.7 | 48.2   | 39.7 | 40.1 | 56.5  | 43.4 |\\n\\nWe have found the originally investigated queries that correspond to Simple Directed Acyclic Graphs (SDAG) are generally easier than the multigraphs ones but harder than the cyclic graph ones. This is an intriguing result that greatly deviates from traditional CSP theory in close world which finds that the cyclic graph is NP-complete, while the acyclic graph is tractable [6]. Our conjecture for this intriguing result in the open world is that the cyclic graph contains one more constraint than SDAG that serves as a source of information for CQA models, while the multigraph tightens an existing constraint and thus makes the query harder.\\n\\nModel analysis. For models that are built on operator tree, including BetaE, LogicE, and ConE, their relative performance is steady among all breakdowns and is consistent with their reported score in the original dataset [28], showing similar generalizability. However, for models that are built on query graphs, including CQD, LMPNN, and FIT, we have found that LMPNN performs generally better than CQD in SDAG, but falls behind CQD in multigraphs and cyclic graphs. We assume the reason behind this is that LMPNN requires training while CQD does not, however, the original dataset are biased which only considers SDAG, leading to the result that LMPNN doesn't generalize well to the unseen tasks with different topology property. We expect future CQA models may use our framework to address this issue of biased data and generalize better to more complex queries.\\n\\nWe note FIT is designed to infer all EFO1 queries and is indeed able to outperform other models in almost all breakdowns, however, its performance comes with the price of computational cost, and\"}"}
{"id": "9FLkxTGY3B", "page_num": 9, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table 2: HIT@10 scores(%) of three different types for answering queries with two free variables on FB15k-237. The constant number is fixed to be two. \\n\\n| Model | Type   | e=0 HIT@10 | e=1 HIT@10 | e=2 HIT@10 |\\n|-------|--------|-------------|-------------|-------------|\\n| BetaE | SDAG   | 54.5        | 50.2        | 49.5        |\\n|       | Multi  | 27.3        | 22.4        | 22.3        |\\n|       | Joint  | 6.3         | 5.4         | 5.2         |\\n| LogicE| SDAG   | 58.2        | 50.9        | 52.2        |\\n|       | Multi  | 32.1        | 23.1        | 24.9        |\\n|       | Joint  | 6.8         | 6.0         | 6.1         |\\n| ConE  | SDAG   | 60.3        | 53.8        | 54.2        |\\n|       | Multi  | 33.7        | 25.2        | 26.1        |\\n|       | Joint  | 6.7         | 6.4         | 6.2         |\\n| CQD   | SDAG   | 50.4        | 46.5        | 49.1        |\\n|       | Multi  | 28.9        | 23.4        | 25.4        |\\n|       | Joint  | 8.0         | 8.0         | 7.4         |\\n| LMPNN | SDAG   | 58.4        | 51.1        | 54.9        |\\n|       | Multi  | 35.0        | 26.7        | 29.2        |\\n|       | Joint  | 7.6         | 7.5         | 7.1         |\\n| FIT   | SDAG   | 64.3        | 61.0        | 63.1        |\\n|       | Multi  | 39.7        | 32.2        | 35.9        |\\n|       | Joint  | 7.4         | 9.0         | 7.8         |\\n\\nTable 2 shows the HIT@10 scores for different models and types of queries with two free variables. The performance of models varies significantly depending on the number of existential variables and the topology of the query graph. The results indicate the difficulty of answering queries with multiple variables, with joint HIT@10 scores being particularly low.\\n\\n5.3 Benchmark results for k=2\\n\\nAs we have explained in Section 4.5, we propose three kinds of metrics, marginal ones, multiply ones, and joint ones, from easy to hard, to evaluate the performance of a model in the scenario of multiple variables. The evaluation result is shown in Table 2. As the effect of the number of constant variables is quite clear, we remove it and add the metrics based on HIT@10 as the new factor.\\n\\nFor the impact regarding the number of existential variables and the topology property of the query graph, we find the result is similar to Table 1, which may be explained by the fact that those models are all initially designed to infer queries with one free variable. For the three metrics we have proposed, we have identified a clear difficulty difference among them though they generally show similar trends. The scores of joint HIT@10 are pretty low, indicating the great hardness of answering queries with multiple variables. Moreover, we have found that FIT falls behind other models in some breakdowns which are mostly cyclic graphs, corroborating our discussion in Section 5.2.\"}"}
{"id": "9FLkxTGY3B", "page_num": 10, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"\\n\\n[1] Dimitrios Alivanistos, Max Berrendorf, Michael Cochez, and Mikhail Galkin. Query Embedding on Hyper-relational Knowledge Graphs, September 2022. arXiv:2106.08166 [cs].\\n\\n[2] Erik Arakelyan, Daniel Daza, Pasquale Minervini, and Michael Cochez. Complex Query Answering with Neural Link Predictors. In International Conference on Learning Representations, 2020.\\n\\n[3] Jiaxin Bai, Zihao Wang, Hongming Zhang, and Yangqiu Song. Query2Particles: Knowledge Graph Reasoning with Particle Embeddings. In Findings of the Association for Computational Linguistics: NAACL 2022, pages 2703\u20132714, 2022.\\n\\n[4] Yushi Bai, Xin Lv, Juanzi Li, and Lei Hou. Answering Complex Logical Queries on Knowledge Graphs via Query Computation Tree Optimization. In Proceedings of the 40th International Conference on Machine Learning, pages 1472\u20131491. PMLR, July 2023. ISSN: 2640-3498.\\n\\n[5] Antoine Bordes, Nicolas Usunier, Alberto Garcia-Duran, Jason Weston, and Oksana Yakhnenko. Translating Embeddings for Modeling Multi-relational Data. In Advances in Neural Information Processing Systems, volume 26. Curran Associates, Inc., 2013.\\n\\n[6] Cl\u00e9ment Carbonnel and Martin C Cooper. Tractability in constraint satisfaction problems: a survey. Constraints, 21(2):115\u2013144, 2016. Publisher: Springer.\\n\\n[7] Andrew Carlson, Justin Betteridge, Bryan Kisiel, Burr Settles, Estevam Hruschka, and Tom Mitchell. Toward an architecture for never-ending language learning. In Proceedings of the AAAI conference on artificial intelligence, volume 24, pages 1306\u20131313, 2010. Issue: 1.\\n\\n[8] Lisa Ehrlinger and Wolfram W\u00f6\u00df. Towards a definition of knowledge graphs. SEMANTiCS (Posters, Demos, SuCCESS), 48(1-4):2, 2016.\\n\\n[9] Michael Galkin, Zhaocheng Zhu, Hongyu Ren, and Jian Tang. Inductive logical query answering in knowledge graphs. Advances in Neural Information Processing Systems, 35:15230\u201315243, 2022.\\n\\n[10] Georg Gottlob, Nicola Leone, and Francesco Scarcello. Hypertree decompositions and tractable queries. In Proceedings of the eighteenth ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems, pages 21\u201332, 1999.\\n\\n[11] Georg Gottlob, Nicola Leone, and Francesco Scarcello. A comparison of structural CSP decomposition methods. Artificial Intelligence, 124(2):243\u2013282, December 2000.\\n\\n[12] Gianluigi Greco and Francesco Scarcello. On The Power of Tree Projections: Structural Tractability of Enumerating CSP Solutions. Constraints, 18(1):38\u201374, January 2013. arXiv:1005.1567 [cs].\\n\\n[13] Will Hamilton, Payal Bajaj, Marinka Zitnik, Dan Jurafsky, and Jure Leskovec. Embedding logical queries on knowledge graphs. Advances in neural information processing systems, 31, 2018.\\n\\n[14] Zhiwei Hu, V\u00edctor Guti\u00e9rrez-Basulto, Zhiliang Xiang, Xiaoli Li, and Jeff Pan. Type-aware Embeddings for Multi-Hop Reasoning over Knowledge Graphs. May 2022.\\n\\n[15] Qian Huang, Hongyu Ren, and Jure Leskovec. Few-shot relational reasoning via connection subgraph pretraining. Advances in Neural Information Processing Systems, 35:6397\u20136409, 2022.\\n\\n[16] Zhen Jia, Soumajit Pramanik, Rishiraj Saha Roy, and Gerhard Weikum. Complex Temporal Question Answering on Knowledge Graphs. In Proceedings of the 30th ACM International Conference on Information & Knowledge Management, CIKM \u201921, pages 792\u2013802, New York, NY, USA, 2021. Association for Computing Machinery.\"}"}
{"id": "9FLkxTGY3B", "page_num": 11, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Phokion G Kolaitis and Moshe Y Vardi. Conjunctive-query containment and constraint satisfaction. In Proceedings of the seventeenth ACM SIGACT-SIGMOD-SIGART symposium on Principles of database systems, pages 205\u2013213, 1998.\\n\\nJure Leskovec. Databases as Graphs: Predictive Queries for Declarative Machine Learning. In Proceedings of the 42nd ACM SIGMOD-SIGACT-SIGAI Symposium on Principles of Database Systems, PODS '23, page 1, New York, NY, USA, 2023. Association for Computing Machinery.\\n\\nLeonid Libkin and Cristina Sirangelo. Open and Closed World Assumptions in Data Exchange. Description Logics, 477, 2009.\\n\\nLihui Liu, Boxin Du, Heng Ji, ChengXiang Zhai, and Hanghang Tong. Neural-Answering Logical Queries on Knowledge Graphs. In Proceedings of the 27th ACM SIGKDD Conference on Knowledge Discovery & Data Mining, pages 1087\u20131097, 2021.\\n\\nXiao Liu, Shiyu Zhao, Kai Su, Yukuo Cen, Jiezhong Qiu, Mengdi Zhang, Wei Wu, Yuxiao Dong, and Jie Tang. Mask and Reason: Pre-Training Knowledge Graph Transformers for Complex Logical Queries. In Proceedings of the 28th ACM SIGKDD Conference on Knowledge Discovery and Data Mining, pages 1120\u20131130, August 2022. arXiv:2208.07638 [cs].\\n\\nXiao Long, Liansheng Zhuang, Li Aodi, Shafei Wang, and Houqiang Li. Neural-based Mixture Probabilistic Query Embedding for Answering FOL queries on Knowledge Graphs. 2022.\\n\\nHaoran Luo, Yuhao Yang, Gengxian Zhou, Yikai Guo, Tianyu Yao, Zichen Tang, Xueyuan Lin, Kaiyang Wan, and others. NQE: N-ary Query Embedding for Complex Query Answering over Hyper-relational Knowledge Graphs. arXiv preprint arXiv:2211.13469, 2022.\\n\\nFrancois Luus, Prithviraj Sen, Pavan Kapanipathi, Ryan Riegel, Ndivhuwo Makondo, Thabang Lebese, and Alexander Gray. Logic embeddings for complex query answering. arXiv preprint arXiv:2103.00418, 2021.\\n\\nMeikel Poess and Chris Floyd. New TPC benchmarks for decision support and web commerce. ACM Sigmod Record, 29(4):64\u201371, 2000. Publisher: ACM New York, NY, USA.\\n\\nH Ren, W Hu, and J Leskovec. Query2box: Reasoning Over Knowledge Graphs In Vector Space Using Box Embeddings. In International Conference on Learning Representations (ICLR), 2020.\\n\\nHongyu Ren, Mikhail Galkin, Michael Cochez, Zhaocheng Zhu, and Jure Leskovec. Neural Graph Reasoning: Complex Logical Query Answering Meets Graph Databases, March 2023. arXiv:2303.14617 [cs].\\n\\nHongyu Ren and Jure Leskovec. Beta embeddings for multi-hop logical reasoning in knowledge graphs. Advances in Neural Information Processing Systems, 33:19716\u201319726, 2020.\\n\\nFrancesca Rossi, Peter van Beek, and Toby Walsh. Handbook of Constraint Programming. Elsevier Science Inc., USA, 2006.\\n\\nApoorv Saxena, Soumen Chakrabarti, and Partha Talukdar. Question Answering Over Temporal Knowledge Graphs, June 2021. arXiv:2106.01515 [cs].\\n\\nFabian M Suchanek, Gjergji Kasneci, and Gerhard Weikum. Yago: a core of semantic knowledge. In Proceedings of the 16th international conference on World Wide Web, pages 697\u2013706, 2007.\\n\\nKristina Toutanova and Danqi Chen. Observed versus latent features for knowledge base and text inference. In Proceedings of the 3rd workshop on continuous vector space models and their compositionality, pages 57\u201366, 2015.\"}"}
{"id": "9FLkxTGY3B", "page_num": 12, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":null}"}
{"id": "9FLkxTGY3B", "page_num": 13, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Did you include the total amount of compute and the type of resources used (e.g., type of GPUs, internal cluster, or cloud provider)? [Yes]\\n\\nIf you are using existing assets (e.g., code, data, models) or curating/releasing new assets...\\n\\n(a) If your work uses existing assets, did you cite the creators? [Yes]\\n\\n(b) Did you mention the license of the assets? [No] They are all open datasets.\\n\\n(c) Did you include any new assets either in the supplemental material or as a URL? [Yes]\\n\\n(d) Did you discuss whether and how consent was obtained from people whose data you're using/curating? [N/A]\\n\\n(e) Did you discuss whether the data you are using/curating contains personally identifiable information or offensive content? [N/A]\\n\\nIf you used crowdsourcing or conducted research with human subjects...\\n\\n(a) Did you include the full text of instructions given to participants and screenshots, if applicable? [N/A] We have not used crowdsourcing.\\n\\n(b) Did you describe any potential participant risks, with links to Institutional Review Board (IRB) approvals, if applicable? [N/A]\\n\\n(c) Did you include the estimated hourly wage paid to participants and the total amount spent on participant compensation? [N/A]\"}"}
