{"id": "LdxNWDNvC3", "page_num": 1, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"AFBench: A Large-scale Benchmark for Airfoil Design\\n\\nJian Liu, Jianyu Wu, Hairun Xie, Guoqing Zhang, Jing Wang, Wei Liu, Wanli Ouyang, Junjun Jiang, Xianming Liu, Shixiang Tang, Miao Zhang\\n\\n1 Harbin Institute of Technology\\n2 Shanghai Artificial Intelligence Laboratory\\n3 Shanghai Aircraft Design and Research Institute\\n\\nAbstract\\n\\nData-driven generative models have emerged as promising approaches towards achieving efficient mechanical inverse design. However, due to prohibitively high cost in time and money, there is still lack of open-source and large-scale benchmarks in this field. It is mainly the case for airfoil inverse design, which requires to generate and edit diverse geometric-qualified and aerodynamic-qualified airfoils following the multimodal instructions, i.e., dragging points and physical parameters.\\n\\nThis paper presents the open-source endeavors in airfoil inverse design, AFBench, including a large-scale dataset with 200 thousand airfoils and high-quality aerodynamic and geometric labels, two novel and practical airfoil inverse design tasks, i.e., conditional generation on multimodal physical parameters, controllable editing, and comprehensive metrics to evaluate various existing airfoil inverse design methods. Our aim is to establish AFBench as an ecosystem for training and evaluating airfoil inverse design methods, with a specific focus on data-driven controllable inverse design models by multimodal instructions capable of bridging the gap between ideas and execution, the academic research and industrial applications.\\n\\nWe have provided baseline models, comprehensive experimental observations, and analysis to accelerate future research. Our baseline model is trained on an\\n\\nCorresponding Author\"}"}
{"id": "LdxNWDNvC3", "page_num": 2, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"1 Introduction\\n\\nThe airfoil inverse design problem serves as the center of the automatic airfoil design, which is to seek design input variables, i.e., physical parameters, to optimize an underlying objective function, e.g., aerodynamics. Previous methods can be divided into two categories: optimization methods [1, 2, 3] and data-driven methods [4, 5, 6, 7]. First, the optimization-based methods usually design an objective function by constructing a mathematical model and leverage the typical optimization algorithms, e.g., genetic algorithms [8], adjoint optimization [9] and topology optimization [10], to find the optimal input variables as the design parameters. Despite the success, these methods have limitations in considerable time consumption and the diversity of the optimal design variables due to the constructed physical model of airfoils. Second, the data-driven methods [11, 12, 13, 14] typically borrow ideas from the advancements in conditional generative models in artificial intelligence. Popular generative methods such as CGAN [15], CV AE [16], and Diffusion models [17, 18] have been explored, demonstrating their effectiveness. However, current data-driven methods suffer from the following three drawbacks. First, the existing datasets are relatively small-scale, e.g., the design geometry dataset UIUC [19] contain only thousands of samples. Therefore, data-driven models trained on such datasets have limited generalization capabilities and fail to generate diverse solutions that meet the requirements. Second, the current datasets typically provide only a single condition, i.e., aerodynamic parameters, and thus cannot handle multi-condition design, i.e., controlling leading edge radius and upper crest position as geometric parameters simultaneously, which are real industrial applications in airfoil design. Third, current airfoil inverse design methods do not support progressive editing existing designs according to manual and multimodal requirements, which limits their applications in the industry. For example, one of our authors from Shanghai Aircraft Design and Research Institute, who has over 10 years experiences for airfoil design, claimed that each airfoils used in current commercial airplanes underwent years of progressively refinements by hundreds of engineers.\\n\\nTo drive the development of generative models in the field of engineering design, we construct a comprehensive airfoil benchmark, AFBench, that can be a cornerstone to cope with the aforementioned challenges with the following merits:\\n\\n1. Tasks \u2013 Multi-Conditional Generation and Editing in Airfoil Inverse Design: Regarding the aforementioned dataset, we tailor it to accommodate two new but more practical tasks in real airfoil design: multi-conditional airfoil generation and multimodal airfoil editing. The task of airfoil generation is not limited to the previous approach of generating airfoils based solely on given aerodynamic labels such as Lift-to-drag ratio. Instead, it involves generating airfoils based on multiple intricate geometric labels proposed by our authors who are experts in airfoil designs, which is more challenge but practical than previous airfoil generation based on the single condition. We introduce a newly developed airfoil editing task, which currently allows for the modification of both control points and physical parameters of the airfoil. The editing of physical parameters is not present in traditional airfoil editing software, and the movement of control points, compared to the spline interpolation in traditional software, is enabled by AI models with a broader design space.\\n\\n2. Datasets - Large-scale Airfoil Datasets with High-quality and Comprehensive Geometric and Aerodynamic Labels: Regarding the aforementioned airfoil inverse design tasks, the training subset of the proposed AFBench consists of 200,000 well-designed both synthetic and manually-designed airfoils with 11 geometric parameters and aerodynamic properties under 66 work conditions (Mach number from 0.2 to 0.7, Lift coefficient from 0 to 2). To construct the AFBench, we propose an automatic data engine that includes data synthesis, high-quality annotations and low-quality filtering. Different from previous datasets, we (i) not only combine all airfoils in the existing datasets such as such as UIUC [19] and NACA [20], but also include 2,150 new manually-designed supercritical airfoils from Shanghai Aircraft Design and Research Institute that is highly insufficient in existing datasets; (ii) further enlarge the dataset to 200,000 airfoils by effective data synthesis with conventional physical models and unconditional generative models; (iii) annotate geometric and aerodynamic labels by CFD (Computational fluid dynamics) simulation software.\\n\\n3. Open-source Codebase and Benchmarks \u2013 A Open-source Codebase of Data-driven Generative Models for Airfoil Inverse Design with State-of-the-art Methods and Comprehensive...\"}"}
{"id": "LdxNWDNvC3", "page_num": 3, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Evaluation Metrics:\\n\\nSince there are still absent a comprehensive and clean codebase to compare and analyze different airfoil inverse design methods, we release a comprehensive and publicly accessible codebase to facilitate future researches. This codebase includes multiple existing methods, e.g., cV AE [21, 22, 23], cGAN [24, 25], and our newly proposed primary architectures for both multi-conditional airfoil generation and controllable airfoil editing, PK-V AE, PK-V AE, PK-GAN, PKV AE-GAN, PK-DIFF, PK-DiT inspired by mainstream generative frameworks, i.e., V AE, GAN and Diffusion models. To facilitate exploration and usage, we have also provided a user-friendly demo that easily allows different airfoil inverse design methods for online generation and editing. Furthermore, different from previous benchmarks that only evaluates the aerodynamic performance, we also provide the interface to evaluate the geometric quality, the aerodynamic quality and the diversity of the generated airfoils, which are also crucial for airfoil inverse design.\\n\\nThe main contributions of this work are summarized as follows:\\n\\n\u2022 We propose the use of generative methods for two key tasks in airfoil design: multi-conditional airfoil generation and airfoil editing. We also establish comprehensive evaluation metrics including diversity, controllability, geometric quality and aerodynamic quality.\\n\\n\u2022 We propose a large-scale and diverse airfoil dataset in Airfoil Generative Design. This dataset includes 200 thousand airfoil shapes, accompanied by detailed geometric and aerodynamic annotation labels. The dataset can provide valuable resources for training and evaluating generative models in airfoil inverse design.\\n\\n\u2022 We construct and open-source a codebase that encompasses generative methods in airfoil design, including foundational techniques such as cV AE, cGAN as well as advanced models like PK-GAN, PK-V AE, PKV AE-GAN and PK-DiT. We provide a user-friendly demo that allows for visualizing and experiencing airfoil design in real-time.\\n\\nRelated Work\\n\\nAirfoil Inverse Design.\\n\\nThe ultimate goal of airfoil inverse design is to use algorithms to automatically find airfoils that meet the given requirements. Previous efforts [26, 27] have explored datasets for investigating airfoil aerodynamic characteristics, but have largely relied on the UIUC and NACA airfoil shapes, lacking the support to explore large-scale airfoil models. Our dataset, on the other hand, boasts a more diverse collection of airfoils and rich annotations. Additionally, we have proposed AFBench, which includes airfoil generation and airfoil editing. Airfoil generation is a combination and complement to inverse design and parameterization, as it can generate airfoils that satisfy geometric constraints based on PARSEC parameters. We also propose a new task, airfoil editing, to allow designers to more easily find the optimal airfoil based on their experience.\\n\\nConditional Generative methods in Airfoil Design.\\n\\nThere are some new attempts to leveraging the advantages of both implicit representation and generative methods in airfoil design. Variation Auto Encoder [28] trains a model to minimize reconstruction loss and latent loss, and it is usually optimized considering the sum of these losses. [22] proposes two advanced CV AE for the inverse airfoil design problems by combining (CV AE) and distributions.\\n\\nGenerative adversarial network [29] uses a generative neural network to generate a airfoil and uses a discriminative neural network to justify the airfoil is real or fake. CGAN [15] improves the original GAN by inputting the conditions to both the generator and discriminator. For instance, [30] generates shapes with low or high lift coefficient. By inputing the aerodynamic characteristics such as lift-to-drag ratio (Cl/Cd) or shape parameters, it is possible to guide the shape generation process toward particular airfoil.\\n\\nDiffusion model [17] is the emerging generative models [14, 31, 13] in engineering design. However, there are still few attempts in airfoil inverse design. We provide more detailed literature review in Appendix B.\\n\\nAutomatic Data Engine\\n\\nSince diverse airfoil datasets are not easily accessible publicly, we develop a data engine to collect 200,000 diverse airfoils, dubbed AF-200K. Our proposed AF-200K dataset first includes airfoils from two public datasets, such as UIUC and NACA, and then leverages our proposed data engine to generate synthetic airfoils. The data engine has three stages: (1) synthetic airfoil generation stage; (2) geometric and aerodynamic parameter annotation stage; (3) low-quality airfoil filtering stage. We illustrate the data engine pipeline in Fig. 2 and visualize generated airfoils in Fig. 3.\"}"}
{"id": "LdxNWDNvC3", "page_num": 4, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"3.1 Synthetic Airfoil Generation Stage\\n\\nBased on airfoils in UIUC and newly collected airfoils that are manually designed by COMAC (Commercial Aircraft Corporation of China), we synthesize airfoils by both physical models and unconditional generative methods.\\n\\nCST-assisted Generation.\\n\\nThe CST-assisted Generation synthesizes the airfoils firstly by parameterizing physical models, i.e., CST model and then perturbing these parameters. Given one manually designed airfoil \\\\( f_0 \\\\), we parameterize the airfoil with the CST method \\\\([32]\\\\) as\\n\\n\\\\[\\np_0 = (p_{10}, p_{20}, \\\\ldots, p_{M0}),\\n\\\\]\\n\\nwhere \\\\( M \\\\) is the number of physical parameters. Afterwards, we perturb the parameters of the airfoils with Latin hypercube sampling (LHS). Take generating \\\\( N \\\\) airfoils based on one manually-designed airfoil for example. For every variable \\\\((p_{10}, p_{20}, \\\\ldots, p_{M0})\\\\) in our parameterized airfoil, we evenly divided into \\\\( N \\\\) parts, and randomly sample a value in \\\\( N \\\\) parts, respectively for \\\\( N \\\\) generated airfoils. With Latin hypercube sampling (LHS), the generated airfoils can be uniformly sampled from the parametric space of CST for supercritical airfoils. The generated airfoils are illustrated in Fig. 3.\\n\\nUnconditional Airfoil Generation Stage.\\n\\nWhile the airfoils generated by perturbing the parameters of CST models significantly extend the training datasets, the design space is still limited to the capability of CST models (Fig. 3). To further explore the more general design space, we propose two unconditional generative-model-based methods, i.e., B\u00e9zierGAN \\\\([33]\\\\) and diffusion models \\\\([17]\\\\), to generate airfoils in the training set. Specifically, we train B\u00e9zierGAN \\\\([33]\\\\) and diffusion models \\\\([17]\\\\) using our selected airfoils from the UIUC dataset (referred to as UIUC-Picked). We generate 10,000 airfoils with B\u00e9zierGAN and generate another 10,000 airfoils with the diffusion model. We will detail the architecture of B\u00e9zierGAN and diffusion model in the Appendix D.\"}"}
{"id": "LdxNWDNvC3", "page_num": 5, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"3.2 Geometric and Aerodynamic Parameter Annotation Stage\\n\\nAerodynamic Annotation. We compute the angle of attack (AoA) and drag coefficient (CD) of each airfoil under different working conditions. Specifically, we set the Reynolds number to 100,000 and vary the Mach number from 0.2 to 0.7 (in increments of 0.1), and the lift coefficient (CL) from 0.0 to 2.0 (in increments of 0.2). The working conditions are denoted as $w = [Ma, CL]$, where $Ma$ is the Mach number and $CL$ is the lift coefficient. For each working condition, we pass the airfoil coordinates into XFoil to calculate the corresponding aerodynamic labels, including the angle of attack (AoA), drag coefficient (CD), and moment coefficient (CM).\\n\\nGeometric Annotation. The Geometric label is primarily based on PARSEC physical parameters, with Control keypoints as supplementary information. The PARSEC physical parameters (as shown in Fig. 4) include the leading edge radius ($R_{le}$), upper crest position ($X_{up}$, $Y_{up}$), upper crest curvature ($Z_{xxup}$), lower crest position ($X_{lo}$, $Y_{lo}$), lower crest curvature ($Z_{xxlo}$), trailing edge position ($Y_{te}$), trailing thickness ($\\\\Delta Y_{te}$), and two trailing edge angles ($\\\\alpha_{te}$, $\\\\beta_{te}$).\\n\\nWe utilize B-spline interpolation to convert the discrete points into a continuous representation, and then calculate the first-order and second-order derivatives, as well as the extrema. For the Control Keypoints, we select a subset of the airfoil surface points, approximately one-twentieth of the original number of points. The main purpose is to control the overall contour of the airfoil, ensuring that it does not undergo drastic changes.\\n\\n3.3 Airfoil Filtering Stage\\n\\nGiven the airfoils generated with the parametric CST model and the generative model, we need to filter out those with low aerodynamic performance to prevent the generative model from producing low-quality airfoils. Specifically, we use a numerical solver based on Reynolds-Averaged Navier-Stokes (RANS) equations to calculate the physical parameters of flow fields. These parameters are then used to assess the aerodynamic performance of the generated airfoils. We set 66 work conditions (as detailed in Section 3.2), and if an airfoil fails to converge under all 66 conditions, we classify it as a poor-quality airfoil and discard it.\"}"}
{"id": "LdxNWDNvC3", "page_num": 6, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":true,\"natural_text\":\"4 AFBench: Dataset Presentation and Benchmarking Setup\\n\\n4.1 Dataset Presentation\\n\\nBased on the aforementioned automatic data engine, the AF-200K dataset includes a diverse collection of about 200,000 airfoils, including UIUC, NACA, supercritical airfoils, and generated airfoils, as shown in Fig. 5. From the UIUC dataset, we have carefully selected 1,433 airfoils with favorable aerodynamic performance from more than 1,600 original raw data entries. For the NACA airfoils, we referenced the AIRFRANS [27] design space, resulting in a total of 5,000 NACA 4-digit and 5,000 NACA 5-digit airfoils. The Supercritical Airfoil dataset was generated by perturbing and expanding upon designs provided by COMAC engineers, using the CST method, yielding a total of 21,500 airfoils. To further augment the UIUC dataset, we generated 143,300 airfoils through CST-assisted generation. Additionally, we employed generative modeling approaches to synthesize 10,000 airfoils each using B\u00e9zierGAN [33] and diffusion models [17]. All airfoil data are stored in the form of 2D coordinates, with each airfoil represented by 257 points. In cases where the original data did not have 257 points, we used B-spline interpolation to ensure a consistent representation. The AF-200K dataset is split into training, validation, and test sets with a ratio of 8:1:1.\\n\\n4.2 Airfoil Inverse Design Tasks\\n\\nControllable Airfoil Generation.\\nThe controllable airfoil task aims at generating airfoils, which is described by 257 points, given the physical parameters and control keypoints. We expect the generated airfoil should consist with the given physical parameters and control keypoints and also with high diversity, good geometric quality and aerodynamic quality.\\n\\nEditable Airfoil Generation.\\nThe editable airfoil generation task aims at editing a given airfoil following the instruction. Specifically, the editable airfoil we can edit the airfoil using the physical parameters and control keypoints, e.g., 2 times enlarging the leading edge, or dragging one of the control point. We expect the airfoil after editing can be conformed to the instruction. We expect the airfoil after editing should be consist with the given physical parameters or control keypoints and also with high diversity, good geometric quality and aerodynamic quality.\\n\\n4.3 Baseline Methods\\n\\nAs shown in Fig. 6, we train four generative models: V AE, GAN, V AE-GAN and Diffusion Models. PK-V AE and PK-V AE 2. Based on [36], we modify the plain V AE by incorporating parsec parameters [37] and control keypoints as geometry constraints. PK-V AE 2 is a composite of V AEs: EK-V AE, PK-V AE and PK-V AE, which enable airfoil editing. Specifically, EK-V AE achieves editing by predicting physical parameters from control keypoints, while EP-V AE predicts control keypoints...\"}"}
{"id": "LdxNWDNvC3", "page_num": 7, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"from physical parameters. By training these components separately and then combining them with PK-V AE for joint training, we can achieve efficient airfoil editing.\\n\\nBuilding upon the B\u00e9zier-GAN approach [33], we introduce a conditional formulation in our model. We employ a technique similar to Adaptive Instance Normalization [38] to seamlessly integrate the condition embedding at multiple scales within the Generator. Simultaneously, we adopt a similarity-based approach to blend the condition information into the Discriminator.\\n\\nInspired by [39], we utilize a conditional Variational Autoencoder (cV AE) as the generator, and train it with the discriminator conditioned on physical parameters and keypoints.\\n\\nFor conditional diffusion models [18, 40], we designed two types based on Unet [41] and Transformer [40] architectures. In the U-Net model (PK-DIFF), the encoder extracts features by stacking multiple layers of convolutions, while the decoder reconstructs features by stacking multiple layers of convolutions. The encoder outputs are concatenated with the corresponding scale inputs of the decoder through skip connections. The time steps and conditions are mapped through MLP layers and then integrated with the input features. In the DIT model (PK-DIT), we also integrate time steps and conditions by employing MLP to map them before feature extraction. Feature extraction is performed through four layers of DIT blocks.\\n\\n4.4 Evaluation Metrics\\n\\nThe performance of the model depends on three factors: controllability, diversity of the generated/edited airfoils, and quality of the generated airfoils (including both geometric and aerodynamic quality). We evaluate the performance using the following metrics:\\n\\n\u2022 To measure the constraint of the conditions, we propose the label error:\\n\\n$$\\\\sigma_i = |\\\\hat{p}_i - p_i|, \\\\text{ for } i = 1, 2, \\\\ldots, 11$$\\n\\nwhere $$\\\\sigma_i$$ is the label error for the $$i$$-th physical parameter, $$\\\\hat{p}_i$$ is the $$i$$-th physical parameter calculated from the generated airfoil, and $$p_i$$ is the $$i$$-th physical parameter of the given condition. We denote $$\\\\{p_i\\\\}_{i=1}^{11}$$ as $$\\\\{R_{le}, X_{up}, Y_{up}, Z_{xxup}, X_{lo}, Y_{lo}, Z_{xxlo}, Y_{te}, \\\\Delta Y_{te}, \\\\alpha_{te}, \\\\beta_{te}\\\\}$$, respectively.\\n\\n\u2022 To quantify the diversity of the generated airfoils, we propose the following formula:\\n\\n$$D = \\\\frac{1}{n} \\\\sum_{i=1}^{n} \\\\log \\\\det (L_{S_i})$$\\n\\nwhere $$n$$ is the number of sample times, and the set of generated airfoils is denoted as $$F = (f_1, f_2, \\\\ldots, f_M)$$. The $$i$$-th subset of the data, $$S_i$$, is a subset of $$F$$ with a smaller size $$N$$ (where $$N < M$$). The matrix $$L_{S_i}$$ is the similarity matrix, calculated based on the Euclidean distances between the airfoils in the subset $$S_i$$, as proposed in [42]. The $$\\\\det (L_{S_i})$$ represents the determinant of the similarity matrix $$L_{S_i}$$, and the $$\\\\log \\\\det (L_{S_i})$$ is the natural logarithm of the determinant, which is used to prevent numerical underflow.\\n\\n\u2022 To measure the geometric quality of the airfoils, we propose the smoothness metric:\\n\\n$$M = \\\\sum_{i=1}^{N} \\\\text{Distance}_{P_n} \\\\left| P_n - P_{n-1} \\\\right|$$\\n\\nwhere $$P_n$$ is the $$n$$-th point, $$\\\\left| P_n - P_{n-1} \\\\right|$$ is the line connecting the adjacent points, and Distance calculates the perpendicular distance from point $$P_n$$ to the line $$\\\\left| P_n - P_{n-1} \\\\right|$$.\\n\\nN represents the number of generated airfoils.\\n\\n\u2022 To measure the aerodynamic quality of the model, we propose the success rate. We generate airfoils and evaluate whether they converge under $$M$$ different work conditions. The success rate $$R$$ is calculated as:\\n\\n$$R = \\\\frac{1}{N} \\\\sum_{i=1}^{N} I(\\\\sum_{j=1}^{M} C_j > 60\\\\%), \\\\text{ for } j = 1, \\\\ldots, M$$\\n\\nwhere $$C_j$$ is a binary variable that takes the value of 0 or 1, indicating whether the $$j$$-th work condition results in non-convergence (0) or convergence (1), and $$N$$ represents the number of generated airfoils. Here, $$I(x)$$ is the indicator function, where $$I(\\\\text{True}) = 1$$ and $$I(\\\\text{False}) = 0$$. \"}"}
{"id": "LdxNWDNvC3", "page_num": 8, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":true,\"is_diagram\":false,\"natural_text\":\"| Method         | Dataset | Label error \u2193 \u00d7 0.01 D \u2191 M \u2193 | Diversity Score \u03c31 \u03c32 \u03c33 \u03c34 \u03c35 \u03c36 \u03c37 \u03c38 \u03c39 \u03c310 | Smoothness \u03c311 \u00af\u03c3 | | PK-V AE        | EK      | 9.3 8.33 5.27 2082 12.9 11.1 4620 2.51 2.04 5.1 11.8 615.5 | -143.4 7.21  | | PK-V AE        | EP      | 8.9 6.38 4.94 1780 10.9 9.4 4570 2.05 1.98 4.9 10.3 582.6 | -150.8 7.19  | | PK-V AE 2     | EK      | 7.1 5.71 4.05 1430 8.0 8.1 3780 1.91 1.52 3.6 8.7 478.1 | -133.4 6.20 6.20 6.20 6.20 6.20 6.20 6.20 | | PK-V AE 2     | EP      | 6.5 6.5 6.5 6.5 6.5 6.5 6.5 6.5 6.5 6.5 6.5 6.5 6.5 6.5 | -135.6 6.36 | | CV AE [16]     | AF-200K | 7.29 5.25 3.52 1590 9.9 9.55 2900 1.91 1.53 4.6 10.4 413.1  | -155.4 7.09  | | AF-200K        |          | 10.7 8.50 5.44 2320 14.3 13.7 5960 2.53 2.23 5.3 12.9 759.6  | -120.5 7.31  | | PK-V AE-GAN   | AF-200K | 6.30 4.79 3.13 862 6.6 6.41 1710 1.35 0.93 3.3 7.8 237.5  | -150.1 5.93  | | PK-GAN        | AF-200K | 8.18 6.30 4.70 2103 12.0 11.7 3247 2.25 1.96 5.0 12.7 492.3  | -112.3 3.98  | | PK-V AE-GAN   | AF-200K | 5.68 3.17 3.10 565 4.6 4.35 1200 0.91 0.51 2.8 6.3 163.3  | -129.6 2.89  | | PK-DIFF       | AF-200K | 4.61 3.46 2.15 277 2.2 1.93 1030 0.70 0.11 2.4 3.1 120.6  | -101.3 1.52  | | PK-DIT        | UIUC    | 6.38 5.14 3.36 1183 8.7 8.49 2570 1.69 1.19 3.6 9.8 345.6  | -141.7 6.03  | | PK-DIT        | Super   | 5.20 3.50 2.40 301 2.9 3.32 1050 0.83 0.26 2.7 3.3 125.0  | -123.4 1.97  | | PK-DIT        | AF-200K | 1.12 1.12 1.12 3.23 3.23 3.23 1.54 1.54 1.54 1.15 1.15 1.15  | -93.2 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | | PK-DIT        | AF-200K | 1.12 1.12 1.12 3.23 3.23 3.23 1.54 1.54 1.54 1.15 1.15 1.15  | -93.2 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 1.04 1.04 1.04 | 1.04 1.04 1.04 1.04 1.04 "}
{"id": "LdxNWDNvC3", "page_num": 9, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table 3: Performance of PK-DIT using data by different generative methods\\n\\n| Method         | Label Error (\u00d70.01) \u2193 | D \u2191 | M \u2193 | \u00d70.01 \u03c31 | \u03c32 | \u03c33 | \u03c34 | \u03c35 | \u03c36 | \u03c37 | \u03c38 | \u03c39 | \u03c310 | \u03c311 | \u00af\u03c3 |\\n|----------------|------------------------|-----|-----|----------|----|----|----|----|----|----|----|----|----|----|-----|\\n| NACA-GEN       | 6.26 5.10 3.29 961 7.69 | 7.46 | 2130 | 1.08     | 1.038 | 3.4 | 8.0 | 284.9 | -136.4 | 5.09 |\\n| CST-GEN        | 5.82 4.09 2.80 572 4.61 | 4.36 | 1390 | 0.94     | 0.542 | 3.1 | 5.9 | 181.3 | -101.5 | -101.5 | 2.31 |\\n| B\u00e9zierGAN-GEN  | 5.96 4.96 3.07 839 5.64 | 6.38 | 1900 | 0.98     | 0.817 | 3.1 | 7.4 | 252.5 | -125.3 | 1.211 | 1.211 |\\n| Diffusion-GEN  | 5.44 5.44 3.83 3.83 3.83 | 2.58 | 3533 | 3.09     | 3.333 | 3.333 | 1180 | 1180 | -111.9 | 2.05 |\\n\\nThe experimental results illustrate that finetuning on airfoils with high aerodynamic performance can improve the model's success rate from 33.6% to 42.99% (Tab. 4).\\n\\nTable 4: Success rate under different training strategies using PK-DIT.\\n\\n| Strategy      | Data          | R      | Success Rate |\\n|---------------|---------------|--------|--------------|\\n| From Scratch  | 160k          | 33.60% |\\n| Finetune      | 20k           | 42.99% |\\n\\nDifferent Generative Data.\\n\\nTo evaluate the impact of different generative data on the final model performance, we select 10,000 airfoils each from NACA-GEN, CST-GEN, B\u00e9zierGAN-GEN, and Diffusion-GEN, and train the model on these datasets. The results are shown in Tab. 3. We find that, CST-GEN provided the model with the most diversity. B\u00e9zierGAN-GEN granted the model the highest score of smoothness. Diffusion-GEN impart the model with the greatest control capability and the lowest label error.\\n\\n6 Conclusion\\n\\nWe have proposed a large-scale and diverse airfoil dataset, AF-200K, which has been demonstrated to significantly improve the capabilities of data-driven models compared to previous datasets. Additionally, we have introduced a comprehensive benchmark that evaluates the performance of mainstream generative models on the task of airfoil inverse design. This benchmark provides researchers with a valuable tool to explore more powerful inverse design methods.\\n\\nAs the availability of data continues to expand and AI techniques advance, there is great potential to explore an even broader design space. AI-driven exploration can transcend the limitations of human experience and create innovative structures that are beyond human imagination. In complex design scenarios, AI may achieve superior outcomes compared to human experts. We believe that our methods can also offer valuable insights for 3D airfoil design.\\n\\nLooking ahead, we aim to establish a more comprehensive benchmark for both 2D and 3D airfoil inverse design. The limitations of our current approach are discussed in Appendix F.\\n\\n7 Acknowledgments\\n\\nThis work is partially supported by Shanghai Artificial Intelligence Laboratory. This work is partially supported by the Natural Science Foundation of China (No. U23A2069).\\n\\nReferences\\n\\n[1] Prashant Sharma, Bhupendra Gupta, Mukesh Pandey, Arun Kumar Sharma, and Raji Nareliya Mishra. Recent advancements in optimization methods for wind turbine airfoil design: A review. Materials Today: Proceedings, 47:6556\u20136563, 2021.\\n[2] Mark Drela. Design and optimization method for multi-element airfoils. In Aerospace Design Conference, page 969, 1993.\\n[3] BI Soemarwoto and Th E Labruj\u00e8re. Airfoil design and optimization methods: recent progress at nlr. International journal for numerical methods in fluids, 30(2):217\u2013228, 1999.\\n[4] Kazuo Yonekura and Katsuyuki Suzuki. Data-driven design exploration method using conditional variational autoencoder for airfoil design. Structural and Multidisciplinary Optimization, 64(2):613\u2013624, 2021.\\n[5] Runze Li, Yufei Zhang, and Haixin Chen. Mesh-agnostic decoders for supercritical airfoil prediction and inverse design. AIAA Journal, pages 1\u201317, 2024.\\n[6] Ruiwu Lei, Junqiang Bai, Hui Wang, Boxiao Zhou, and Meihong Zhang. Deep learning based multistage method for inverse design of supercritical airfoil. Aerospace Science and Technology, 119:107101, 2021.\"}"}
{"id": "LdxNWDNvC3", "page_num": 10, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"[1] Vinothkumar Sekar, Mengqi Zhang, Chang Shu, and Boo Cheong Khoo. Inverse design of airfoil using a deep convolutional neural network. *AIAA Journal*, 57(3):993\u20131003, 2019.\\n\\n[2] Ben Gardner and Michael Selig. Airfoil design using a genetic algorithm and an inverse method. In *41st Aerospace Sciences Meeting and Exhibit*, page 43, 2003.\\n\\n[3] Yayun Shi, Charles A Mader, Sicheng He, Gustavo LO Halila, and Joaquim RRA Martins. Natural laminar-flow airfoil optimization design using a discrete adjoint approach. *AIAA Journal*, 58(11):4702\u20134722, 2020.\\n\\n[4] Pedro Gomes and Rafael Palacios. Aerodynamic-driven topology optimization of compliant airfoils. *Structural and Multidisciplinary Optimization*, 62:2117\u20132130, 2020.\\n\\n[5] Wei Chen and Faez Ahmed. Padgan: Learning to generate high-quality novel designs. *Journal of Mechanical Design*, 143(3).\\n\\n[6] Amin Heyrani Nobari, Wei Chen, and Faez Ahmed. Pcdgan: A continuous conditional diverse generative adversarial network for inverse design. In *Proceedings of the 27th ACM SIGKDD conference on knowledge discovery & data mining*, pages 606\u2013616, 2021.\\n\\n[7] Tailin Wu, Takashi Maruyama, Long Wei, Tao Zhang, Yilun Du, Gianluca Iaccarino, and Jure Leskovec. Compositional generative inverse design. In *The Twelfth International Conference on Learning Representations*, 2024.\\n\\n[8] Yanxuan Zhao, Peng Zhang, Guopeng Sun, Zhigong Yang, Jianqiang Chen, and Yueqing Wang. Ccdpm: A continuous conditional diffusion probabilistic model for inverse design. In *Proceedings of the AAAI Conference on Artificial Intelligence*, volume 38, pages 17033\u201317041, 2024.\\n\\n[9] Mehdi Mirza and Simon Osindero. Conditional generative adversarial nets. *arXiv preprint arXiv:1411.1784*, 2014.\\n\\n[10] Diederik P Kingma and Max Welling. Auto-encoding variational bayes. *arXiv preprint arXiv:1312.6114*, 2013.\\n\\n[11] Jonathan Ho, Ajay Jain, and Pieter Abbeel. Denoising diffusion probabilistic models. *Advances in neural information processing systems*, 33:6840\u20136851, 2020.\\n\\n[12] Prafulla Dhariwal and Alexander Nichol. Diffusion models beat gans on image synthesis. *Advances in neural information processing systems*, 34:8780\u20138794, 2021.\\n\\n[13] Michael Selig. UIUC Airfoil Database. [https://m-selig.ae.illinois.edu/ads/coord_database.html](https://m-selig.ae.illinois.edu/ads/coord_database.html), 2022. Accessed: 2022-08-22.\\n\\n[14] Russell M. Cummings, William H. Mason, Scott A. Morton, and David R. McDaniel. *Applied Computational Aerodynamics: A Modern Engineering Approach*, pages 731\u2013765. Cambridge Aerospace Series. Cambridge University Press, 2015.\\n\\n[15] Sunwoong Yang, Sanga Lee, and Kwanjung Yee. Inverse design optimization framework via a two-step deep learning approach: application to a wind turbine airfoil. *Engineering with Computers*, 39(3):2239\u20132255, 2023.\\n\\n[16] Kazuo Yonekura, Kazunari Wada, and Katsuyuki Suzuki. Generating various airfoils with required lift coefficients by combining naca and joukowski airfoils using conditional variational autoencoders. *Engineering Applications of Artificial Intelligence*, 108:104560, 2022.\\n\\n[17] Yunjia Yang, Runze Li, Yufei Zhang, and Haixin Chen. Flowfield prediction of airfoil off-design conditions based on a modified variational autoencoder. *AIAA Journal*, 60(10):5805\u20135820, 2022.\\n\\n[18] Yuyang Wang, Kenji Shimada, and Amir Barati Farimani. Airfoil gan: encoding and synthesizing airfoils for aerodynamic shape optimization. *Journal of Computational Design and Engineering*, 10(4):1350\u20131362, 2023.\\n\\n[19] Kazunari Wada, Katsuyuki Suzuki, and Kazuo Yonekura. Physics-guided training of gan to improve accuracy in airfoil design synthesis. *Computer Methods in Applied Mechanics and Engineering*, 421:116746, 2024.\"}"}
{"id": "LdxNWDNvC3", "page_num": 11, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Florent Bonnet, Jocelyn Ahmed Mazari, Paola Cinnella, and Patrick Gallinari. AirfRANS: High fidelity computational fluid dynamics dataset for approximating reynolds-averaged navier\u2013stokes solutions. In Thirty-sixth Conference on Neural Information Processing Systems Datasets and Benchmarks Track, 2022.\\n\\nKihyuk Sohn, Honglak Lee, and Xinchen Yan. Learning structured output representation using deep conditional generative models. Advances in neural information processing systems, 28, 2015.\\n\\nIan Goodfellow, Jean Pouget-Abadie, Mehdi Mirza, Bing Xu, David Warde-Farley, Sherjil Ozair, Aaron Courville, and Yoshua Bengio. Generative adversarial networks. Communications of the ACM, 63(11):139\u2013144, 2020.\\n\\nGabriel Achour, Woong Je Sung, Olivia J Pinon-Fischer, and Dimitri N Mavris. Development of a conditional generative adversarial network for airfoil shape optimization. In AIAA Scitech 2020 Forum, Orlando, Florida, January 2020.\\n\\nFran\u00e7ois Maz\u00e9 and Faez Ahmed. Diffusion models beat gans on topology optimization. In Proceedings of the AAAI conference on artificial intelligence, volume 37, pages 9108\u20139116, 2023.\\n\\nBrenda M. Kulfan. A universal parametric geometry representation method - \\\"cst\\\". 2007.\\n\\nWei Chen, Kevin Chiu, and Mark D Fuge. Airfoil design parameterization and optimization using b\u00e9zier generative adversarial networks. AIAA Journal, 58(11):4723\u20134735, 2020.\\n\\nMark Drela. Xfoil 6.99. http://web.mit.edu/drela/Public/web/xfoil/, 2013.\\n\\nXi-An Han, YiChen Ma, and XiLi Huang. A novel generalization of b\u00e9zier curve and surface. Journal of Computational and Applied Mathematics, 217(1):180\u2013193, 2008.\\n\\nHairun Xie, Jing Wang, and Miao Zhang. Parametric generative schemes with geometric constraints for encoding and synthesizing airfoils. Engineering Applications of Artificial Intelligence, 128:107505, 2024.\\n\\nHelmut Sobieczky. Parametric Airfoils and Wings. In Kozo Fujii and George S. Dulikravich, editors, Recent Development of Aerodynamic Design Methodologies: Inverse Design and Optimization, pages 71\u201387. Vieweg+Teubner Verlag, Wiesbaden, 1999.\\n\\nXun Huang and Serge Belongie. Arbitrary style transfer in real-time with adaptive instance normalization. In Proceedings of the IEEE international conference on computer vision, pages 1501\u20131510, 2017.\\n\\nJing Wang, Runze Li, Cheng He, Haixin Chen, Ran Cheng, Chen Zhai, and Miao Zhang. An inverse design method for supercritical airfoil based on conditional generative models. Chinese Journal of Aeronautics, 2021.\\n\\nWilliam Peebles and Saining Xie. Scalable diffusion models with transformers. In Proceedings of the IEEE/CVF International Conference on Computer Vision, pages 4195\u20134205, 2023.\\n\\nOlaf Ronneberger, Philipp Fischer, and Thomas Brox. U-net: Convolutional networks for biomedical image segmentation. In Medical image computing and computer-assisted intervention\u2013MICCAI 2015: 18th international conference, Munich, Germany, October 5-9, 2015, proceedings, part III 18, pages 234\u2013241. Springer, 2015.\\n\\nAlexei Borodin. Determinantal point processes. arXiv preprint arXiv:0911.1153, 2009.\\n\\nNilesh P Salunke, RA Juned Ahamad, and SA Channiwala. Airfoil parameterization techniques: A review. American Journal of Mechanical Engineering, 2(4):99\u2013102, 2014.\\n\\nRuo-Lin Liu, Yue Hua, Zhi Zhou, Yubai Li, Wei-Tao Wu, and Nadine Aubry. Prediction and optimization of airfoil aerodynamic performance using deep neural network coupled bayesian method. Physics of Fluids, 2022.\\n\\nVinothkumar Sekar, Qinghua Jiang, Chang Shu, and Boo Cheong Khoo. Fast flow field prediction over airfoils using deep learning approach. Physics of Fluids, 31(5), 2019.\\n\\nMohsen Hamedi and Brian Vermeire. Near-field aeroacoustic shape optimization at low reynolds numbers. AIAA Journal, pages 1\u201315, 2024.\\n\\nWenbo Cao, Jiahao Song, and Weiwei Zhang. A solver for subsonic flow around airfoils based on physics-informed neural networks and mesh transformation. Physics of Fluids, 36(2), 2024.\\n\\nHerv\u00e9 Abdi. Singular value decomposition (svd) and generalized singular value decomposition. Encyclopedia of measurement and statistics, 907(912):44, 2007.\"}"}
{"id": "LdxNWDNvC3", "page_num": 12, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Andreas Daffertshofer, Claudine JC Lamoth, Onno G Meijer, and Peter J Beek. PCA in studying coordination and variability: a tutorial. Clinical biomechanics, 19(4):415\u2013428, 2004.\\n\\nTim R Davidson, Luca Falorsi, Nicola De Cao, Thomas Kipf, and Jakub M Tomczak. Hyperspherical variational auto-encoders. arXiv preprint arXiv:1804.00891, 2018.\\n\\nMd Abul Hasnat, Julien Bohn\u00e9, Jonathan Milgram, St\u00e9phane Gentric, and Liming Chen. Von Mises-Fisher mixture model-based deep learning: Application to face verification. arXiv preprint arXiv:1706.04264, 2017.\"}"}
{"id": "LdxNWDNvC3", "page_num": 13, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Appendix\\n\\nA AF-200K Dataset\\n\\nWe publish the AF-200K dataset, benchmark, demo and codebase at our website Page-AFBench. It is our priority to protect the privacy of third parties. We bear all responsibility in case of violation of rights, etc., and confirmation of the data license.\\n\\nTerms of use, privacy and License.\\n\\nThe AF-200K dataset is published under the CC BY-NC-SA 4.0, which means everyone can use this dataset for non-commercial research purpose. The original UIUC dataset is released under the GPL license. The original NACA dataset is released under the MIT license.\\n\\nData maintenance.\\n\\nData is stored in Google Drive for global users, and the AF-200K is stored in here. We will maintain the data for a long time and check the data accessibility on a regular basis.\\n\\nBenchmark and code.\\n\\nAFBench provides benchmark results and codebase of AF-200K.\\n\\nData statistics.\\n\\nFor AF-200K, there are 160K airfoils for training, 20K airfoils for valuation, 20K airfoils for testing, and 200K airfoils in total.\\n\\nLimitations.\\n\\nThe current aerodynamic labels are computed using the relatively coarse CFD solver XFoil. In future work, higher precision CFD simulation software can be utilized to improve the accuracy of the aerodynamic labels.\\n\\nB Background and Related Work\\n\\nIn this section, we primarily discuss three concepts: airfoil design, airfoil representation and conditional generative methods in airfoil design.\\n\\nB.1 Airfoil Design\\n\\nThe essence of airfoil design is to find an airfoil that satisfies one's requirements within a vast design space. However, the traditional trial-and-error process is inefficient and costly. To address this issue, a significant amount of research has been conducted, which can be broadly categorized into airfoil parameterization [43], airfoil aerodynamic performance prediction [44, 45], airfoil inverse design [7], and airfoil shape optimization [46]. Airfoil parameterization compresses the airfoil into a few parameters, effectively reducing the design space to a parameter space, which can be searched more quickly. However, parameterization may introduce discontinuities in the design space, making it challenging to find the desired airfoil. Airfoil aerodynamic performance prediction can be divided into two main approaches: using PINNs [47] to solve for the aerodynamic coefficients on the airfoil surface, and employing data-driven surrogate models to quickly predict the performance of the current airfoil, approximating the traditional CFD approach. Airfoil inverse design takes the desired requirements as input and outputs an airfoil that satisfies those requirements. Airfoil shape optimization aims to find the design variables that maximize the lift-to-drag ratio (Cl/Cd).\\n\\nThe ultimate goal of these four directions is to use algorithms to automatically find airfoils that meet the given requirements. Airfoil parameterization can reduce the search variables, airfoil inverse design can provide multiple candidate airfoils as initial values, airfoil aerodynamic performance prediction can use surrogate models for rapid feedback, and airfoil shape optimization can employ optimization methods to find the optimal airfoil. Previous efforts [26, 27] have explored datasets for investigating airfoil aerodynamic characteristics, but have largely relied on the UIUC and NACA airfoil shapes, lacking the breadth of data necessary to support the exploration of large-scale airfoil models. Our dataset, on the other hand, boasts a more diverse collection of airfoils and rich annotations, enabling better support for the four research directions mentioned earlier. Additionally, we have proposed AFBench, which includes airfoil generation and airfoil editing. Airfoil generation is a combination and complement to inverse design and parameterization, as it can generate airfoils that satisfy geometric constraints based on PARSEC parameters. Airfoil editing is a supplement to shape optimization, as it allows designers to more controllably find the optimal airfoil based on their experience.\"}"}
{"id": "LdxNWDNvC3", "page_num": 14, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"B.2 Airfoil Representation\\n\\nAirfoil representation is an evolution of airfoil parameterization. It can be broadly categorized into explicit representation and implicit representation. Explicit representation includes the most common Coordinate Point Method, as well as polynomial-based Parametric Representation Methods, such as PARSEC [37], B\u00e9zier [35], CST [32]. The former is the easiest to manipulate, but the large number of variables makes it difficult to optimize. The polynomial-based representations can reduce the design variables while ensuring the represented airfoils are smooth. Some, like PARSEC, even have intuitive geometric interpretations, such as leading edge radius and upper/lower surface peak values. Other parameterization methods, however, have design variables that are less intuitive. Additionally, their design spaces tend to be relatively small.\\n\\nImplicit representation primarily uses data-driven methods to compress the airfoil into a latent space. Traditional methods include SVD [48] and PCA [49], but these linear combination approaches also result in small design spaces. More recently, neural representations have become common, where a well-trained neural network can store the airfoil information, allowing the design space to be sampled from a low-dimensional space. A representative work in this area is B\u00e9zierGAN [33]. Our work adopts a hybrid approach, combining implicit and explicit representations. By adjusting the intuitive PARSEC parameters and control points, we can achieve airfoil generation. The neural network representation allows for a much larger design space compared to pure PARSEC parameterization.\\n\\nB.3 Conditional Generative methods in Airfoil Design\\n\\nLeveraging the advantages of both implicit representation and generative methods, there recently appears attempts to combine implicit representation and generative methods to achieve better design performance.\\n\\nVAE\\n\\nVariation Auto Encoder [28] trains a model to minimize reconstruction loss and latent loss, and it is usually optimized considering the sum of these losses. [22] proposes two advanced CV AE for the inverse airfoil design problems by combining the conditional variational autoencoders (CV AE) and distributions. There are two versions: N-CV AE, which combines the CV AE with normal distribution [50], and S-CV AE, which combines the V AE and von Mises-Fischer distribution [51]. Both the CV AE models convert the original airfoils into a latent space. Differently, the S-CV AE enables the separation of data in the latent space, while the N-CV AE embeds the data in a narrow space. These different features are used for various tasks.\\n\\nGAN\\n\\nGenerative adversarial network [29] uses a generative neural network to generate a airfoil and uses a discriminative neural network to justify the airfoil is real or fake. CGAN [15] improves the original GAN by inputing the conditions to both the generator and discriminator. Then, the generator is learned to generate the shape satisfying the condition constraints. Inspired by the big success in computer vision, several works are proposed to explore the applications of GANs to solve the airfoil design. [30] generates shapes with low or high lift coefficient. By inputing the aerodynamic characteristics such as lift-to-drag ratio (Cl/Cd) or share parameters, it is possible to guide the shape generation process toward particular airfoil.\\n\\nDiffusion\\n\\nDiffusion model [17] is the recent widely adapted generative model in the image and 3D computer vision. In the airfoil generation field, there are also several initial attempts to use diffusion model to generate airfoils. [14] uses conditional diffusion models to perform performance-aware and manufacturability-aware topology optimization. Specifically, a surrogate model-based guidance strategy is proposed that actively favors structures with low compliance and good manufacturability. [13] introduces compositional inverse design with diffusion models, which enables the proposed method to generalize to out-of-distribution and more complex design inputs than seen in training. [31] leverages the capable of a latent denoising diffusion model to generate airfoil geometries conditioned on flow parameters and an area constraint. They found that the diffusion model achieves better generation performance than GAN-based methods.\\n\\nC Detailed Description of Airfoil Generation by CST Method\\n\\nThe CST-assisted Generation Stage augments the airfoils with physical models, i.e., CST model. Given one airfoil $f_0$, we generate the airfoils with assistance of CST by the following steps: (1) We parameterize the airfoil $f_0$ with the CST method [32] as $p_0$; (2) Employ Latin Hypercube Sampling\"}"}
{"id": "LdxNWDNvC3", "page_num": 15, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Perturb the CST parameters using Latin Hypercube Sampling (LHS) and generate new airfoils. Given one manually designed airfoil $f_0$, we parameterize the airfoil with the CST method as $p_0 = (p_{10}, p_{20}, \\\\ldots, p_{M0})$, where $M$ is the number of physical parameters. The CST method is a widely-accepted method in airfoil design and proposes to fit the supercritical airfoil with the Bernstein polynomial, which can be mathematically expressed as:\\n\\n$$\\\\zeta(\\\\psi) = C(\\\\psi)S(\\\\psi) + \\\\psi \\\\zeta_T,$$\\n\\nwhere \\\\(\\\\zeta = Y/c\\\\), \\\\(\\\\psi = X/c\\\\), and \\\\(c\\\\) represents the chord length. \\\\(\\\\zeta_T = \\\\Delta \\\\zeta_{TE}/c\\\\) represents the trailing edge thickness of the airfoil. Here, \\\\(X\\\\) and \\\\(Y\\\\) are x-coordinates and y-coordinates of the airfoil. \\\\(C(\\\\psi)\\\\) and \\\\(S(\\\\psi)\\\\) correspond to the class function and shape function, respectively, which can be formally described as follows:\\n\\n$$C(\\\\psi) = (\\\\psi)_{N1}(1 - \\\\psi)_{N2},$$\\n\\n$$S(\\\\psi) = \\\\zeta(\\\\psi) - \\\\psi \\\\zeta_T p(1 - \\\\psi),$$\\n\\nwhere \\\\(N1\\\\) and \\\\(N2\\\\) define the class of airfoils. In this paper, we choose \\\\(N1 = 0\\\\) and \\\\(N2 = 1.0\\\\) to represent the circular leading edge and sharp trailing edge of supercritical airfoils.\\n\\nGiven the parameterized supercritical airfoil, we perturb the parameters of the airfoils with Latin hypercube sampling (LHS). Take generating \\\\(N\\\\) airfoils based on one manually-designed airfoil for example. For every variable in our parameterized airfoil, we evenly divided into \\\\(N\\\\) parts, and randomly sample a value in \\\\(N\\\\) parts, respectively for \\\\(N\\\\) generated airfoils. With Latin hypercube sampling (LHS), the generated airfoils can be uniformly sampled from the parametric space of CST for supercritical airfoils. The generated airfoils are illustrated in Fig. 3.\\n\\n### Detailed Description of Airfoil Generation by Generative Models\\n\\n**B\u00e9zierGAN-GEN**\\n\\nB\u00e9zierGAN [33] uses a B\u00e9zier layer to transform the network's predicted control points, weights, and parameter variables into smooth airfoil coordinates. The B\u00e9zier layer formula is as follows:\\n\\n$$X_j = \\\\sum_{i=0}^{n} P_{ni} u_j^{n-i} w_i P_{ni} = 0 \\\\ldots m,$$\\n\\nwhere \\\\(n\\\\) is the B\u00e9zier degree, \\\\(m+1\\\\) is the number of airfoil coordinate points, and \\\\(P_i, w_i, u_j\\\\) are the network-predicted control points, weights, and parameter variables, respectively, which are all differentiable.\\n\\nBy applying the aforementioned models, we uniformly sampled 10,000 latent codes from the range [0, 1], combined them with Gaussian noise to form the input \\\\(z\\\\), and used the generator to produce 10,000 smooth airfoil shapes represented as 257 x 2 coordinate points.\\n\\n**Diff-GEN**\\n\\nDiffusion models [17] are a recent advancement in generative modeling. Compared to the traditional GAN models, diffusion models introduce the following main improvements: For Noise Schedule: Instead of learning to transform noise to data directly, diffusion models gradually transform noise into data through a series of small, reversible steps, which makes the training more stable and produces higher-quality samples. For the model architecture, the generator is replaced with a U-Net architecture that predicts the noise added to the data at each step, while a diffusion process progressively refines this prediction. The forward diffusion process formula is as follows:\\n\\n$$q(x_t | x_{t-1}) = N(x_t; \\\\sqrt{\\\\alpha_t} x_{t-1}, (1 - \\\\alpha_t)I), \\\\quad t = 1, 2, \\\\ldots, T$$\\n\\nwhere \\\\(T\\\\) is the total number of diffusion steps, \\\\(\\\\alpha_t\\\\) is a variance schedule controlling the amount of noise added at each step, and \\\\(N\\\\) denotes a normal distribution. The model learns to reverse this process, thereby generating samples from pure noise through a series of learned denoising steps.\"}"}
{"id": "LdxNWDNvC3", "page_num": 16, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Specifically for airfoil generation, we need to first encode the 257 x 2 airfoil coordinates into a 32x1 latent variable using a pretrained VAE. The diffusion model then learns to generate these latent variables, which are subsequently decoded by the VAE to produce the final airfoil shape. This approach leverages the strengths of both VAEs and diffusion models, where the VAE efficiently compresses the high-dimensional airfoil data into a more manageable latent space, and the diffusion model excels at generating high-quality samples within this latent space. By combining these methods, we achieve a robust and efficient framework for generating realistic and high-quality airfoil designs.\\n\\n**E Diffusion Results**\\n\\n**Reverse Diffusion Process.** Fig. 7 illustrates the denoising sampling results of the Diffusion model at different time steps. It can be observed that when trained directly on raw data, the generated airfoils are not smooth. In contrast, airfoils trained in the latent space are smooth from the beginning due to the pre-trained VAE providing a performance baseline. As the reverse steps increase, the generated airfoils gradually align more closely with the given physical conditions.\\n\\n**Aerodynamic Performance Visualization.** Given the same conditions, airfoils were generated using both PK-DIFF and PK-DIT. We used a refined CFD solver OpenFOAM to calculate the flow and aerodynamic performance of these two generated airfoils. Fig. 8 shows the distribution of the pressure coefficient around the airfoils generated by PK-DIFF and PK-DIT. Under the given working conditions \\\\([\\\\text{AoA} = 3^\\\\circ, \\\\text{Re} = 1e6]\\\\), the lift coefficient \\\\((C_l)\\\\) and drag coefficient \\\\((C_d)\\\\) for PK-DIFF are \\\\((0.36, 0.01029)\\\\), while for PK-DIT, they are \\\\((0.7335, 0.0125)\\\\). The higher \\\\(C_l/C_d\\\\) ratio for PK-DIT indicates that the airfoil generated by PK-DIT has superior aerodynamic performance.\\n\\n**Generate Diverse Airfoils by PK-DIT**\\n\\nFig. 9 illustrates the diversity of airfoils generated by the Diffusion model. Starting from random noise, Diffusion progressively denoises the airfoil. Each\"}"}
{"id": "LdxNWDNvC3", "page_num": 17, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Figure 9: use PK-DIT generated diverse novel airfoil.\\n\\nThe denoising step can introduce different details, thus ensuring that the generated airfoils are diverse while still meeting the required conditions.\\n\\nF Limitation\\n\\nThe current physical parameters and control keypoints used in our approach are coupled within each condition. For example, simply changing the leading edge radius may not result in a feasible airfoil, as the design space may not contain such a configuration. When dealing with multiple conditions, finding and balancing the conflicts between the conditions to generate an optimal airfoil is a challenge that remains unsolved and deserves further exploration. In addition to finding better airfoil design variables, modeling the relationships between these variables is also crucial. Moreover, our method currently does not integrate airfoil shape optimization techniques into the generation process. Embedding optimization methods to produce generated airfoils with superior aerodynamic performance, surpassing manually designed airfoils, would further demonstrate the effectiveness of AI-based approaches, and is another area worth investigating.\\n\\nG Datasheet\\n\\n1. For what purpose was the dataset created?\\n   Was there a specific task in mind? Was there a specific gap that needed to be filled? Please provide a description.\\n\\n   AFBench was created as a benchmark for airfoil inverse design task. The goal of this task is to find the design input variables that optimize a given objective function. Although some related datasets and works have been proposed, they do not take into account the real needs of applications. Moreover, there is still a lack of large-scale foundational data and evaluation metrics.\"}"}
{"id": "LdxNWDNvC3", "page_num": 18, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"This dataset is presented by HIT-AIIA Lab & Shanghai AI Lab & Shanghai Aircraft Design and Research Institute.\\n\\n3. Who funded the creation of the dataset? If there is an associated grant, please provide the name of the grantor and the grant name and number.\\n\\n   This work was sponsored by Shanghai AI Lab.\\n\\n4. Any other comments?\\n\\n   No.\\n\\n5. What do the instances that comprise the dataset represent (e.g., documents, photos, people, countries)? Are there multiple types of instances (e.g., movies, users, and ratings; people and interactions between them; nodes and edges)? Please provide a description.\\n\\n   AFBench comprises existing UIUC and NACA datasets, along with 2,150 manually designed supercritical airfoils and airfoils generated by models, totaling 200k samples. Each sample consists of a well-designed airfoil, accompanied by 11 geometric parameters and aerodynamic properties under 66 work conditions. We made our benchmark openly available on the AFBench github page(https://hitcslj.github.io/afbench/).\\n\\n6. How many instances are there in total (of each type, if appropriate)?\\n\\n   For AF-200K, there are 160K airfoils for training, 20K airfoils for valuation, 20K airfoils for testing, 200K airfoils in total.\\n\\n7. Does the dataset contain all possible instances or is it a sample (not necessarily random) of instances from a larger set? If the dataset is a sample, then what is the larger set? Is the sample representative of the larger set (e.g., geographic coverage)? If so, please describe how this representativeness was validated/verified. If it is not representative of the larger set, please describe why not (e.g., to cover a more diverse range of instances, because instances were withheld or unavailable).\\n\\n   Both UIUC and NACA are open-source datasets. We use the proposed CST method and unconditional generative models to derive AF-200K dataset. For AF-200K, we use all samples of UIUC and NACA Open dataset.\\n\\n8. What data does each instance consist of? \u201cRaw\u201d data (e.g., unprocessed text or images) or features? In either case, please provide a description.\\n\\n   Each instance consists of a well-designed airfoil, accompanied by 11 geometric parameters and aerodynamic properties under 66 work conditions.\\n\\n9. Is there a label or target associated with each instance? If so, please provide a description.\\n\\n   Each instance includes various aerodynamic performance metrics such as angle of attack (AoA), drag coefficient (CD), and moment coefficient (CM), under different work conditions. Additionally, PARSEC physical parameters are provided as geometric features for each instance.\\n\\n10. Is any information missing from individual instances? If so, please provide a description, explaining why this information is missing (e.g., because it was unavailable). This does not include intentionally removed information, but might include, e.g., redacted text.\\n\\n    No.\\n\\n11. Are relationships between individual instances made explicit (e.g., users\u2019 movie ratings, social network links)? If so, please describe how these relationships are made explicit.\\n\\n    No.\\n\\n12. Are there recommended data splits (e.g., training, development/validation, testing)? If so, please provide a description of these splits, explaining the rationale behind them.\\n\\n    We recommend using the default 8:1:1 ratio provided by AFBench for dataset partitioning.\"}"}
{"id": "LdxNWDNvC3", "page_num": 19, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"13. Are there any errors, sources of noise, or redundancies in the dataset? If so, please provide a description.\\n\\n- No.\\n\\n14. Is the dataset self-contained, or does it link to or otherwise rely on external resources (e.g., websites, tweets, other datasets)? If it links to or relies on external resources, a) are there guarantees that they will exist, and remain constant, over time; b) are there official archival versions of the complete dataset (i.e., including the external resources as they existed at the time the dataset was created); c) are there any restrictions (e.g., licenses, fees) associated with any of the external resources that might apply to a future user? Please provide descriptions of all external resources and any restrictions associated with them, as well as links or other access points, as appropriate.\\n\\n- We release the AFBench dataset on our GitHub repository: https://github.com/hitcslj/AFBench. More specifically, please follow the instructions provided on the website: AFBench-Webpage. Our dataset is developed based on existing airfoil dataset UIUC and NACA.\\n\\n15. Does the dataset contain data that might be considered confidential (e.g., data that is protected by legal privilege or by doctor\u2013patient confidentiality, data that includes the content of individuals' non-public communications)? If so, please provide a description.\\n\\n- No.\\n\\n16. Does the dataset contain data that, if viewed directly, might be offensive, insulting, threatening, or might otherwise cause anxiety? If so, please describe why.\\n\\n- No.\\n\\n17. Does the dataset relate to people? If not, you may skip the remaining questions in this section.\\n\\n- No.\\n\\n18. Does the dataset identify any subpopulations (e.g., by age, gender)?\\n\\n- No.\\n\\n19. Is it possible to identify individuals (i.e., one or more natural persons), either directly or indirectly (i.e., in combination with other data) from the dataset? If so, please describe how.\\n\\n- No.\\n\\n20. Does the dataset contain data that might be considered sensitive in any way (e.g., data that reveals racial or ethnic origins, sexual orientations, religious beliefs, political opinions or union memberships, or locations; financial or health data; biometric or genetic data; forms of government identification, such as social security numbers; criminal history)? If so, please provide a description.\\n\\n- No.\\n\\n21. Any other comments?\\n\\n- No.\\n\\nG.2 Collection Process\\n\\n22. How was the data associated with each instance acquired? Was the data directly observable (e.g., raw text, movie ratings), reported by subjects (e.g., survey responses), or indirectly inferred/derived from other data (e.g., part-of-speech tags, model-based guesses for age or language)? If data was reported by subjects or indirectly inferred/derived from other data, was the data validated/verified? If so, please describe how.\\n\\n- Our data is developing based on published airfoil dataset UIUC and NACA using a designed CST method and unconditional generative models mentioned before.\"}"}
{"id": "LdxNWDNvC3", "page_num": 20, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"23. What mechanisms or procedures were used to collect the data (e.g., hardware apparatus or sensor, manual human curation, software program, software API)? How were these mechanisms or procedures validated?\\n\\nFor UIUC, we write a Python script that uses B\u00e9zier interpolation to generate a smooth airfoil with a specified number of points. For NACA, we write an NACA generator script to sample the airfoil at a specified number of points. For the rest, we use CST and generative methods to generate the airfoils, then use XFoil to create the aerodynamic labels, and a Python script to calculate the geometry labels. We use hundreds of small CPU nodes and small GPU nodes for the computation.\\n\\n24. If the dataset is a sample from a larger set, what was the sampling strategy (e.g., deterministic, probabilistic with specific sampling probabilities)?\\n\\nWe use full-set provided by UIUC and NACA.\\n\\n25. Who was involved in the data collection process (e.g., students, crowdworkers, contractors) and how were they compensated (e.g., how much were crowdworkers paid)?\\n\\nNo crowdworkers were involved in the curation of the dataset. Open-source researchers and developers enabled its creation for no payment.\\n\\n26. Over what timeframe was the data collected? Does this timeframe match the creation timeframe of the data associated with the instances (e.g., recent crawl of old news articles)? If not, please describe the timeframe in which the data associated with the instances was created.\\n\\nThe AF-200K data and label was generated in 2024, while the source data UIUC v2 was created in 2020, NACA v1 was created in 1933.\\n\\n27. Were any ethical review processes conducted (e.g., by an institutional review board)? If so, please provide a description of these review processes, including the outcomes, as well as a link or other access point to any supporting documentation.\\n\\nThe source sensor data for UIUC and NACA had been conducted ethical review processes by UIUC Applied Aerodynamics Group and National Advisory Committee for Aeronautics airfoils, which can be referred to UIUC and NACA, respectively.\\n\\n28. Did you collect the data from the individuals in question directly, or obtain it via third parties or other sources (e.g., websites)?\\n\\nWe retrieve the data from the open source dataset UIUC and NACA.\\n\\n29. Were the individuals in question notified about the data collection? If so, please describe (or show with screenshots or other information) how notice was provided, and provide a link or other access point to, or otherwise reproduce, the exact language of the notification itself.\\n\\nThe AFBench dataset is developed based on open-source dataset and following the open-source license.\\n\\n30. Did the individuals in question consent to the collection and use of their data? If so, please describe (or show with screenshots or other information) how consent was requested and provided, and provide a link or other access point to, or otherwise reproduce, the exact language to which the individuals consented.\\n\\nThe AFBench dataset is developed on open-source dataset and obey the license.\\n\\n31. If consent was obtained, were the consenting individuals provided with a mechanism to revoke their consent in the future or for certain uses? If so, please provide a description, as well as a link or other access point to the mechanism (if appropriate).\\n\\nUsers have a possibility to check for the presence of the links in our dataset leading to their data on public internet by using the search tool provided by AFBench, accessible at AFBench-Webpage. If users wish to revoke their consent after finding sensitive data, they can contact the hosting party and request to delete the content from the underlying website. Please leave the message in GitHub Issue to request removal of the links from the dataset.\"}"}
{"id": "LdxNWDNvC3", "page_num": 21, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"32. Has an analysis of the potential impact of the dataset and its use on data subjects (e.g., a data protection impact analysis) been conducted? If so, please provide a description of this analysis, including the outcomes, as well as a link or other access point to any supporting documentation.\\n\\n- We develop our dataset based on open source dataset UIUC and NACA published by UIUC Applied Aerodynamics Group and National Advisory Committee for Aeronautics airfoils. The published dataset has been seriously considered of its potential impact and its use on data subjects.\\n\\n33. Any other comments?\\n- No.\\n\\nG.3 Preprocessing, Cleaning, and/or Labeling\\n\\n34. Was any preprocessing/cleaning/labeling of the data done (e.g., discretization or bucketing, tokenization, part-of-speech tagging, SIFT feature extraction, removal of instances, processing of missing values)? If so, please provide a description. If not, you may skip the remainder of the questions in this section.\\n\\n- Above all, we utilize B-spline interpolation to convert the discrete points into a continuous representation. Then we use CST method to augment the dataset and XFOIL to calculate the corresponding aerodynamic labels. Additionally, we utilize PARSEC physical parameters with Control keypoints Beside as Geometric label. Besides this, no preprocessing or labelling is done.\\n\\n35. Was the \u201craw\u201d data saved in addition to the preprocessed/cleaned/labeled data (e.g., to support unanticipated future uses)? If so, please provide a link or other access point to the \u201craw\u201d data.\\n\\n- Yes, we provide the original open source dataset and the augmented AF-200K dataset.\\n\\n36. Is the software used to preprocess/clean/label the instances available? If so, please provide a link or other access point.\\n\\n- Yes, XFOIL is accessible at https://github.com/hitcslj/Xfoil-cal.\\n\\n37. Any other comments?\\n- No.\\n\\nG.4 Uses\\n\\n38. Has the dataset been used for any tasks already? If so, please provide a description.\\n\\n- No.\\n\\n39. Is there a repository that links to any or all papers or systems that use the dataset? If so, please provide a link or other access point.\\n\\n- No.\\n\\n40. What (other) tasks could the dataset be used for?\\n\\n- We encourage researchers to explore more diverse airfoil generation and editing, as well as optimization design.\\n\\n41. Is there anything about the composition of the dataset or the way it was collected and preprocessed/cleaned/labeled that might impact future uses? For example, is there anything that a future user might need to know to avoid uses that could result in unfair treatment of individuals or groups (e.g., stereotyping, quality of service issues) or other undesirable harms (e.g., financial harms, legal risks)? If so, please provide a description. Is there anything a future user could do to mitigate these undesirable harms?\\n\\n- No.\\n\\n42. Are there tasks for which the dataset should not be used? If so, please provide a description.\\n\\n- No.\"}"}
{"id": "LdxNWDNvC3", "page_num": 22, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Due to the known biases of the dataset, under no circumstance should any models be put into production using the dataset as is. It is neither safe nor responsible. As it stands, the dataset should be solely used for research purposes in its uncurated state.\\n\\n43. Any other comments?\\n\u2022 No.\\n\\nG.5 Distribution\\n\\n44. Will the dataset be distributed to third parties outside of the entity (e.g., company, institution, organization) on behalf of which the dataset was created? If so, please provide a description.\\n\u2022 Yes, the dataset will be open-source.\\n\\n45. How will the dataset be distributed (e.g., tarball on website, API, GitHub)? Does the dataset have a digital object identifier (DOI)?\\n\u2022 The data is available through https://github.com/hitcslj/AFBench.\\n\\n46. When will the dataset be distributed?\\n\u2022 06/2024 and onward\\n\\n47. Will the dataset be distributed under a copyright or other intellectual property (IP) license, and/or under applicable terms of use (ToU)? If so, please describe this license and/or ToU, and provide a link or other access point to, or otherwise reproduce, any relevant licensing terms or ToU, as well as any fees associated with these restrictions.\\n\u2022 The AFBench dataset is published under CC BY-NC-SA 4.0, which means everyone can use this dataset for non-commercial research purpose. The original UIUC dataset is released under the GPL license. The original NACA dataset is released under the MIT license.\\n\\n48. Have any third parties imposed IP-based or other restrictions on the data associated with the instances? If so, please describe these restrictions, and provide a link or other access point to, or otherwise reproduce, any relevant licensing terms, as well as any fees associated with these restrictions.\\n\u2022 The original UIUC dataset is released under the GPL license, and the for the restrictions, please refer to UIUC. The original NACA dataset is released under the MIT license, and the for the restrictions, please refer to NACA.\\n\\n49. Do any export controls or other regulatory restrictions apply to the dataset or to individual instances? If so, please describe these restrictions, and provide a link or other access point to, or otherwise reproduce, any supporting documentation.\\n\u2022 No.\\n\\n50. Any other comments?\\n\u2022 No.\\n\\nG.6 Maintenance\\n\\n51. Who will be supporting/hosting/maintaining the dataset?\\n\u2022 Shanghai AILab will support hosting of the dataset.\\n\\n52. How can the owner/curator/manager of the dataset be contacted (e.g., email address)?\\n\u2022 https://github.com/hitcslj/AFBench/issues\\n\\n53. Is there an erratum? If so, please provide a link or other access point.\\n\u2022 There is no erratum for our initial release. Errata will be documented as future releases on the dataset website.\\n\\n54. Will the dataset be updated (e.g., to correct labeling errors, add new instances, delete instances)? If so, please describe how often, by whom, and how updates will be communicated to users (e.g., mailing list, GitHub).\\n\u2022 No.\"}"}
{"id": "LdxNWDNvC3", "page_num": 23, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"55. If the dataset relates to people, are there applicable limits on the retention of the data associated with the instances (e.g., were individuals in question told that their data would be retained for a fixed period of time and then deleted)? If so, please describe these limits and explain how they will be enforced.\\n\\n56. Will older versions of the dataset continue to be supported/hosted/maintained? If so, please describe how. If not, please describe how its obsolescence will be communicated to users.\\n\\n57. If others want to extend/augment/build on/contribute to the dataset, is there a mechanism for them to do so? If so, please provide a description. Will these contributions be validated/verified? If so, please describe how. If not, why not? Is there a process for communicating/distributing these contributions to other users? If so, please provide a description.\\n\\n58. Any other comments?\\n\\n\u2022 No.\"}"}
{"id": "LdxNWDNvC3", "page_num": 24, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Checklist\\n\\n1. For all authors...\\n   (a) Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? [Yes]\\n   (b) Did you describe the limitations of your work? [Yes] See Appendix F\\n   (c) Did you discuss any potential negative societal impacts of your work? [No]\\n   (d) Have you read the ethics review guidelines and ensured that your paper conforms to them? [Yes]\\n\\n2. If you are including theoretical results...\\n   (a) Did you state the full set of assumptions of all theoretical results? [N/A]\\n   (b) Did you include complete proofs of all theoretical results? [N/A]\\n\\n3. If you ran experiments (e.g. for benchmarks)...\\n   (a) Did you include the code, data, and instructions needed to reproduce the main experimental results (either in the supplemental material or as a URL)? [Yes] Our datasets and codebases are available at a Github repo\\n   (b) Did you specify all the training details (e.g., data splits, hyperparameters, how they were chosen)? [Yes] See Section 4\\n   (c) Did you report error bars (e.g., with respect to the random seed after running experiments multiple times)? [No]\\n   (d) Did you include the total amount of compute and the type of resources used (e.g., type of GPUs, internal cluster, or cloud provider)? [Yes] See Section 5\\n\\n4. If you are using existing assets (e.g., code, data, models) or curating/releasing new assets...\\n   (a) If your work uses existing assets, did you cite the creators? [Yes]\\n   (b) Did you mention the license of the assets? [N/A]\\n   (c) Did you include any new assets either in the supplemental material or as a URL? [N/A]\\n   (d) Did you discuss whether and how consent was obtained from people whose data you're using/curating? [N/A]\\n   (e) Did you discuss whether the data you are using/curating contains personally identifiable information or offensive content? [N/A]\\n\\n5. If you used crowdsourcing or conducted research with human subjects...\\n   (a) Did you include the full text of instructions given to participants and screenshots, if applicable? [N/A]\\n   (b) Did you describe any potential participant risks, with links to Institutional Review Board (IRB) approvals, if applicable? [N/A]\\n   (c) Did you include the estimated hourly wage paid to participants and the total amount spent on participant compensation? [N/A]\"}"}
