{"id": "M32Ldpp4Oy", "page_num": 17, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Checklist\\n\\n1. For all authors...\\n   (a) Do the main claims made in the abstract and introduction accurately reflect the paper's contributions and scope? [Yes] , the claims made in the abstract and introduction accurately reflect the paper's contributions and scope.\\n   (b) Did you describe the limitations of your work? [Yes] , the limitations are discussed in Section 6.\\n   (c) Did you discuss any potential negative societal impacts of your work? [Yes] , the potential negative societal impacts are discussed in Section 6.\\n   (d) Have you read the ethics review guidelines and ensured that your paper conforms to them? [Yes] , our paper conforms to the ethics review guidelines.\\n\\n2. If you are including theoretical results...\\n   (a) Did you state the full set of assumptions of all theoretical results? [N/A] , our paper does not include theoretical results.\\n   (b) Did you include complete proofs of all theoretical results? [N/A] , our paper does not include theoretical results.\\n\\n3. If you ran experiments (e.g. for benchmarks)...\\n   (a) Did you include the code, data, and instructions needed to reproduce the main experimental results (either in the supplemental material or as a URL)? [Yes] , the code, data, and instructions are fully open sourced in our website (link in abstract).\\n   (b) Did you specify all the training details (e.g., data splits, hyperparameters, how they were chosen)? [Yes] , the training details can be found at Appendix A and our code library.\\n   (c) Did you report error bars (e.g., with respect to the random seed after running experiments multiple times)? [Yes] , in continual learning experiments, we report mean and variance of three random runs.\\n   (d) Did you include the total amount of compute and the type of resources used (e.g., type of GPUs, internal cluster, or cloud provider)? [Yes] , hardware information is included in Section 5.\\n\\n4. If you are using existing assets (e.g., code, data, models) or curating/releasing new assets...\\n   (a) If your work uses existing assets, did you cite the creators? [N/A] , our work does not use existing assets.\\n   (b) Did you mention the license of the assets? [N/A] , our work does not use existing assets.\\n   (c) Did you include any new assets either in the supplemental material or as a URL? [Yes] , new assets are in our website.\\n   (d) Did you discuss whether and how consent was obtained from people whose data you're using/curating? [N/A] , the data are purely synthetic.\\n   (e) Did you discuss whether the data you are using/curating contains personally identifiable information or offensive content? [N/A] , the data does not contain personally identifiable information or offensive content.\\n\\n5. If you used crowdsourcing or conducted research with human subjects...\\n   (a) Did you include the full text of instructions given to participants and screenshots, if applicable? [Yes] , We have included the full text of instructions given to participants and screenshots.\\n   (b) Did you describe any potential participant risks, with links to Institutional Review Board (IRB) approvals, if applicable? [Yes] , we have described the potential participant risks, with links to Institutional Review Board (IRB) approvals.\\n   (c) Did you include the estimated hourly wage paid to participants and the total amount spent on participant compensation? [Yes] , the human participants received an hourly wage of $15.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 18, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"To make our experiments reproducible, we provided detailed baseline introductions and configurations below. For more details, please refer to our code base.\\n\\nA.1 Safe Path Following\\n\\nIn the BC branch, we have considered ILP methods [10, 36], including both symbolic ones [10, 36] and NeSy ones [7, 11]. For them, we convert the demonstration trajectories (step-wise truth value of all the predicates) into facts and conduct rule learning. Popper [10] is one of the most performant search-based rule induction algorithm, which uses failure samples to construct hyposithes spaces via answer set programming. It shows better scaling capability than previous template based methods [49]. Since Popper is a greedy approach, it usually costs too much time searching. Maxsynth [36] relax this greedy setting and aims at finding rules in noisy data via anytime solvers. In our experiments, we set 300 seconds (averaged training time for other methods) as the maximum search time for Popper and Maxsynth. For all the other parameters, official default settings are used for fairness. HRI [11] is a hierachical rule induction framework, which utilizes neural tensors to represent predicates and searches the explicit rules by finding paths between predicates. For different modes in LogiCity, we provided the number of background predicates as HRI initialization. All the other parameter settings are kept the same as the original implementation. When constructing the scene graph, we make sure the ratio of positive and negative samples is 1:1. For the other NLM [7] is an implicity rule induction method, which proposed a FOL-inspired network structure. The learnt rules are implicity stored in the network weights. For different modes in LogiCity, we provided the number of background predicates as NLM initialization. Across different modes, we used the same hyperparameters, i.e., the output dimension of each layer is set to 8, the maximum depth is set to 4, and the breadth is 3.\\n\\nFor the baselines above, we used their official optimizer during training. In addition, we constructed pure neural baselines, including an MLP and a GNN [38], both having two hidden layers with ReLU activations. In the easy and medium modes, the dimensions of the hidden layers are 128 \u00d7 64 and 64 \u00d7 64. In the hard and expert modes, the dimensions of the hidden layers are 128 \u00d7 64 and 64 \u00d7 128.\\n\\nThese self-constructed baselines are trained with Adam optimizer [87]. For more details, please refer to our open-sourced code library.\\n\\nIn the RL branch, we first build neural agents using different algorithms, which are learnt by interaction with the environment. A2C [34] is a synchronous, deterministic variant of Asynchronous Advantage Actor Critic (A3C) [34], which is an on-policy framework. It leverages multiple workers to replace the use of replay buffer. Proximal Policy Optimization (PPO) combines the idea in A2C and the trust region optimization in TRPO [88]. Different from these policy gradient-based methods, Deep Q network (DQN) [35] is an off-policy value-based approach, which has been one of the state-of-the-arts in Atari Games [23]. For these three baselines, we used a two-layer MLP as the feature extractor, which has the same structure as the MLP baseline in the BC branch. All the other configurations are borrowed from stable-baselines3 [89]. In addition to these model-free agents, we also considered model-based approaches [37, 39]. MB-shooting [37] uses the learnt world model to evaluate the randomly sampled future trajectories. In our experiments, we used an ensemble of 50 MLPs (with the same structure as above) as the dynamics model. The reward prediction is modeled as a regression problem while the state prediction is a classification problem. During inference, we sample a total of 100 random action sequences with a horizon of 10. DreamerV2 [39] is a more advanced model-based method, which introduced discrete distribution in the latent world representation. We find the official implementation for Atari games [39] is hard to work for LogiCity. Therefore, we have tried our best to carefully tune the parameters, which can be found in our code library. Additionally, we built a NeSy agent [7] based on DQN [35], named as NLM-DQN, which we show the detailed structure in Figure A. The observed groundings is first reshaped into a list of predicates, which is fed into NLM to obtain the invented new predicates. Since we are learning ego policy (for the first entity), the first axis of the feature is extracted as the truth value grounded to the ego entity. Then, similar to the vanilla DQN, we construct two MLPs to estimate the current Q value and the next Q value, which, together with the current reward, are used to update the model based on Bellman Equation. Despite its simple structure, NLM-DQN has been demonstrated as the most performant baseline in LogiCity SPF task RL branch, showcasing the power of NeSy in terms of complicated abstract reasoning. All the baselines in the RL branch are trained for a total of 200k steps in the training environment, the most performant checkpoints in validation environment is 18.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 19, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Utilized for testing. Note that this is different from existing gaming environments [23, 28, 58], where train/val/test environments have very limited distribution shift.\\n\\nA.2 Visual Action Prediction\\n\\nIn the V AP task, we built two baseline models with similar structure, namely GNN [38] and NLM [7]. Across the two models, we used the same grounding framework. Specifically, ResNet50 [2] plus Feature Pyramid Network (FPN) [71] pre-trained on ImageNet [90] is leveraged as the feature encoder. After ROIAlign [72], the resulting regional features are in the shape of $R_{512}$. The unary predicate heads are three-layer MLPs with BatchNorm1D, ReLU, and Dropout functions. Note that the unary predicates are all about the regional feature, requiring no additional information $h$. On the other hand, the binary predicates are all about the additional information. We first concatenate the information $h$ for each pair of entities and use two-layer MLPs to predicate the truth values of binary predicates. For details about the structure of the MLPs, please see our code library. The truth values of unary and binary predicates form a scene graph for the reasoning networks [7, 38] to predict actions. For GNN [38], we used a hidden layer in the dimension of 128. For NLM [7], we employed official implementation, where each logic layer invents 8 new attributes, the maximum depth is set to 4 and the breadth is set to 3. In the end-to-end setting, both methods are trained using AdamW [91]. In the modular setting, the grounding module is trained using Adam [87] while the reasoning module is optimized using AdamW [91]. For all the experiments, we train the models for 30 epochs and test the best performing checkpoint in the validation set. Note that these settings are the same in the two modes of V AP task.\\n\\nB Detailed Task Configurations\\n\\nThe full list of predicates and rules and their descriptions are displayed in Table A and Table B, respectively. Across different modes in the two tasks, the involved predicates and rule clauses are the subsets of these full lists. We introduce the detailed configurations below.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 20, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":true,\"is_diagram\":false,\"natural_text\":\"| Rule Description | Description |\\n|------------------|-------------|\\n| Stop(X):- Not(IsAmbulance(X)), Not(IsOld(X)), IsAtInter(X), IsInInter(Y). | If X is not an ambulance and not old, and X is at an intersection, and Y is in an intersection, then X should stop. |\\n| Stop(X):- Not(IsAmbulance(X)), Not(IsOld(X)), IsAtInter(X), IsAtInter(Y), HigherPri(Y, X). | If X is not an ambulance and not old, and X is at an intersection, and Y is at an intersection, and Y has higher priority than X, then X should stop. |\\n| Stop(X):- Not(IsAmbulance(X)), Not(IsOld(X)), IsInInter(X), IsInInter(Y), IsAmbulance(Y). | If X is not an ambulance and not old, and X is in an intersection, and Y is in an intersection, and Y is an ambulance, then X should stop. |\\n| Stop(X):- Not(IsAmbulance(X)), Not(IsPolice(X)), IsCar(X), Not(IsInInter(X)), Not(IsAtInter(X)), LeftOf(Y, X), IsClose(Y, X), IsPolice(Y). | If X is not an ambulance and not police, and X is a car, and X is not in or at an intersection, and Y is left of and close to X, and Y is police, then X should stop. |\\n| Stop(X):- IsBus(X), Not(IsInInter(X)), Not(IsAtInter(X)), RightOf(Y, X), NextTo(Y, X), IsPedestrian(Y). | If X is a bus, and X is not in or at an intersection, and Y is right of and next to X, and Y is a pedestrian, then X should stop. |\\n| Stop(X):- IsAmbulance(X), RightOf(Y, X), IsOld(Y). | If X is an ambulance, and Y is right of X, and Y is old, then X should stop. |\\n| Stop(X):- Not(IsAmbulance(X)), Not(IsOld(X)), CollidingClose(X, Y). | If X is not an ambulance and not old, and X is close to colliding with Y, then X should stop. |\\n| Slow(X):- Not(Stop(X)), IsTiro(X), IsPedestrian(Y), IsClose(X, Y). | If X should not stop, and X is a tiro, and Y is a pedestrian, and X is close to Y, then X should slow. |\\n| Slow(X):- Not(Stop(X)), IsTiro(X), IsInInter(X), IsAtInter(Y). | If X should not stop, and X is a tiro, and X is in an intersection, and Y is at an intersection, then X should slow. |\\n| Slow(X):- Not(Stop(X)), IsPolice(X), IsYoung(Y), IsYoung(Z), NextTo(Y, Z). | If X should not stop, and X is police, and Y is young, and Z is young, and Y is next to Z, then X should slow. |\\n| Fast(X):- Not(Stop(X)), Not(Slow(X)), IsReckless(X), IsAtInter(Y). | If X should not stop, and X should not slow, and X is reckless, and Y is at an intersection, then X should go fast. |\\n| Fast(X):- Not(Stop(X)), Not(Slow(X)), IsBus(X). | If X should not stop, and X should not slow, and X is a bus, then X should go fast. |\\n| Fast(X):- Not(Stop(X)), Not(Slow(X)), IsPolice(X), IsReckless(Y). | If X should not stop, and X should not slow, and X is police, and Y is reckless, then X should go fast. |\\n\\n**B.1 Safe Path Following**\\n\\n**Modes and Dataset:**\\n\\nAcross all modes, we fix the (maximum) number of FOV agents into 5, i.e., $N_1 = 5$. If the number of observed agents are fewer than $5$, zero-padding (closed-world assumption) is utilized, otherwise, we neglect the extra agents. The predicates involved in each mode are displayed in Table A. Easy mode includes $7$ unary and $2$ binary predicates, resulting in a $P_{K_1} \\\\sim N_{r_1} = 85$ dimensional grounding vector. Rules involve only spatial concepts and constrain the stop action.\\n\\nMedium mode features $8$ unary predicates and $4$ binary predicates, creating a $P_{K_1} \\\\sim N_{r_1} = 140$ dimensional grounding vector. The medium rule sets is extended from the easy mode and incorporate both spatial and semantic concepts, constraining the stop action. Hard mode contains $11$ unary predicates and $6$ binary predicates, yielding a $P_{K_1} \\\\sim N_{r_1} = 205$ dimensional grounding vector. Rules cover all spatial and semantic concepts and constrain the stop action. The expert mode constrains all four actions with the most complex rule sets. We provide standard training/validation/test agent configurations and validation/test episodes for all the modes. The training agents cover all the necessary concepts in the rules, while validation and test agents are different and more complex, see our code library for the detailed agent configuration. For each mode, we collect $40$ validation episodes and $100$ test episodes using corresponding agent distribution, making sure the episodes cover...\"}"}
{"id": "M32Ldpp4Oy", "page_num": 21, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"all the concepts and actions. When training the BC branch algorithms, we collected 100 trajectories from the oracle as the demonstration.\\n\\nReward: During test, the rule violation weight $w_r$ is set to $-10$ for easy, medium, and hard mode across all the $M$ clauses. For expert mode, we set this constant punishment to $-5$. In terms of step-wise action costs $\\\\phi(t)$, the easy, medium, and hard modes are configured as follows: Slow: $-2$, Normal: $0$, Fast: $-2$, Stop: $-5$. In the expert mode, the costs are Slow: $-2$, Normal: $-1$, Fast: $-2$, Stop: $-3$. Note that the action costs will be normalized by the length of the global path. Overtime punishment is set to $-3$ for all the modes. During training, we find that different methods requires different reward functions to work effectively. Therefore, we first fix the action costs and have tried our best to tune the rule violation and overtime punishment for each method. For fairness, NLM-DQN and DQN used the same training reward. For more details about the reward, please see our code library.\\n\\nB.2 Visual Action Predication\\n\\nModes: As shown in Table A, the predicates in the two modes involve the full list. As for the clauses, easy mode only constrains Stop and Slow actions, setting Normal as the default action. Hard mode constrains all the three actions with Normal set as the default actions. Note that the rule clauses in hard model is a superset of that in the easy mode.\\n\\nDatasets: In the random agent setting, we randomly generated 100 and 20 cities with different agent compositions for training and validation, respectively. For each city, we run the simulation for 100 steps and only used the data after 10 steps. In the fixed agent setting, we first pre-define different training/validation/test agent compositions. Then, we randomly initialize the cities for 100 times. For each initialization, we run the simulation for 100 steps and only used the data after 10 steps. This process results in training sets with $8.9k$ images (with more than $89k$ entity samples). The models trained with different setting are tested in the same fixed agent setting test sets. See our code library and dataset for detailed agent compositions.\\n\\nC Full Procedure of LogiCity Simulation\\n\\nWe provide more details for the simulator here. Static Urban Semantics: There are a total of $B = 8$ static semantics of the urban map, namely \u201cWalking Street\u201d, \u201cTraffic Street\u201d, \u201cCrossing\u201d, \u201cHouse\u201d, \u201cOffice\u201d, \u201cGarage\u201d, \u201cStore\u201d, \u201cGas Station\u201d. They are (currently) only used during initialization. Specifically, different types of agents will sample start and goal locations around different static semantics. Pedestrians will move from \u201cHouse\u201d, \u201cOffice\u201d, and \u201cStore\u201d to \u201cHouse\u201d, \u201cOffice\u201d, and \u201cStore\u201d, while Cars are navigating between \u201cGarage\u201d, \u201cGas Station\u201d, and \u201cStore\u201d to \u201cGarage\u201d, \u201cGas Station\u201d, and \u201cStore\u201d. Besides, the agents use different search algorithms based on these semantics to construct their global paths. Specifically, the pedestrians leverage A* search on the \u201cmovable region\u201d of the map $M_s$, which is defined as the union of Walking Streets and Crossings. In contrast, for cars, since they should move only on the right side of the road in real-world, we first construct the \u201cone-way\u201d road map of the Traffic Streets, which is a directed cyclic graph. Then, we connect the start and goal points to this road map and add them to the graph nodes. Finally, Dijkstra search is employed to construct the shortest path from start node to the goal node, which is the global path for a car.\\n\\nRendering Details: As introduced above, there exist $8$ static semantics. As shown in Table A, LogiCity also involves $9$ semantic concepts of the agents. Therefore, for each of the $17$ semantics, we ask GPT4 [1] to generate $40$ diverse descriptions. Then we leverage Stable-Diffusion XL model [30] to generate $\\\\sim 2000$ diverse icons from these descriptions. Finally, we employed a human expert to select $50$ $\\\\sim 200$ icons for each semantic. For mode details, please see our code library.\\n\\nIn addition, we also present the full procedure of the scene simulation by LogiCity in Algorithm 1.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 22, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"D State Space Comparison\\n\\nTable C: Comparison of results from different state space in the LogiCity SPF task. By default, the observation state is the groundings of the predicates, which is abstract (Abs.) and lossy. We also tried to provide exact state (Exa.) as observation, which is the semantic point cloud in the ego agent FOV.\\n\\n| Mode   | Easy | Hard |\\n|--------|------|------|\\n| Method | Obs  | TSR  | DSR | Score | Obs  | TSR  | DSR | Score |\\n| DQN    |      |      |     |       |      |      |     |       |\\n| Abs.   | 0.35 | 0.89 | 4.8 | 0.09  | 0.12 | 0.63 |     |       |\\n| Exa.   | 0.12 | 0.329| 2.1 | 0.01  | 0.56 | 2.69 |     |       |\\n| MB-Shooting | Abs.| 0.24 | 0.44| 2.55  | 0.16 | 0.17 | 1.26 |\\n| Exa.   | 0.23 | 0.264| 2.12| 0.02  | 0.24 | 1.32 |     |       |\\n\\nIn the SPF task, we by default provide the predicate groundings as the observation of the agents, which is abstract and could be lossy [12]. Thus, we have also tried to provide exact states to the agents in this section. Specifically, we annotate each pixel of the FOV map with the agent semantics and convert the pixels into 2D semantic point clouds. Since these point clouds contain all the information needed for an optimal policy, it serves as the \u201cExact State\u201d for the ego agent. The results comparison of using abstract (Abs.) and exact (Exa.) states is shown in Table C, where we find using \u201cExact State\u201d could be much harder for the agents to learn the abstractions in easy mode. In hard mode, the agents can easily converge to overly careful policies and fail to complete the task in time. One possible future solution for \u201cExact State\u201d is to combine bi-level planning [12] with reinforcement learning.\\n\\nE Quantitative Perceptual Noise\\n\\nCompared with structured knowledge graphs [21, 92, 93], the V AP task of LogiCity introduces diverse RGB images, which require models to conduct abstract reasoning with high-level perceptual noise. We quantitatively display the perception accuracy of different concepts from the NLM model [7] in Table D. Even with supervision, the averaged recall rate for the concepts is not satisfiable (Note that the errors will actually accumulate, which will be much more worse than the 55% averaged result). Compared with binary predicates, unary predicates need operation on the RGB image, which is thus harder. We also observe that the results are highly-imbalanced across concepts. For example, pedestrians and cars are easy to recognize, but a police/taxi car is extremely hard to be distinguished from normal ones. In terms of binary predicates, CollidingClose is the hardest to learn, since it needs to consider all the locations, sizes, and directions of the two entities, while the others only involves positions or priorities. One potential solution to the perceptual noise is borrowing off-the-shelf foundation models [94, 95] for the grounding task.\\n\\nF Visualizations\\n\\nSPF: Visualizations of the SPF task episodes are displayed in Figure C. Compared with the training city shown on the left, test cities have different agent compositions. For example, training city only has 2 old man while test cities has 4 such entities, featuring compositional generalization challenge. Compared with pure neural networks, NeSy method (NLM-DQN) can better generalize to unseen compositions. For example, in Episode 92, Step 84, the ego agent sees two pedestrians InIntersection with an Ambulance AtIntersection, which is an unseen composition during training. DQN fails here, outputting Normal action while NLM-DQN succeeds with the correct Stop decision. SPF task also features realistic multi-agent interaction. As shown in Episode 93, Step 125, since the two algorithms made different decisions in previous steps, the city will be very different as the other agents are largely affected by the ego actions.\\n\\nV AP: Visualizations of the V AP task examples are shown in Figure D. Compared with GNN [38], the NeSy method NLM [7] can better understand the abstractions of LogiCity. For example, Reckless cars drives Normally when it is InIntersection, while other cars should drive Slow. We find that GNN [38] shows limitation in understanding such concept and rules, making wrong predictions.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 23, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Algorithm 1: LogiCity Simulation\\n\\nInput:\\n- Concepts $P$\\n- Rules $C$\\n- Agents $A$\\n- Static urban map $M_s$\\n- Generative models for rendering\\n\\n1. Generate $M_s$ with dimensions $(W, H, B)$ and sample collision-free coordinates for agents.\\n2. Compute global paths for each agent using search-based planner.\\n3. For each time step $t$ do:\\n   - Update $M_{t+1}$ with current agent locations and paths.\\n   - For each agent $A_n$ do:\\n     - Obtain $M_{t+1}n$ and $A_{t+1}n$ using cropping function. \u25b7 Local FOV observation\\n     - Compute $g_{t+1}n$ by applying $F_i$ to $M_{t+1}n$ and $A_{t+1}n$. \u25b7 Grounding predicates\\n     - Compute action predicates $a_{t+1}n$ using SMT solver with $g_{t+1}n$ and $C$. \u25b7 Rule inference\\n     - Move agent based on $a_{t+1}n$.\\n4. Update $M_{t+1}$ \u25b7 Update semantic map\\n5. If agent reaches goal then:\\n   - Set new goal location and compute new path. \u25b7 Re-sample goal and re-plan path\\n\\nGenerate concept descriptions using GPT-4 and generate icons using diffusion model.\\n\\nCompose icons into $M_{t+1}$ to create RGB image $I_t$. \u25b7 Rendering\\n\\nOutput: RGB images of urban grid maps $I_t$\\n\\nTable D: Quantitative results for concept recognition in the V AP task of LogiCity. We report the recall rate of NLM [7] model for each predicate (with threshold $0.5$ on the predicted probability).\\n\\n| Arity Unary | Predicates         | Avg. Num. Samples | Recall@0.5 |\\n|-------------|--------------------|-------------------|-------------|\\n|             | IsPed.             | 10680             | 0.774       |\\n|             | IsCar              | 14240             | 0.981       |\\n|             | IsAmbu.            | 1780              | 0.251       |\\n|             | IsBus              | 1780              | 0.400       |\\n|             | IsPolice           | 3560              | 0.073       |\\n|             | IsTiro             | 1780              | 0.024       |\\n|             | IsReckl.           | 3560              | 0.158       |\\n|             | IsOld              | 3560              | 0.328       |\\n|             | IsYoung            | 5340              | 0.563       |\\n|             | IsAtInter          | 7490              | 0.278       |\\n|             | IsInInter          | 3627              | 0.332       |\\n\\n| Arity Binary | Predicates | Avg. Num. Samples | Recall@0.5 |\\n|--------------|------------|-------------------|-------------|\\n|              | IsClose    | 23660             | 0.783       |\\n|              | HigherPri  | 28902             | 1.000       |\\n|              | CollidingClose | 500         | 0.050       |\\n|              | LeftOf     | 33046             | 0.857       |\\n|              | RightOf    | 28064             | 0.921       |\\n|              | NextTo     | 15495             | 0.874       |\\n\\nNote: The results are obtained from hard mode with random training agents.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 24, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"You are an expert in First-Order-Logic (FOL) Rule induction, the following question-answers are FOL reasoning examples. Here are 5 demonstrations:\\n\\nQuestion: \\\"In the scene you see a total of 12 entities, they are named as follows: Entity_0, Entity_1, Entity_2, Entity_3, Entity_4, Entity_5, Entity_6, Entity_7, Entity_8, Entity_9, Entity_10, Entity_11. There exist the following predicates as their attributes and relations: IsPedestrian (arity: 1), IsCar (arity: 1), IsAmbulance (arity: 1), IsBus (arity: 1), IsPolice (arity: 1), IsTiro (arity: 1), IsReckless (arity: 1), IsOld (arity: 1), IsYoung (arity: 1), IsAtInter (arity: 1), IsInInter (arity: 1), IsClose (arity: 2), HigherPri (arity: 2), CollidingClose (arity: 2), LeftOf (arity: 2), RightOf (arity: 2), NextTo (arity: 2), Sees (arity: 2). The truth value of these predicates grounded to the entities are as follows (Only the ones that are True are provided, assume the rest are False): IsPedestrian(Entity_1), IsPedestrian(Entity_2), IsPedestrian(Entity_3), IsPedestrian(Entity_4), IsPedestrian(Entity_5), IsCar(Entity_0), IsCar(Entity_6), IsCar(Entity_7), IsCar(Entity_8), IsCar(Entity_9), IsCar(Entity_10), IsCar(Entity_11), IsAmbulance(Entity_0), IsAmbulance(Entity_11), IsPolice(Entity_6), IsPolice(Entity_10), IsTiro(Entity_9), IsReckless(Entity_8), IsOld(Entity_3), IsOld(Entity_5), IsYoung(Entity_1), IsYoung(Entity_2), IsAtInter(Entity_5), IsAtInter(Entity_8), IsAtInter(Entity_11), IsInInter(Entity_0), IsInInter(Entity_6), IsInInter(Entity_10), IsClose(Entity_1, Entity_3), IsClose(Entity_3, Entity_1), IsClose(Entity_3, Entity_7), IsClose(Entity_4, Entity_10), IsClose(Entity_7, Entity_3), IsClose(Entity_7, Entity_10), IsClose(Entity_10, Entity_4), IsClose(Entity_10, Entity_7), IsClose(Entity_10, Entity_11), IsClose(Entity_11, Entity_10), ..., Sees(Entity_1, Entity_3), Sees(Entity_1, Entity_7), Sees(Entity_1, Entity_10), Sees(Entity_3, Entity_1), Sees(Entity_3, Entity_7), Sees(Entity_3, Entity_10), Sees(Entity_4, Entity_10), Sees(Entity_4, Entity_11), Sees(Entity_5, Entity_8), Sees(Entity_7, Entity_10), Sees(Entity_7, Entity_11), Sees(Entity_8, Entity_5), Sees(Entity_10, Entity_1), Sees(Entity_10, Entity_3), Sees(Entity_10, Entity_7), Sees(Entity_11, Entity_4), Sees(Entity_11, Entity_7), Sees(Entity_11, Entity_10). What is the next action of entity Entity_9?\\\"\\n\\nOption: (A) Slow (B) Normal (C) Fast (D) Stop\\n\\nAnswer: B\\n\\n... (4 more demos not displayed)\\n\\nNow try your best to first identify the FOL rules from the examples above and then answer the following question. Your answer should strictly end with the format of single letter: 'Answer: _.'\\n\\nQuestion: \\\"In the scene you see a total of 14 entities, they are named as follows: Entity_0, Entity_1, Entity_2, Entity_3, Entity_4, Entity_5, Entity_6, Entity_7, Entity_8, Entity_9, Entity_10, Entity_11, Entity_12, Entity_13. There exist the following predicates as their attributes and relations: IsPedestrian (arity: 1), IsCar (arity: 1), IsAmbulance (arity: 1), IsBus (arity: 1), IsPolice (arity: 1), IsTiro (arity: 1), IsReckless (arity: 1), IsOld (arity: 1), IsYoung (arity: 1), IsAtInter (arity: 1), IsInInter (arity: 1), IsClose (arity: 2), HigherPri (arity: 2), CollidingClose (arity: 2), LeftOf (arity: 2), RightOf (arity: 2), NextTo (arity: 2), Sees (arity: 2). The truth value of these predicates grounded to the entities are as follows (Only the ones that are True are provided, assume the rest are False): IsPedestrian(Entity_1), IsPedestrian(Entity_2), IsPedestrian(Entity_3), IsPedestrian(Entity_4), IsPedestrian(Entity_5), IsPedestrian(Entity_6), IsCar(Entity_0), IsCar(Entity_7), IsCar(Entity_8), IsCar(Entity_9), IsCar(Entity_10), IsCar(Entity_11), IsCar(Entity_12), IsCar(Entity_13), IsAmbulance(Entity_12), IsBus(Entity_10), IsPolice(Entity_9), IsPolice(Entity_11), IsTiro(Entity_8), IsReckless(Entity_0), IsReckless(Entity_7), IsOld(Entity_3), IsOld(Entity_5), IsYoung(Entity_1), IsYoung(Entity_2), IsYoung(Entity_4), IsAtInter(Entity_8), IsAtInter(Entity_13), IsInInter(Entity_6), IsInInter(Entity_11), IsClose(Entity_0, Entity_5), IsClose(Entity_1, Entity_3), IsClose(Entity_2, Entity_8), IsClose(Entity_3, Entity_1), IsClose(Entity_5, Entity_0), IsClose(Entity_5, Entity_6), IsClose(Entity_5, Entity_10), IsClose(Entity_6, Entity_5), IsClose(Entity_6, Entity_8), IsClose(Entity_6, Entity_13), IsClose(Entity_8, Entity_2), IsClose(Entity_8, Entity_6), IsClose(Entity_8, Entity_10), IsClose(Entity_10, Entity_5), IsClose(Entity_10, Entity_8), IsClose(Entity_10, Entity_13), IsClose(Entity_13, Entity_6), IsClose(Entity_13, Entity_10), HigherPri(Entity_0, Entity_8), HigherPri(Entity_0, Entity_10), HigherPri(Entity_0, Entity_12), HigherPri(Entity_0, Entity_13), HigherPri(Entity_2, Entity_0), HigherPri(Entity_2, Entity_8), HigherPri(Entity_2, Entity_10), HigherPri(Entity_2, Entity_13), HigherPri(Entity_5, Entity_0), HigherPri(Entity_5, Entity_8), HigherPri(Entity_5, Entity_10), HigherPri(Entity_5, Entity_12), HigherPri(Entity_5, Entity_13), HigherPri(Entity_6, Entity_0), HigherPri(Entity_6, Entity_8), HigherPri(Entity_6, Entity_10), HigherPri(Entity_6, Entity_12), HigherPri(Entity_6, Entity_13), HigherPri(Entity_7, Entity_9), HigherPri(Entity_8, Entity_10), HigherPri(Entity_8, Entity_12), HigherPri(Entity_8, Entity_13), HigherPri(Entity_10, Entity_12), HigherPri(Entity_10, Entity_13), HigherPri(Entity_12, Entity_13), CollidingClose(Entity_0, Entity_10), CollidingClose(Entity_7, Entity_9), CollidingClose(Entity_12, Entity_13), LeftOf(Entity_0, Entity_2), LeftOf(Entity_0, Entity_6), LeftOf(Entity_0, Entity_8), LeftOf(Entity_2, Entity_5), LeftOf(Entity_2, Entity_13), LeftOf(Entity_3, Entity_1), LeftOf(Entity_5, Entity_8), LeftOf(Entity_6, Entity_2), LeftOf(Entity_6, Entity_8), LeftOf(Entity_8, Entity_5), LeftOf(Entity_8, Entity_12), LeftOf(Entity_8, Entity_13), LeftOf(Entity_10, Entity_2), LeftOf(Entity_10, Entity_6), LeftOf(Entity_10, Entity_8), LeftOf(Entity_12, Entity_0), ..., Sees(Entity_0, Entity_5), Sees(Entity_0, Entity_6), Sees(Entity_0, Entity_8), Sees(Entity_0, Entity_10), Sees(Entity_0, Entity_12), Sees(Entity_0, Entity_13), Sees(Entity_1, Entity_3), Sees(Entity_3, Entity_1), Sees(Entity_5, Entity_4), Sees(Entity_6, Entity_0), Sees(Entity_6, Entity_10), Sees(Entity_6, Entity_12), Sees(Entity_6, Entity_13), Sees(Entity_7, Entity_9), Sees(Entity_8, Entity_0), Sees(Entity_8, Entity_2), Sees(Entity_8, Entity_6), Sees(Entity_8, Entity_10), Sees(Entity_8, Entity_13), Sees(Entity_10, Entity_5), Sees(Entity_10, Entity_6), Sees(Entity_10, Entity_8), Sees(Entity_10, Entity_12), Sees(Entity_10, Entity_13), Sees(Entity_12, Entity_0), Sees(Entity_12, Entity_6), Sees(Entity_12, Entity_10), Sees(Entity_12, Entity_13), Sees(Entity_13, Entity_0), Sees(Entity_13, Entity_2), Sees(Entity_13, Entity_5), Sees(Entity_13, Entity_6), Sees(Entity_13, Entity_8), Sees(Entity_13, Entity_10). What is the next action of entity Entity_11?\\\"\\n\\nOption: (A) Slow (B) Normal (C) Fast (D) Stop\\n\\nAnswer: _.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 25, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Figure C: Qualitative comparison between NLM-DQN [7, 35] and DQN [35] agents in the hard mode of SPF task. We display the training episode on the left, which has different agent sets from the test, featuring compositional generalization challenge. Compared with the pure neural network, NeSy method [7, 35] is better at abstract reasoning. In Episode 92, with unseen compositions of concepts, the DQN agent fails while NLM-DQN succeeds with the correct decision. Note that in SPF, different ego decisions could significantly affect the city evolution (See Episode 93, Step 125).\\n\\nFigure D: Qualitative comparison between NLM [7] and GNN [38] in the hard mode of VAP task. We display the grounded clauses, where the involved entities are marked with boxes in corresponding colors. Correct predictions are shown in green, while the wrong one is in red.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 1, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"LogiCity: Advancing Neuro-Symbolic AI with Abstract Urban Simulation\\n\\nBowen Li\\nZhaoyu Li\\nQiwei Du\\nJinqi Luo\\nWenshan Wang\\nYaqi Xie\\nSimon Stepputtis\\nChen Wang\\nKatia Sycara\\nPradeep Ravikumar\\nAlexander Gray\\nXujie Si\\nSebastian Scherer\\n\\n1 Carnegie Mellon University\\n2 University of Toronto\\n3 University at Buffalo\\n4 University of Pennsylvania\\n5 Centaur AI Institute\\n6 CIFAR AI Chair, Mila\\n\\n{bowenli2, basti}@andrew.cmu.edu\\n\\nAbstract\\n\\nRecent years have witnessed the rapid development of Neuro-Symbolic (NeSy) AI systems, which integrate symbolic reasoning into deep neural networks. However, most of the existing benchmarks for NeSy AI fail to provide long-horizon reasoning tasks with complex multi-agent interactions. Furthermore, they are usually constrained by fixed and simplistic logical rules over limited entities, making them far from real-world complexities. To address these crucial gaps, we introduce LogiCity, the first simulator based on customizable first-order logic (FOL) for an urban-like environment with multiple dynamic agents. LogiCity models diverse urban elements using semantic and spatial concepts, such as IsAmbulance(X) and IsClose(X, Y).\\n\\nThese concepts are used to define FOL rules that govern the behavior of various agents. Since the concepts and rules are abstractions, they can be universally applied to cities with any agent compositions, facilitating the instantiation of diverse scenarios. Besides, a key feature of LogiCity is its support for user-configurable abstractions, enabling customizable simulation complexities for logical reasoning. To explore various aspects of NeSy AI, LogiCity introduces two tasks, one features long-horizon sequential decision-making, and the other focuses on one-step visual reasoning, varying in difficulty and agent behaviors.\\n\\nOur extensive evaluation reveals the advantage of NeSy frameworks in abstract reasoning. Moreover, we highlight the significant challenges of handling more complex abstractions in long-horizon multi-agent scenarios or under high-dimensional, imbalanced data. With its flexible design, various features, and newly raised challenges, we believe LogiCity represents a pivotal step forward in advancing the next generation of NeSy AI. All the code and data are open-sourced at our website.\\n\\n1 Introduction\\n\\nUnlike most existing deep neural networks [1, 2], humans are not making predictions and decisions in a relatively black-box way [3]. Instead, when we learn to drive a vehicle, play sports, or solve math problems, we naturally leverage and explore the underlying symbolic representations and structure [3\u20135]. Such capability enables us to swiftly and robustly reason over complex situations and to adapt to new scenarios. To emulate human-like learning and reasoning, the Neuro-Symbolic (NeSy) AI community [6] has introduced various hybrid systems [7\u201319], integrating symbolic reasoning into deep neural networks to achieve higher data efficiency, interpretability, and robustness.\\n\\nDespite their rapid advancement, many NeSy AI systems are designed and tested only in very simplified and limited environments, such as visual sudoku [20].\\n\\nThis work mainly focuses on logical reasoning within the broad NeSy community.\\n\\n38th Conference on Neural Information Processing Systems (NeurIPS 2024) Track on Datasets and Benchmarks.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 2, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"tion, knowledge graphs, and reasoning games/simulations (see Table 1). A benefit of such environments is that they usually provide data with symbolic annotations, which the NeSy AI systems can easily integrate. However, they are still far from real-world complexity due to the lack of three key features: (1) Most simulators are governed by propositional rules tied to specific fixed entities rather than abstractions. As a result, agents learned from them are hard to generalize compositionally. (2) In real life, we learn to reason gradually from simple to complex scenarios, requiring the rules within the environment to be flexible. Either overly simplified or overly complicated/unsuitable environments cannot promote the development of NeSy AI systems. (3) Few simulators offer realistic multi-agent interactions, where the environment agents often need to actively adapt their behaviors in response to varying actions of the ego agent. Moreover, a comprehensive benchmark needs to provide both long-horizon (e.g., >20 steps) and visual reasoning scenarios to exercise different aspects of NeSy AI.\\n\\nTable 1: Comparison of existing NeSy benchmarks and LogiCity. Our simulator is governed by diverse abstractions, which can be flexibly customized. We also support long-horizon, multi-agent tasks and RGB rendering. \u201c\u2212\u201d denotes partially supported features.\\n\\n| Benchmarks       | Features                  |\\n|------------------|---------------------------|\\n| Abstract FlexibleMulti-Agent Long-Horizon RGB Visual Sudoku [20] | \u2717 \u2713 \u2717 \u2717 \u2717 |\\n| Handwritten Formula [13] | \u2717 \u2713 \u2717 \u2717 \u2717 |\\n| Smokers & Friends [21] | \u2713 \u2717 \u2717 \u2717 \u2717 |\\n| CLEVR [22] | \u2713 \u2713 \u2717 \u2717 \u2713 |\\n| BlocksWorld [7] | \u2713 \u2717 \u2717 \u2713 \u2713 |\\n| Atari Games [23] | \u2717 \u2212 \u2212 \u2713 \u2713 |\\n| Minigrid & Miniworld [24] | \u2212 \u2212 \u2717 \u2212 \u2713 |\\n| BabyAI [25] | \u2713 \u2212 \u2717 \u2713 \u2713 |\\n| HighWay [26] | \u2713 \u2717 \u2713 \u2717 \u2713 |\\n| LogiCity (Ours) | \u2713 \u2713 \u2713 \u2713 \u2713 |\\n\\nTo address these issues, we introduce LogiCity, the first customizable first-order-logic (FOL)-based simulator and benchmark motivated by complex urban dynamics. As illustrated in Figure 1, LogiCity allows users to freely customize spatial and semantic conceptual attributes (concepts), FOL rules, and agent sets as configurations. Since the concepts and rules are abstractions, they can be universally applied to any agent compositions across different cities. For example, in Figure 1, concepts such as \\\"IsClose(X, Y), IsAmbulance(Y)\\\", and rules like \\\"Stop(X):- IsAmbulance(Y), IsClose(X, Y)\\\" can be grounded with specific and distinct train/test agent sets to govern their behaviors in the simulation. To render the environment into diverse RGB images, we leverage foundational generative models. Since our modular framework enables seamless configuration adjustments, researchers can explore compositional generalization by changing agent sets while keeping abstractions fixed, or study adaptation to new and more complex abstractions by altering rules and concepts.\\n\\nTo exercise different aspects of NeSy AI, we use LogiCity to design tasks for both sequential decision-making (SDM) and visual reasoning. In the SDM task, algorithms need to navigate a lengthy path (>40 steps) with minimal trajectory cost, considering rule violations and step-wise action costs. This involves planning amidst complex scenarios and interacting with multiple dynamic agents. For instance, decisions like speeding up may incur immediate costs but could lead to a higher return in achieving the goal sooner. Notably, our SDM task is also unique in that training and testing agent compositions are different, requiring an agent to learn the abstractions and generalize to new compositions. Contrarily, the visual reasoning task focuses on single-step reasoning but features high-dimensional RGB inputs. Algorithms must perform sophisticated abstract reasoning to predict actions for all agents with high-level perceptual noise. Across both tasks, we vary reasoning complexity to evaluate the algorithms' ability to adapt and learn new abstractions.\\n\\nWhile we show that existing NeSy approaches perform better in learning abstractions, both from scratch and continually, more complex scenarios from LogiCity still pose significant challenges for prior arts. On the one hand, LogiCity raises the abstract reasoning complexity with long-horizon multiple agents scenario, which have not been adequately addressed by current methods. Besides, it also highlights the difficulty of learning complex abstractions from high-dimensional data even for one-step reasoning. On the other hand, LogiCity provides flexible ground-truth symbolic abstractions, allowing for the new methods to be gradually designed, developed, and validated. Therefore, we believe LogiCity represents a crucial step for advancing the next generation of NeSy AI capable of sophisticated abstract reasoning and learning.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 3, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Figure 1: LogiCity employs abstract concepts and rules, allowing different agent sets to address compositional generalization. Its modular structure enables users to modify abstractions flexibly.\\n\\n2 Related Works\\n\\n2.1 Neuro-Symbolic AI\\nNeSy AI systems aim to integrate formal logical reasoning into deep neural networks. We distinguish these systems into two categories: deductive methods and inductive methods.\\n\\nDeductive Methods typically operate under the assumption that the underlying symbolic structure and the chain of deductive reasoning (rules) are either known [8, 9, 21, 40\u201342] or can be generated by an oracle [17, 18, 43, 44]. Some of these approaches constructed differentiable logical loss functions that constrain the training of deep neural networks [40, 41]. Others, such as DeepProbLog [8], have formulated differential reasoning engines, thus enabling end-to-end learning [45\u201347]. Recently, Large Language Models (LLMs) have been utilized to generate executable code [17, 43, 44] or planning abstractions [48], facilitating the modular integration of the grounding networks. Despite their success, deductive methods sidestep or necessitate the laborious manually engineered symbolic structure, which potentially limits their applicability in areas lacking formalized knowledge.\\n\\nInductive Methods focus on generating the symbolic structure either through supervised learning [10, 11, 36, 49\u201351] or by interacting with the environment [52\u201354]. One line of research explicitly searches the rule space, such as \u2202ILP [49], Difflog [55], and Popper [10]. However, as the rule space can be exponentially large for abstractions, these methods often result in prolonged search times. To address this, some strategies incorporate neural networks to accelerate the search process [11, 50, 51]. Another avenue of inductive methods involves designing logic-inspired neural networks where rules are implicitly encoded within the learned weights [7, 20, 56, 57], such as SATNet [20] and Neural Logic Machines (NLM) [7]. While these methods show promise for scalability and generalization, their applications have been predominantly limited to overly simplistic test environments.\\n\\n2.2 Games and Simulations\\nVarious gaming environments [23\u201325, 27] have been developed to advance AI agents. Atari games [23], for instance, provide diverse challenges ranging from spatial navigation in \u201cPac-Man\u201d to real-time strategy in \u201cBreakout\u201d. More complex games include NetHack [27], StarCraft II [58], and MineCraft [28], where an agent is required to do strategic planning and resource management. LogiCity shares similarities with these games in that agent behavior is governed by rules. Especially, LogiCity can be viewed as a Rogue-like gaming environment [27], where maps and agent settings could be randomly generated in different runs. However, our simulator is uniquely tailored for the\"}"}
{"id": "M32Ldpp4Oy", "page_num": 4, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"NeSy AI community because: (1) LogiCity provides formal symbolic structure in FOL, enhancing the validation and design of NeSy frameworks. (2) Since FOL predicates and rules are abstractions, a user can arbitrarily customize the composition of the world, introducing adversarial scenarios. (3) LogiCity also supports customizable reasoning complexity through flexible configuration settings. Another key difference between LogiCity and most games [23, 27, 58] is that the behavior of non-player characters (NPCs) in LogiCity is governed by global logical constraints rather than human-engineered behavior trees [59\u201362]. This design enables NPCs to automatically commit to actions that ensure global rule satisfaction, without the need for manual scripting. Moreover, compared to these games, LogiCity is closer to real urban life, offering a more practical scenario.\\n\\nAddressing the need for realism, autonomous driving (AD) simulators [26, 63\u201368] deliver high-quality rendering and accurate traffic simulations but often adhere to fixed rules for limited sets of concepts. Among them, the SCENIC language [66\u201368] is the closest to LogiCity, which uses Linear Temporal Logic to specify AD scenarios. Unlike SCENIC, LogiCity uses abstractions in FOL, which allows for the generation of a large number of cities with distinct agent compositions more easily. Besides, LogiCity goes beyond these AD simulators by introducing a broader range of concepts and more complex rules, raising the challenge of sophisticated logical reasoning.\\n\\n3 LogiCity Simulator\\n\\nThe overall framework of LogiCity simulator is shown in Figure 1. In the configuration stage, a user is expected to provide Concepts, Rules, and Agent set, which are fed into the abstraction-based simulator to create a sequence of urban grid maps. These maps are rendered into diverse RGB images via generative models, including a LLM [1] and a text-driven diffusion model [30].\\n\\n3.1 Configuration and Preliminaries\\n\\nConcepts consist of $K$ background predicates $P = \\\\{P_i(\\\\cdot) | i = 1, \\\\ldots, K\\\\}$. In LogiCity, we can define both semantic and spatial predicates. For example, $\\\\text{IsAmbulance}(\\\\cdot)$ is an unary semantic predicate and $\\\\text{IsClose}(\\\\cdot, \\\\cdot)$ is a binary spatial predicate. These predicates will influence the truth value of four action predicates $\\\\{\\\\text{Slow}(\\\\cdot), \\\\text{Normal}(\\\\cdot), \\\\text{Fast}(\\\\cdot), \\\\text{Stop}(\\\\cdot)\\\\}$ according to certain rules.\\n\\nRules consist of $M$ FOL clauses, $C = \\\\{C_m | m = 1, \\\\ldots, M\\\\}$. Following ProLog syntax [29], an FOL clause $C_m$ can be written as:\\n\\n$$\\\\text{Stop}(X) : \\\\neg \\\\text{IsClose}(X, Y) \\\\land \\\\text{IsAmbulance}(Y),$$\\n\\nwhere $\\\\text{Stop}(X)$ is the head, and the rest after \\\"\u2212\\\" is the body. $X, Y$ are variables, which will be grounded into specific entities for rule inference. Note that the clause implicitly declares that the variables in the head have a universal quantifier ($\\\\forall$) and the other variables in the body have an existential quantifier ($\\\\exists$). We assume only action predicates appear in the head, both action and background predicates could appear in the body. The concepts $P$ and rules $C$ are abstractions, which are not tied to specific entities.\\n\\nAgents serve as the entities in the environment, which is used to ground the abstractions. We use $A = \\\\{A_n | n = 1, \\\\ldots, N\\\\}$ to indicate all the $N$ agents in a city. Each agent will initially be annotated with the semantic concepts defined in $P$. For example, an ambulance car $A_1$ is annotated as $A_1 = \\\\{\\\\text{IsCar}: \\\\text{True}, \\\\text{IsAmbulance}: \\\\text{True}, \\\\ldots, p\\\\}$, where $p \\\\in \\\\mathbb{R}$ denotes right-of-way priority.\\n\\n$P, C, A$ make up the configuration of LogiCity simulation. A user can flexibly change any of them seamlessly without modifying the simulation and rendering process.\\n\\n3.2 Simulation and Rendering\\n\\nAs the simulation initialization, a static urban map $M_s \\\\in \\\\{0, 1\\\\}^{W \\\\times H \\\\times B}$ is constructed, where $W, H$ denotes the width and height. $B$ indicates the number of static semantics in the city, e.g., traffic streets, walking streets, intersections, etc. The agents then randomly sample collision-free start and goal locations on the map. These locations are fed into a search-based planner [69] to obtain the global paths that the agents will follow to navigate themselves. On top of the static map, each agent will create an additional dynamic layer, indicating their latest location and planned paths. We use $M_t \\\\in \\\\{0, 1\\\\}^{W \\\\times H \\\\times (B + N)}$ to denote the full semantic map with all the $N$ agents at time step $t$. \\n\\n4\"}"}
{"id": "M32Ldpp4Oy", "page_num": 5, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Slow($A!$): 1, Normal($A!$): 0, Fast($A!$): 0, Stop($A!$): 0\\n\\nModel\\nGrounding\\nParsing\\nFun.\\nActions $a!$\\nSimulation\\nRewards\\nInfos\\nROIAlign\\nBinary\\nUnary\\nReasoning\\nFOV\\nEnc.\\nPair $x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y! w! h! d! p! x! y"}
{"id": "M32Ldpp4Oy", "page_num": 6, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"function $Z(o_{t+1}|s_{t+1}, a_{t})$ is a deterministic cropping function. The reward function $R(s_{t}, a_{t})$ is defined as $R(s_{t}, a_{t}) = P_{M} w_{r} \\\\psi(s_{t}, a_{t}, C_{m}) + w_{a} \\\\phi(a_{t}) + w_{overtime}(t)$, where $w_{r}$ is the weight of rule violation punishment for the $m$-th clause $C_{m}$. $\\\\psi(\\\\cdot, \\\\cdot, \\\\cdot)$ evaluates if clause $C_{m}$ is satisfied for agent $A_{1}$ given $s_{t}$ and $a_{t}$. $\\\\phi(a_{t})$ indicates action cost at step $t$ and $w$ is a normalization factor. $w_{overtime}(t)$ gives constant punishment if $t$ is larger than the max horizon. Finally, $\\\\gamma$ is a discount factor set to 0.99.\\n\\nAn example of SPF is shown in Figure 2 (a), where $A_{1}$ is the Ambulance car in the purple box. The dashed box denotes its FOV, which will be grounded by the parsing functions. A model needs to learn to sequentially output action decisions that maximize trajectory return.\\n\\nCompared to existing reasoning games [23\u201325], LogiCity's SPF task presents two unique challenges:\\n\\n1. Different agent configurations $A_{i}$ in training and testing cause distribution shifts in world transitions ($T$). This requires the model to learn the abstractions ($P, C$) for compositional generalization. For example, training agents could include ambulance plus pedestrian and police car plus pedestrian. In testing, the algorithm may need to plan with ambulance plus police car.\\n\\n2. LogiCity supports more realistic multi-agent interaction. For instance, if the controlled agent arrives at an intersection later than other agents, it must wait, resulting in a lower trajectory return; if it speeds up to arrive earlier, others yield, ending up with a higher score. This encourages learning both ego rules and world transitions with multiple agents (how to plan smartly by forecasting).\\n\\n4.2 Visual Action Prediction\\n\\nUnlike SPF, which is long-horizon and assumes access to the groundings, the V AP task is step-wise and requires reasoning on high-dimensional data [13, 20]. As shown in Figure 2 (b), inputs to V AP models include the rendered image $I$ (We omit the time superscript $t$ here) and information for $N$ agents $[h_{1}, \\\\ldots, h_{N}] \\\\in \\\\mathbb{R}^{N \\\\times 9}$, where $h_{n} = [x_{n}, y_{n}, w_{n}, h_{n}, d_{n}, p]^{\\\\top}$ consists of location $(x_{n}, y_{n})$, scale $(w_{n}, h_{n})$, one-hot direction $d_{n} \\\\in \\\\mathbb{R}^{4}$, and normalized priority $p$. During training, the models learn to reason and output the action vectors $\\\\hat{a}_{n}$ for all the $N$ agents with ground-truth supervision. During test, the models are expected to predict the actions for different sets of agents. This task is approached as a two-step graph reasoning problem [7, 38]. As illustrated in Figure 2 (b), a grounding module first predicts interpretable grounded predicate truth values, which are then used by a reasoning module to deduce action predicates. To be more specific, a visual encoder [2, 71] first extracts global features $F$ from $I$. Agent-centric regional features are derived from ROIAlign [72], which resizes the image-space bounding boxes to match the feature scale and then crops the global feature using bilinear interpolation. The resulting regional features for each agent, denoted as $f_{n}$, are fed into unary prediction heads to generate unary predicate groundings. Meanwhile, binary prediction heads utilize paired agent information to predict binary predicates. Together, the groundings form a scene graph $\\\\hat{G}$, which a graph reasoning engine [7, 38] uses to predict actions $\\\\hat{a}_{n}$.\\n\\nSimilar to the SPF task, the V AP task also features different train/test agent compositions, necessitating the model's ability to learn abstractions. Additionally, unlike reasoning on structured, symbolic knowledge graphs [7, 11, 21], the diverse visual appearances in LogiCity introduce high-level perceptual noise, adding an extra challenge for reasoning algorithms.\\n\\n5 Experiments\\n\\n5.1 Safe Path Following\\n\\nWe first construct a ground-truth rule-based agent as Oracle and a Random agent as the worst baseline, showing their results in Table 2. Two branches of methods are considered here, behavior cloning (BC) and reinforcement learning (RL), respectively. All the experiments in SPF are conducted on a single NVIDIA RTX 3090 Ti GPU with 32 AMD Ryzen 5950X 16-core processors.\\n\\nBaselines. In the BC branch, we provide oracle trajectories as demonstration and consider the inductive logical programming (ILP) algorithms [10], including symbolic ones [10, 36] and NeSy ones [7, 11]. We also construct a multi-layer perceptron (MLP) and graph neural networks (GNN) [38] as the pure neural baselines. In the RL track, we first build neural agents using various RL algorithms, including on-policy [33, 34], off-policy [7, 35] model-free approaches and model-based algorithms [37, 39]. Since most of the existing NeSy RL methods [52, 53] are carefully engineered for simpler environments, we find it hard to incorporate them into our LogiCity environment.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 7, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":true,\"is_diagram\":false,\"natural_text\":\"Table 2: Empirical results of different methods in SPF task. TSR denotes trajectory success rate (most crucial) and DSR indicates decision success rate. \u2020 means Popper timed out. \u2021 indicates conflict rules will be inducted for different actions. See our website and Appendix F for episode visualizations.\\n\\n| Supervision Mode | Model      | Easy | Medium | Hard | Expert |\\n|------------------|------------|------|--------|------|--------|\\n|                  | Metric     | TSR  | DSR    | Score| TSR    | DSR    | Score| TSR    | DSR    |\\n|                  | TSR        |      |        |      |        |        |      |        |        |\\n|                  | DSR        |      |        |      |        |        |      |        |        |\\n|                  | Score      |      |        |      |        |        |      |        |        |\\n|                  |            |      |        |      |        |        |      |        |        |\\n|                  | N/A        |      |        |      |        |        |      |        |        |\\n| Oracle           | 1.00       | 1.00 | 8.51   | 1.00 | 1.00   | 8.45   | 1.00 | 9.63   | 4.33   |\\n| Random           | 0.07       | 0.00 | 0.00   | 0.06 | 0.00   | 0.00   | 0.04 | 0.01   | 0.00   |\\n| Behavior Cloning | Popper     | 1.00 | 1.00   | 8.51 | N/A    | N/A    | N/A  | N/A    | N/A    |\\n|                  | MaxSynth   | 1.00 | 1.00   | 8.51 | 0.25   | 0.67   | 3.18 | 0.15   | 0.60   | 2.96   |\\n|                  | HRI        | 0.37 | 0.78   | 4.40 | 0.48   | 0.70   | 4.75 | 0.08   | 0.15   | 0.59   | N/A    | N/A    | N/A    | N/A    |\\n|                  | NLM        | 0.75 | 1.00   | 7.29 | 0.30   | 0.67   | 3.24 | 0.24   | 0.27   | 2.00   |\\n|                  | GNN        | 0.26 | 0.39   | 2.58 | 0.17   | 0.24   | 1.31 | 0.19   | 0.39   | 2.19   |\\n|                  | MLP        | 0.61 | 0.63   | 4.80 | 0.20   | 0.19   | 1.22 | 0.12   | 0.13   | 0.81   |\\n|                  | Reinforcement Learning | NLM-DQN   | 0.53 | 0.96   | 5.93 | 0.47   | 0.67   | 4.40 | 0.29   | 0.40   | 2.69   |\\n|                  |            | MB-shooting | 0.24 | 0.44   | 2.55 | 0.20   | 0.17   | 1.18 | 0.16   | 0.17   | 1.26   |\\n|                  |            | DreamerV2  | 0.07 | 0.43   | 2.86 | 0.02   | 0.21   | 0.67 | 0.00   | 0.30   | 1.45   |\\n|                  |            | DQN        | 0.35 | 0.89   | 4.80 | 0.42   | 0.59   | 3.72 | 0.09   | 0.12   | 0.63   |\\n|                  |            | PPO        | 0.33 | 0.36   | 2.83 | 0.09   | 0.25   | 0.88 | 0.02   | 0.38   | 1.57   |\\n|                  |            | A2C        | 0.10 | 0.16   | 1.00 | 0.06   | 0.29   | 1.07 | 0.00   | 0.14   | 0.46   |\\n\\nFigure 3: Results for different agent configurations in medium and hard modes of SPF task. We report the average of DSR and TSR here.\\n\\nFigure 4: Continual learning results for MLP and NLM [7]. The results achieved by training from scratch are reported in dashed lines.\\n\\n5.1.1 Empirical Evaluation\\nWe present the empirical results in Table 2, showing LogiCity\u2019s ability to vary reasoning complexity. In the BC track, symbolic methods [10, 36] perform well in the easy mode but struggle with more\"}"}
{"id": "M32Ldpp4Oy", "page_num": 8, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table 3: Empirical results of different methods and settings in V AP task (Modular is more crucial).\\n\\nWe report the recall rate for each action, averaged accuracy (aAcc.), and weighted accuracy (wAcc.).\\n\\n| Supervision Config | Model | Mode | Easy | Hard |\\n|--------------------|-------|------|------|------|\\n| Slow Normal Stop   | Fixed GNN [38] | Modular | 0.45 | 0.53 | 0.63 | 0.54 | 0.54 | 0.44 | 0.47 | 0.09 | 0.57 | 0.49 | 0.23 |\\n| Slow Normal Fast   | NLM [7]  | Modular | 0.31 | 0.39 | 0.57 | 0.48 | 0.45 | 0.24 |\\n| Random GNN         | Fixed GNN [38] | Modular | 0.52 | 0.26 | 0.63 | 0.48 | 0.48 | 0.28 |\\n| NLM                | Random GNN [38] | Modular | 0.54 | 0.15 | 0.41 | 0.36 |\\n| E2E                | Fixed GNN [38] | Random | 0.76 | 0.46 | 0.62 | 0.27 | 0.99 | 0.72 | 0.40 |\\n| NLM                | Random GNN [38] | Random | 0.78 | 0.33 | 0.69 | 0.37 | 1.00 | 0.71 | 0.46 |\\n| E2E                | NLM [7]   | Random | 0.88 | 0.14 | 0.66 | 0.52 | 1.00 | 0.65 |\\n| NLM                | NLM [7]   | Random | 0.90 | 0.25 | 0.67 | 0.45 | 1.00 | 0.69 | 0.50 |\\n\\nFigure 5: Diverse renderings from LogiCity. Note that every city has distinct agent compositions.\\n\\nComplex scenarios from the medium mode. NeSy rule induction methods [7, 11] outperform pure neural MLP/GNN approaches. In the RL track, off-policy methods [7, 35, 37, 39] are more stable and effective than on-policy methods [33, 34] due to the high variance in training episodes affecting policy learning. Additionally, NeSy framework [7, 35] outperform pure neural agents [35, 37] by finding better representations from abstract observations. To illustrate the compositional challenge in LogiCity, we compare results across different agent sets in Figure 3. Models trained on the training agent configuration show significant performance drops when transferred to test agents, but NeSy methods [7, 35] are less affected. We discuss more observation spaces in Appendix D.\\n\\n5.1.2 Continual Learning\\n\\nUsing LogiCity, we also examine how much data different models need to continually learn new abstract rules. We initialize models with the converged weights from easy mode and progressively provide data from medium mode rules. The results from three random runs for MLP and NLM [7] are shown in Figure 4, alongside results from models trained from scratch. NLM reaches the best result with 30% of the target domain data, demonstrating superior continual learning capabilities.\\n\\n5.2 Visual Action Prediction\\n\\nBaselines. As there exists very limited literature [73] studying FOL reasoning on RGB images, we self-construct two baselines using GNN [38] and NLM [7] as the reasoning engine, respectively. For fairness, we use the same visual encoder [2, 71] and hyperparameter configurations. We train and test all the models on a single NVIDIA H100 GPU. See Appendix A for more details.\\n\\nSettings. We explore four distinct training settings for the two methods. Regarding supervision signals, modular supervision offers ground truth for both scene graphs and final actions, training the two modules separately. This setting requires interpretable meanings of the scene graph elements.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 9, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Figure 6: Continual learning results of GNN [38] and NLM [7] in the V AP task. The mean results from three random runs are displayed in solid lines and the variance is reported as the semi-transparent regions. We also show the results of the models trained from scratch using 100% data in dashed lines.\\n\\nWe also explore end-to-end supervision (E2E), which provides guidance only on the final actions. For the training agent sets, we experiment with both fixed and random settings.\\n\\nModes and Datasets.\\n\\nWe present two modes for V AP task, namely easy and hard. In easy mode, rules constrain only Slow and Stop actions with few concepts. The hard mode includes the easy abstractions and additional constraints for all four actions, with a natural data imbalance making the Fast action rarer. We display some examples in Figure 5. More details are included in Appendix B.\\n\\nMetrics.\\n\\nWe first report the action-wise recall rate (true positives divided by the number of samples). The average accuracy (aAcc.) is the correct prediction rate across all the test samples. To highlight the data imbalance issue, we also introduce weighted accuracy (wAcc.), defined as\\n\\n\\\\[\\n\\\\text{wAcc} = \\\\frac{\\\\sum \\\\text{Recall}_a}{\\\\sum \\\\text{N}_a}, \\\\quad \\\\text{wAcc}_a = \\\\frac{\\\\text{Recall}_a}{\\\\text{N}_a}\\n\\\\]\\n\\nwhere Recall_a is the recall rate for action a and N_a is the number of samples for action a. This metric assigns larger weights to less frequent actions.\\n\\n5.2.1 Empirical Evaluation\\n\\nThe empirical results for the V AP task are shown in Table 3, highlighting LogiCity's ability to adjust reasoning complexity. We observe that while GNN [38] slightly outperforms NLM [7] in the easy mode, NLM excels in the hard mode. We also find that random agent configurations improve the performance of both methods. The data imbalance poses an additional challenge, with the Stop action having \\\\(2 \\\\times \\\\sim 6 \\\\times\\\\) higher recall than the Fast action. Besides, the modular setting proves more challenging than the end-to-end (E2E) setting, as the modular system is more sensitive to perceptual noise. We further investigate this issue quantitatively in Appendix E.\\n\\n5.2.2 Continual Learning\\n\\nSimilar to the SPF task, we investigate how much data the methods need to continually learn abstract rules in the V AP task. The models pre-trained in easy mode are used as the initial weights, which are continually trained with different sets of data from the hard mode. The data are sampled for 3 times and the mean and variance of the results are reported in Figure 6, where we also report the results from the models trained with 100% data from scratch as dashed lines (\u201cupper bound\u201d). We observe that the two methods could struggle to reach their \u201cupper bound\u201d if fixed training agents are used. For the random agent setting, NLM [7] could progressively learn new rules and reach its \u201cupper bound\u201d with around 50% data while GNN fails even with 100% data.\\n\\n5.2.3 How Do LLMs and Human Perform in LogiCity?\\n\\nRecent years have witnessed the increasing use of LLMs for decision making [74\u201377], concept understanding [78\u201380], and logical reasoning [81\u201384]. In this section, we investigate the capability of LLMs [1] and Human to solve the (subset of) V AP task in LogiCity through in-context demonstrations. Since we focus only on logical reasoning, true groundings are provided in natural language documents without perceptual noise. Specifically, we first convert every scene (frame) into a paragraph of natural language description (see Figure B for examples). For each entity within the frame, given the scene descriptions, we ask LLMs to decide its next action from options (\u201cA. Slow\u201d, \u201cB. Normal\u201d, \u201cC. Fast\u201d, \u201cD. Stop\u201d). Since the entire test set of V AP is huge, we randomly selected a \u201cMini\u201d test with 117 questions about the concept IsTiro and IsReckless to construct demonstrations for 9\"}"}
{"id": "M32Ldpp4Oy", "page_num": 10, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"in-context learning, we randomly choose 5-shot samples from the training document used by human participants and provide question-answer pairs. The performance of Human, GPT-4o, GPT-4o mini, GPT-4, and GPT-3.5 on VAP hard mode test sets are reported in Table 4, where the random sampling results for options are also provided for reference. Based on experts' evaluation, we also display the \u201chardness\u201d of correctly answering each of the choice, where \u2020, \u2020\u2020, and \u2020\u2020\u2020 denote \u201ceasy\u201d, \u201cmedium\u201d, and \u201chard\u201d.\\n\\nTable 4: Action prediction accuracy of different LLMs in the VAP task hard mode.\\n\\n| Method       | Slow | Normal | Fast | Stop | Overall |\\n|--------------|------|--------|------|------|---------|\\n| Human        | 95.0 | 92.9   | 48.0 | 83.3 | 81.2    |\\n| GPT-4o       | 20.0 | 84.1   | 80.0 | 32.2 | 59.0    |\\n| GPT-4        | 75.0 | 57.9   | 25.3 | 2.2  | 39.6    |\\n| GPT-3.5      | 0.0  | 82.5   | 16.0 | 0.0  | 33.0    |\\n| GPT-4o mini  | 0.0  | 2.4    | 86.7 | 40.0 | 29.6    |\\n| Random       | 21.0 | 23.8   | 28.8 | 27.3 | 25.3    |\\n\\nWe observe that the latest GPT-4o shows significantly better in-context learning capability than previous GPT-4 and GPT-3.5, surpassing them by over 20% in terms of overall accuracy. The results also demonstrate the importance of model scale for reasoning task, where GPT-4o mini falls far behind GPT-4o. However, it is still far from the inductive logical reasoning capability of Human, especially for harder reasoning choices like \u201cStop\u201d. Interestingly, the distribution of the decisions demonstrates that GPT-4 has a strong bias towards a conservative decision, which tends to predict \u201cSlow\u201d action. GPT-4o is better at reasoning in the context, yet they still tend to use common sense knowledge (e.g., Reckless cars always drive fast). In contrast, human participants tend to learn LogiCity's rules through formal verification, where hypotheses are verified and refined based on training documents. Yet, due to the challenging nature of logical induction, human has made mistakes in learning rules of \u201cStop\u201d (they concluded more general rules than GT), which affects the accuracy of \u201cFast\u201d. This suggests a promising future research direction that could involve coupling LLMs with a formal inductive logical reasoner [10, 36], creating a generation-verification loop. Another intriguing direction is using the LogiCity dataset to conduct Direct Preference Optimization (DPO) [85].\\n\\n6 Discussions\\n\\nConclusion. This work presents LogiCity, a new simulator and benchmark for the NeSy AI community, featuring a dynamic urban environment with various abstractions. LogiCity allows for flexible configuration on the concepts and FOL rules, thus supporting the customization of logical reasoning complexity. Using the LogiCity simulator, we present sequential decision-making and visual reasoning tasks, both emphasizing abstract reasoning. The former task is designed for a long-horizon, multi-agent interaction scenario while the latter focuses on reasoning with perceptual noise. With exhaustive experiments on various baselines, we show that NeSy frameworks [7, 11] can learn abstractions better, and are thus more capable of the compositional generalization tests. Yet, LogiCity also demonstrates the challenge of learning abstractions for all current methods, especially when the reasoning becomes more complex. Specifically, we highlight the crucial difficulty of long-horizon abstract reasoning with multiple agents and that abstract reasoning with high dimensional data remains hard. On the one hand, LogiCity poses a significant challenge for existing approaches with sophisticated reasoning scenarios. On the other hand, it allows for the gradual development of the next-generation NeSy AI by providing a flexible environment.\\n\\nLimitations and Social Impact. One limitation of our simulator is the need for users to pre-define rule sets that are conflict-free and do not cause deadlocks. Future work could involve distilling real-world data into configurations for LogiCity, streamlining this definition process. Currently, LogiCity does not support temporal logic [41]; incorporating temporal constraints on agent behaviors is intriguing. The simulation in LogiCity is deterministic, introducing randomness through fuzzy logic deduction engines [8, 9] could be interesting. For the autonomous driving community [26, 63], LogiCity introduces more various concepts, requiring a model to plan with abstractions, thus addressing a new aspect of real-life challenges. Enhancing the map of LogiCity and expanding the action space could make our simulator a valuable test bed for them. Additionally, since the ontologies and rules in LogiCity can be easily converted into Planning Definite Domain Language (PDDL), LogiCity has potential applications in multi-agent task and motion planning [12, 86]. A potential negative social impact is that rules in LogiCity may not accurately reflect our real life, introducing sim-to-real gap.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 11, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Acknowledgment\\n\\nWe acknowledge the support of the Air Force Research Laboratory (AFRL), DARPA, under agreement number FA8750-23-2-1015. This work used Bridges-2 at PSC through allocation cis220039p from the Advanced Cyberinfrastructure Coordination Ecosystem: Services & Support (ACCESS) program which is supported by NSF grants #2138259, #2138286, #2138307, #2137603, and #213296. This work was also supported, in part, by Individual Discovery Grants from the Natural Sciences and Engineering Research Council of Canada, and the Canada CIFAR AI Chair Program. We thank the Microsoft Accelerating Foundation Models Research (AFMR) program for providing generous support of Azure credits. We express sincere gratitude to all the human participants for their valuable time and intelligence devotion in this research. The authors would also like to express sincere gratitude to Jiayuan Mao (MIT), Dr. Patrick Emami (NREL), and Dr. Peter Graf (NREL) for their valuable feedback and suggestions on the early draft of this work.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 12, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"[1] J. Achiam, S. Adler, S. Agarwal, L. Ahmad, I. Akkaya, F. L. Aleman, D. Almeida, J. Altenschmidt, S. Altman, S. Anadkat et al., \\\"GPT-4 technical report,\\\" arXiv preprint arXiv:2303.08774, 2023.\\n\\n[2] K. He, X. Zhang, S. Ren, and J. Sun, \\\"Deep Residual Learning for Image Recognition,\\\" in Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), 2016, pp. 770\u2013778.\\n\\n[3] J. B. Tenenbaum, C. Kemp, T. L. Griffiths, and N. D. Goodman, \\\"How to Grow a Mind: Statistics, Structure, and Abstraction,\\\" Science, pp. 1279\u20131285, 2011.\\n\\n[4] B. M. Lake, R. Salakhutdinov, and J. B. Tenenbaum, \\\"Human-level Concept Learning through Probabilistic Program Induction,\\\" Science, pp. 1332\u20131338, 2015.\\n\\n[5] E. S. Spelke and K. D. Kinzler, \\\"Core Knowledge,\\\" Developmental Science, pp. 89\u201396, 2007.\\n\\n[6] H. Kautz, \\\"The third AI summer: AAI Robert S. Engelmore Memorial Lecture,\\\" AI Magazine, pp. 105\u2013125, 2022.\\n\\n[7] H. Dong, J. Mao, T. Lin, C. Wang, L. Li, and D. Zhou, \\\"Neural Logic Machines,\\\" in Proceedings of the International Conference on Learning Representations (ICLR), 2019, pp. 1\u201310.\\n\\n[8] D. Tran, M. D. Hoffman, R. A. Saurous, E. Brevdo, K. Murphy, and D. M. Blei, \\\"Deep Probabilistic Programming,\\\" in Proceedings of the International Conference on Learning Representations (ICLR), 2017, pp. 1\u201310.\\n\\n[9] R. Riegel, A. Gray, F. Luus, N. Khan, N. Makondo, I. Y. Akhalwaya, H. Qian, R. Fagin, F. Barahona, U. Sharma, S. Ikbal, H. Karanam, S. Neelam, A. Likhyani, and S. Srivastava, \\\"Logical Neural Networks,\\\" arXiv preprint arXiv:2006.13155, 2020.\\n\\n[10] A. Cropper and R. Morel, \\\"Learning Programs by Learning from Failures,\\\" Machine Learning, pp. 801\u2013856, 2021.\\n\\n[11] C. Glanois, Z. Jiang, X. Feng, P. Weng, M. Zimmer, D. Li, W. Liu, and J. Hao, \\\"Neuro-Symbolic Hierarchical Rule Induction,\\\" in Proceedings of the International Conference on Machine Learning (ICML), 2022, pp. 7583\u20137615.\\n\\n[12] R. Chitnis, T. Silver, J. B. Tenenbaum, T. Lozano-Perez, and L. P. Kaelbling, \\\"Learning Neuro-Symbolic Relational Transition Models for Bilevel Planning,\\\" in Proceedings of the IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), 2022, pp. 4166\u20134173.\\n\\n[13] Q. Li, S. Huang, Y. Hong, Y. Chen, Y. N. Wu, and S.-C. Zhu, \\\"Closed Loop Neural-Symbolic Learning Via Integrating Neural Perception, Grammar Parsing, and Symbolic Reasoning,\\\" in Proceedings of the International Conference on Machine Learning (ICML), 2020, pp. 5884\u20135894.\\n\\n[14] S. Bhagat, S. Stepputtis, J. Campbell, and K. Sycara, \\\"Sample-Efficient Learning of Novel Visual Concepts,\\\" in Proceedings of the Conference on Lifelong Learning Agents (CoLLAs), 2023, pp. 637\u2013657.\\n\\n[15] S. Li, S. Bhagat, J. Campbell, Y. Xie, W. Kim, K. Sycara, and S. Stepputtis, \\\"ShapeGrasp: Zero-Shot Task-Oriented Grasping with Large Language Models through Geometric Decomposition,\\\" 2024.\\n\\n[16] C. Zhang, S. Stepputtis, J. Campbell, K. Sycara, and Y. Xie, \\\"HiKER-SGG: Hierarchical Knowledge Enhanced Robust Scene Graph Generation,\\\" arXiv preprint arXiv:2403.12033, 2024.\\n\\n[17] J. Hsu, J. Mao, and J. Wu, \\\"NS3D: Neuro-Symbolic Grounding of 3D Objects and Relations,\\\" in Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), 2023, pp. 2614\u20132623.\\n\\n[18] J. Mao, C. Gan, P. Kohli, J. B. Tenenbaum, and J. Wu, \\\"The Neuro-Symbolic Concept Learner: Interpreting Scenes, Words, and Sentences from Natural Supervision,\\\" in Proceedings of the International Conference on Learning Representations (ICLR), 2019, pp. 1\u201310.\\n\\n[19] C. Wang, K. Ji, J. Geng, Z. Ren, T. Fu, F. Yang, Y. Guo, H. He, X. Chen, Z. Zhan et al., \\\"Imperative Learning: A Self-supervised Neural-Symbolic Learning Framework for Robot Autonomy,\\\" arXiv preprint arXiv:2406.16087, 2024.\\n\\n[20] P.-W. Wang, P. Donti, B. Wilder, and Z. Kolter, \\\"SATNet: Bridging Deep Learning and Logical Reasoning using a Differentiable Satisfiability Solver,\\\" in Proceedings of the International Conference on Machine Learning (ICML), 2019, pp. 6545\u20136554.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 13, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"[21] S. Badreddine, A. d. Garcez, L. Serafini, and M. Spranger, \u201cLogic Tensor Networks,\u201d Artificial Intelligence, p. 103649, 2022.\\n\\n[22] J. Johnson, B. Hariharan, L. Van Der Maaten, L. Fei-Fei, C. Lawrence Zitnick, and R. Girshick, \u201cCLEVR: A Diagnostic Dataset for Compositional Language and Elementary Visual Reasoning,\u201d in Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), 2017, pp. 2901\u20132910.\\n\\n[23] M. C. Machado, M. G. Bellemare, E. Talvitie, J. Veness, M. Hausknecht, and M. Bowling, \u201cRevisiting the Arcade Learning Environment: Evaluation Protocols and Open Problems for General Agents,\u201d Journal of Artificial Intelligence Research, pp. 523\u2013562, 2018.\\n\\n[24] M. Chevalier-Boisvert, B. Dai, M. Towers, R. Perez-Vicente, L. Willems, S. Lahlou, S. Pal, P. S. Castro, and J. Terry, \u201cMiniGrid & MiniWorld: Modular & Customizable Reinforcement Learning Environments for Goal-Oriented Tasks,\u201d in Proceedings of the Advances in Neural Information Processing Systems (NeurIPS), 2023, pp. 73 383\u201373 394.\\n\\n[25] M. Chevalier-Boisvert, D. Bahdanau, S. Lahlou, L. Willems, C. Saharia, T. H. Nguyen, and Y. Bengio, \u201cBabyAI: First Steps Towards Grounded Language Learning with a Human in the Loop,\u201d in Proceedings of the International Conference on Learning Representations (ICLR), 2019, pp. 1\u201310.\\n\\n[26] E. Leurent, \u201cAn Environment for Autonomous Driving Decision-Making,\u201d https://github.com/eleurent/highway-env, 2018.\\n\\n[27] H. K\u00fcttler, N. Nardelli, A. Miller, R. Raileanu, M. Selvatici, E. Grefenstette, and T. Rockt\u00e4schel, \u201cThe NetHack Learning Environment,\u201d in Proceedings of the Advances in Neural Information Processing Systems (NeurIPS), 2020, pp. 7671\u20137684.\\n\\n[28] L. Fan, G. Wang, Y. Jiang, A. Mandlekar, Y. Yang, H. Zhu, A. Tang, D.-A. Huang, Y. Zhu, and A. Anandkumar, \u201cMineDojo: Building Open-Ended Embodied Agents with Internet-Scale Knowledge,\u201d in Proceedings of the Advances in Neural Information Processing Systems (NeurIPS), 2022, pp. 18 343\u201318 362.\\n\\n[29] R. Kowalski, \u201cPredicate Logic as a Programming Language,\u201d in Proceedings of the IFIP Congress, 1974, pp. 569\u2013574.\\n\\n[30] D. Podell, Z. English, K. Lacey, A. Blattmann, T. Dockhorn, J. M\u00fcller, J. Penna, and R. Rombach, \u201cSDXL: Improving Latent Diffusion Models for High-Resolution Image Synthesis,\u201d arXiv preprint arXiv:2307.01952, 2023.\\n\\n[31] R. Rombach, A. Blattmann, D. Lorenz, P. Esser, and B. Ommer, \u201cHigh-Resolution Image Synthesis with Latent Diffusion Models,\u201d in Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), 2021, pp. 10 684\u201310 695.\\n\\n[32] C. Meng, Y. He, Y. Song, J. Song, J. Wu, J.-Y. Zhu, and S. Ermon, \u201cSDEdit: Guided Image Synthesis and Editing with Stochastic Differential Equations,\u201d in Proceedings of the International Conference on Learning Representations (ICLR), 2022.\\n\\n[33] J. Schulman, F. Wolski, P. Dhariwal, A. Radford, and O. Klimov, \u201cProximal Policy Optimization Algorithms,\u201d arXiv preprint arXiv:1707.06347, 2017.\\n\\n[34] V. Mnih, A. P. Badia, M. Mirza, A. Graves, T. Lillicrap, T. Harley, D. Silver, and K. Kavukcuoglu, \u201cAsynchronous Methods for Deep Reinforcement Learning,\u201d in Proceedings of the International Conference on Machine Learning (ICML), 2016, pp. 1928\u20131937.\\n\\n[35] V. Mnih, K. Kavukcuoglu, D. Silver, A. Graves, I. Antonoglou, D. Wierstra, and M. Riedmiller, \u201cPlaying Atari with Deep Reinforcement Learning,\u201d arXiv preprint arXiv:1312.5602, 2013.\\n\\n[36] C. Hocquette, A. Niskanen, M. J\u00e4rvisalo, and A. Cropper, \u201cLearning MDL Logic Programs from Noisy Data,\u201d in Proceedings of the AAAI Conference on Artificial Intelligence (AAAI), 2024, pp. 10 553\u201310 561.\\n\\n[37] A. Nagabandi, K. Konolige, S. Levine, and V. Kumar, \u201cDeep Dynamics Models for Learning Dexterous Manipulation,\u201d in Proceedings of the Annual Conference on Robot Learning (CoRL), 2020, pp. 1101\u20131112.\\n\\n[38] K. Xu, W. Hu, J. Leskovec, and S. Jegelka, \u201cHow Powerful Are Graph Neural Networks?\u201d in Proceedings of the International Conference on Learning Representations (ICLR), 2019, pp. 1\u201310.\\n\\n[39] D. Hafner, T. P. Lillicrap, M. Norouzi, and J. Ba, \u201cMastering Atari with Discrete World Models,\u201d in Proceedings of the International Conference on Learning Representations (ICLR), 2020, pp. 1\u201310.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 14, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"[40] J. Xu, Z. Zhang, T. Friedman, Y. Liang, and G. Broeck, \u201cA Semantic Loss Function for Deep Learning with Symbolic Knowledge,\u201d in Proceedings of the International Conference on Machine Learning (ICML), 2018, pp. 5502\u20135511.\\n\\n[41] Y. Xie, Z. Xu, M. S. Kankanhalli, K. S. Meel, and H. Soh, \u201cEmbedding Symbolic Knowledge into Deep Networks,\u201d in Proceedings of the Advances in Neural Information Processing Systems (NeurIPS), 2019, pp. 1\u20139.\\n\\n[42] J. Huang, Z. Li, B. Chen, K. Samel, M. Naik, L. Song, and X. Si, \u201cScallop: From Probabilistic Deductive Databases to Scalable Differentiable Reasoning,\u201d in Proceedings of the Advances in Neural Information Processing Systems (NeurIPS), 2021, pp. 25134\u201325145.\\n\\n[43] R. Wang, J. Mao, J. Hsu, H. Zhao, J. Wu, and Y. Gao, \u201cProgrammatically Grounded, Compositionally Generalizable Robotic Manipulation,\u201d in Proceedings of the International Conference on Learning Representations (ICLR), 2022, pp. 1\u20139.\\n\\n[44] J. Hsu, J. Mao, J. Tenenbaum, and J. Wu, \u201cWhat's Left? Concept Grounding with Logic-Enhanced Foundation Models,\u201d in Proceedings of the Advances in Neural Information Processing Systems (NeurIPS), 2023, pp. 38798\u201338814.\\n\\n[45] Z. Yang, A. Ishay, and J. Lee, \u201cNeurASP: Embracing Neural Networks into Answer Set Programming,\u201d in Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI), 2020, pp. 1755\u20131762.\\n\\n[46] T. Winters, G. Marra, R. Manhaeve, and L. De Raedt, \u201cDeepStochLog: Neural Stochastic Logic Programming,\u201d in Proceedings of the AAAI Conference on Artificial Intelligence (AAAI), 2022, pp. 10090\u201310100.\\n\\n[47] E. van Krieken, T. Thanapalasingam, J. Tomczak, F. Van Harmelen, and A. Ten Teije, \u201cA-NESI: A Scalable Approximate Method for Probabilistic Neurosymbolic Inference,\u201d Proceedings of the Advances in Neural Information Processing Systems (NeurIPS), pp. 24586\u201324609, 2023.\\n\\n[48] W. Liu, G. Chen, J. Hsu, J. Mao, and J. Wu, \u201cLearning Planning Abstractions from Language,\u201d in Proceedings of the International Conference on Learning Representations (ICLR), 2022, pp. 1\u20139.\\n\\n[49] R. Evans and E. Grefenstette, \u201cLearning Explanatory Rules from Noisy Data,\u201d Journal of Artificial Intelligence Research, pp. 1\u201364, 2018.\\n\\n[50] F. Yang, Z. Yang, and W. W. Cohen, \u201cDifferentiable Learning of Logical Rules for Knowledge Base Reasoning,\u201d in Proceedings of the Advances in Neural Information Processing Systems (NeurIPS), 2017, pp. 1\u201310.\\n\\n[51] Y. Yang and L. Song, \u201cLearn to Explain Efficiently via Neural Logic Inductive Learning,\u201d in Proceedings of the International Conference on Learning Representations (ICLR), 2019, pp. 1\u201310.\\n\\n[52] P. Sen, B. W. de Carvalho, R. Riegel, and A. Gray, \u201cNeuro-Symbolic Inductive Logic Programming with Logical Neural Networks,\u201d in Proceedings of the AAAI Conference on Artificial Intelligence (AAAI), 2022, pp. 8212\u20138219.\\n\\n[53] Q. Delfosse, H. Shindo, D. Dhami, and K. Kersting, \u201cInterpretable and Explainable Logical Policies via Neurally Guided Symbolic Abstraction,\u201d in Proceedings of the Advances in Neural Information Processing Systems (NeurIPS), 2023, pp. 50838\u201350858.\\n\\n[54] D. Kimura, M. Ono, S. Chaudhury, R. Kohita, A. Wachi, D. J. Agravante, M. Tatsubori, A. Munawar, and A. Gray, \u201cNeuro-Symbolic Reinforcement Learning with First-Order Logic,\u201d in Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP), 2021, pp. 3505\u20133511.\\n\\n[55] X. Si, M. Raghothaman, K. Heo, and M. Naik, \u201cSynthesizing Datalog Programs using Numerical Relaxation,\u201d in Proceedings of the International Joint Conference on Artificial Intelligence (IJCAI), 2019, pp. 6117\u20136124.\\n\\n[56] Z. Li, J. Guo, Y. Jiang, and X. Si, \u201cLearning Reliable Logical Rules with SATNet,\u201d Proceedings of the Advances in Neural Information Processing Systems (NeurIPS), pp. 14837\u201314847, 2024.\\n\\n[57] Z. Li, Y. Huang, Z. Li, Y. Yao, J. Xu, T. Chen, X. Ma, and J. Lu, \u201cNeuro-symbolic Learning Yielding Logical Constraints,\u201d Proceedings of the Advances in Neural Information Processing Systems (NeurIPS), pp. 21635\u201321657, 2024.\\n\\n[58] O. Vinyals, T. Ewalds, S. Bartunov, P. Georgiev, A. S. Vezhnevets, M. Yeo, A. Makhzani, H. K\u00fcttler, J. Agapiou, J. Schrittwieser et al., \u201cStarCraft II: A New Challenge for Reinforcement Learning,\u201d arXiv preprint arXiv:1708.04782, 2017.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 15, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"M. Nicolau, D. Perez-Liebana, M. O'Neill, and A. Brabazon, \u201cEvolutionary Behavior Tree Approaches for Navigating Platform Games,\u201d IEEE Transactions on Computational Intelligence and AI in Games, pp. 227\u2013238, 2016.\\n\\nY. A. Sekhavat, \u201cBehavior Trees for Computer Games,\u201d International Journal on Artificial Intelligence Tools, p. 1730001, 2017.\\n\\nM. Iovino, E. Scukins, J. Styrud, P. \u00d6gren, and C. Smith, \u201cA survey of Behavior Trees in Robotics and AI,\u201d Robotics and Autonomous Systems, p. 104096, 2022.\\n\\nM. Colledanchise and P. \u00d6gren, Behavior trees in robotics and AI: An introduction. CRC Press, 2018.\\n\\nA. Dosovitskiy, G. Ros, F. Codevilla, A. Lopez, and V. Koltun, \u201cCARLA: An Open Urban Driving Simulator,\u201d in Proceedings of the Annual Conference on Robot Learning (CoRL), 2017, pp. 1\u201316.\\n\\nD. Krajzewicz, \u201cTraffic Simulation with SUMO\u2014Simulation of Urban Mobility,\u201d Fundamentals of Traffic Simulation, pp. 269\u2013293, 2010.\\n\\nS. Shah, D. Dey, C. Lovett, and A. Kapoor, \u201cAirSim: High-Fidelity Visual and Physical Simulation for Autonomous Vehicles,\u201d in Field and Service Robotics: Results of the 11th International Conference, 2018, pp. 621\u2013635.\\n\\nD. J. Fremont, T. Dreossi, S. Ghosh, X. Yue, A. L. Sangiovanni-Vincentelli, and S. A. Seshia, \u201cScenic: A Language for Scenario Specification and Scene Generation,\u201d in Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2019, pp. 63\u201378.\\n\\nD. J. Fremont, E. Kim, T. Dreossi, S. Ghosh, X. Yue, A. L. Sangiovanni-Vincentelli, and S. A. Seshia, \u201cScenic: A Language for Scenario Specification and Data Generation,\u201d Machine Learning, pp. 3805\u20133849, 2023.\\n\\nE. Vin, S. Kashiwa, M. Rhea, D. J. Fremont, E. Kim, T. Dreossi, S. Ghosh, X. Yue, A. L. Sangiovanni-Vincentelli, and S. A. Seshia, \u201c3D Environment Modeling for Falsification and Beyond with Scenic 3.0,\u201d in Proceedings of the International Conference on Computer Aided Verification (CAV), 2023, pp. 253\u2013265.\\n\\nP. E. Hart, N. J. Nilsson, and B. Raphael, \u201cA Formal Basis for the Heuristic Determination of Minimum Cost Paths,\u201d IEEE Transactions on Systems Science and Cybernetics, pp. 100\u2013107, 1968.\\n\\nL. De Moura and N. Bj\u00f8rner, \u201cZ3: An Efficient SMT Solver,\u201d in Proceedings of the International Conference on Tools and Algorithms for the Construction and Analysis of Systems, 2008, pp. 337\u2013340.\\n\\nT.-Y. Lin, P. Doll\u00e1r, R. Girshick, K. He, B. Hariharan, and S. Belongie, \u201cFeature Pyramid Networks for Object Detection,\u201d in Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), 2017, pp. 2117\u20132125.\\n\\nS. Ren, K. He, R. Girshick, and J. Sun, \u201cFaster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks,\u201d IEEE Transactions on Pattern Analysis and Machine Intelligence, pp. 1137\u20131149, 2016.\\n\\nY. Yang, J. C. Kerce, and F. Fekri, \u201cLogicDef: An Interpretable Defense Framework Against Adversarial Examples via Inductive Scene Graph Reasoning,\u201d in Proceedings of the AAAI Conference on Artificial Intelligence (AAAI), 2022, pp. 8840\u20138848.\\n\\nT. Sumers, S. Yao, K. Narasimhan, and T. Griffiths, \u201cCognitive architectures for language agents,\u201d Transactions on Machine Learning Research, 2024.\\n\\nS. Yao, D. Yu, J. Zhao, I. Shafran, T. L. Griffiths, Y. Cao, and K. Narasimhan, \u201cTree of Thoughts: Deliberate problem solving with large language models,\u201d 2023.\\n\\nM. Li, S. Zhao, Q. Wang, K. Wang, Y. Zhou, S. Srivastava, C. Gokmen, T. Lee, L. E. Li, R. Zhang, W. Liu, P. Liang, L. Fei-Fei, J. Mao, and J. Wu, \u201cEmbodied agent interface: Benchmarking llms for embodied decision making,\u201d 2024.\\n\\nY. Zhai, H. Bai, Z. Lin, J. Pan, S. Tong, Y. Zhou, A. Suhr, S. Xie, Y. LeCun, Y. Ma et al., \u201cFine-tuning large vision-language models as decision-making agents via reinforcement learning,\u201d arXiv preprint arXiv:2405.10292, 2024.\\n\\nG. Rajendran, S. Buchholz, B. Aragam, B. Sch\u00f6lkopf, and P. Ravikumar, \u201cLearning interpretable concepts: Unifying causal representation learning and foundation models,\u201d 2024.\"}"}
{"id": "M32Ldpp4Oy", "page_num": 16, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"J. Luo, T. Ding, K. H. R. Chan, D. Thaker, A. Chattopadhyay, C. Callison-Burch, and R. Vidal, \\\"Pace: Parsimonious concept engineering for large language models,\\\" 2024.\\n\\nD. P. Jeong, Z. C. Lipton, and P. Ravikumar, \\\"Llm-select: Feature selection with large language models,\\\" 2024.\\n\\nC. Hu, J. Fu, C. Du, S. Luo, J. J. Zhao, and H. Zhao, \\\"Chatdb: Augmenting llms with databases as their symbolic memory,\\\" 2023.\\n\\nS. Han, H. Schoelkopf, Y. Zhao, Z. Qi, M. Riddell, W. Zhou, J. Coady, D. Peng, Y. Qiao, L. Benson, L. Sun, A. Wardle-Solano, H. Szabo, E. Zubova, M. Burtell, J. Fan, Y. Liu, B. Wong, M. Sailor, A. Ni, L. Nan, J. Kasai, T. Yu, R. Zhang, A. R. Fabbri, W. Kryscinski, S. Yavuz, Y. Liu, X. V. Lin, S. Joty, Y. Zhou, C. Xiong, R. Ying, A. Cohan, and D. Radev, \\\"Folio: Natural language reasoning with first-order logic,\\\" 2022.\\n\\nL. Pan, A. Albalak, X. Wang, and W. Y. Wang, \\\"Logic-lm: Empowering large language models with symbolic solvers for faithful logical reasoning,\\\" 2023.\\n\\nH. Sun, W. Xu, W. Liu, J. Luan, B. Wang, S. Shang, J.-R. Wen, and R. Yan, \\\"Determlr: Augmenting llm-based logical reasoning from indeterminacy to determinacy,\\\" in ACL, 2024.\\n\\nR. Rafailov, A. Sharma, E. Mitchell, C. D. Manning, S. Ermon, and C. Finn, \\\"Direct Preference Optimization: Your Language Model is Secretly a Reward Model,\\\" in Proceedings of the Advances in Neural Information Processing Systems (NeurIPS), 2023, pp. 1\u201310.\\n\\nT. Silver, A. Athalye, J. B. Tenenbaum, T. Lozano-P\u00e9rez, and L. P. Kaelbling, \\\"Learning Neuro-Symbolic Skills for Bilevel Planning,\\\" in Proceedings of the Annual Conference on Robot Learning (CoRL), 2022, pp. 1\u20138.\\n\\nD. P. Kingma and J. Ba, \\\"Adam: A Method for Stochastic Optimization,\\\" arXiv preprint arXiv:1412.6980, 2014.\\n\\nJ. Schulman, S. Levine, P. Abbeel, M. Jordan, and P. Moritz, \\\"Trust Region Policy Optimization,\\\" in Proceedings of the International Conference on Machine Learning (ICML), 2015, pp. 1889\u20131897.\\n\\nA. Raffin, A. Hill, A. Gleave, A. Kanervisto, M. Ernestus, and N. Dormann, \\\"Stable-Baselines3: Reliable Reinforcement Learning Implementations,\\\" Journal of Machine Learning Research, pp. 1\u20138, 2021.\\n\\nJ. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-Fei, \\\"Imagenet: A Large-Scale Hierarchical Image Database,\\\" in Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), 2009, pp. 248\u2013255.\\n\\nI. Loshchilov and F. Hutter, \\\"Decoupled Weight Decay Regularization,\\\" in Proceedings of the International Conference on Learning Representations (ICLR), 2018, pp. 1\u20139.\\n\\nA. Bordes, N. Usunier, A. Garcia-Duran, J. Weston, and O. Yakhnenko, \\\"Translating Embeddings for Modeling Multi-Relational Data,\\\" in Proceedings of the Advances in Neural Information Processing Systems (NeurIPS), 2013, pp. 1\u20138.\\n\\nK. Toutanova and D. Chen, \\\"Observed Versus Latent Features for Knowledge Base and Text Inference,\\\" in Proceedings of the 3rd workshop on Continuous Vector Space Models and Their Compositionality, 2015, pp. 57\u201366.\\n\\nA. Kirillov, E. Mintun, N. Ravi, H. Mao, C. Rolland, L. Gustafson, T. Xiao, S. Whitehead, A. C. Berg, W.-Y. Lo et al., \\\"Segment Anything,\\\" in Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR), 2023, pp. 4015\u20134026.\\n\\nH. Zhang, P. Zhang, X. Hu, Y.-C. Chen, L. Li, X. Dai, L. Wang, L. Yuan, J.-N. Hwang, and J. Gao, \\\"Glipv2: Unifying Localization and Vision-Language Understanding,\\\" in Proceedings of the Advances in Neural Information Processing Systems (NeurIPS), 2022, pp. 36 067\u201336 080.\"}"}
