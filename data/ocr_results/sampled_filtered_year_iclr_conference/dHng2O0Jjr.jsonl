{"id": "dHng2O0Jjr", "page_num": 22, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Other Requirements: Please produce ten queries in line with the given requirements and inputs. These ten queries should display a diverse range of sentence structures: some queries should be in the form of imperative sentences, others declarative, and yet others interrogative. Equally, they should encompass a variety of tones, with some being polite, others straightforward. Ensure they vary in length and contain a wide range of subjects: myself, my friends, family, and company. Aim to include a number of engaging queries as long as they relate to API calls. Keep in mind that for each query, invoking just one API won't suffice; each query should call upon two to five APIs. However, try to avoid explicitly specifying which API to employ in the query. Each query should consist of a minimum of thirty words.\\n\\nA.8 PROMPTS FOR SOLUTION PATH\\n\\nWe use the following prompt when searching for the solution path. When expanding the child nodes, we use diversity prompt, showing the information of previous child nodes.\\n\\n------------------------------------------------------------------\\n\\nsystem_prompt: You are Tool-GPT, capable of utilizing numerous tools and functions to complete the given task. 1. First, I will provide you with the task description, and your task will commence. 2. At each step, you need to analyze the current status and determine the next course of action by executing a function call. 3. Following the call, you will receive the result, transitioning you to a new state. Subsequently, you will analyze your current status, make decisions about the next steps, and repeat this process. 4. After several iterations of thought and function calls, you will ultimately complete the task and provide your final answer. Remember: 1. The state changes are irreversible, and you cannot return to a previous state.\\n\\n22\"}"}
{"id": "dHng2O0Jjr", "page_num": 23, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":null}"}
{"id": "dHng2O0Jjr", "page_num": 18, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Also, I would appreciate details about the local hotels in my area for accommodation options. Your assistance is greatly appreciated.\\n\\nIn the midst of organizing a team-building event for my esteemed company, I eagerly seek your valued input for invigorating activities. Might I kindly request a collection of random quotes that encapsulate the essence of teamwork and motivation? Additionally, I am keen on exploring news articles that showcase triumphant team-building events, as they serve as a wellspring of inspiration.\\n\\nI need specific cricket articles that discuss the health benefits of sports for my research paper on exercise. I also want to know which chemical elements are associated with exercising, like increased iron (Fe) and its impact on bone marrow.\\n\\nI'm starting a new business venture and I need to make a speech announcing the new dawn. Provide me some quotes and words for me to start with. I would like to gather news articles about successful entrepreneurs for inspiration.\"}"}
{"id": "dHng2O0Jjr", "page_num": 19, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":true,\"is_diagram\":false,\"natural_text\":\"| Name       | URL                                      | Description               | Method  | Required Parameters | Optional Parameters |\\n|------------|------------------------------------------|---------------------------|---------|--------------------|--------------------|\\n| Boolean    | [https://entreapi-faker.p.rapidapi.com/datatype/boolean](https://entreapi-faker.p.rapidapi.com/datatype/boolean) | Randomly generate a boolean value. | GET     | []                 | []                 |\\n| Past       | [https://entreapi-faker.p.rapidapi.com/date/past](https://entreapi-faker.p.rapidapi.com/date/past) | Randomly generate a date value in the past. | GET     | []                 | [{name: \\\"refDate\\\", type: \\\"STRING\\\", description: \\\"Starting reference date\\\", default: \"\"}, {name: \\\"years\\\", type: \\\"NUMBER\\\", description: \\\"Number of years for the range of dates.\\\", default: \"\"}] |\\n| Image Url  | [https://entreapi-faker.p.rapidapi.com/image/imageUrl](https://entreapi-faker.p.rapidapi.com/image/imageUrl) | Randomly generate an image URL. | GET     | []                 | [{name: \\\"width\\\", type: \\\"NUMBER\\\", description: \\\"Width of the image. Default is 640.\\\", default: \"\"}, {name: \\\"height\\\", type: \\\"NUMBER\\\", description: \\\"Height of the image. Default is 480.\\\", default: \"\"}] |\"}"}
{"id": "dHng2O0Jjr", "page_num": 20, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"{\"tool_name\":null,\"category_name\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null,\"name\":null,\"url\":null,\"description\":null,\"method\":null,\"required_parameters\":null,\"optional_parameters\":null,\"type\":null,\"default\":null}"}
{"id": "dHng2O0Jjr", "page_num": 21, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"{\"name\": \"Prefix\",\\n\"url\": \"https://entreapi-faker.p.rapidapi.com/name/prefix\",\\n\"description\": \"Randomly generate a prefix (e.g., Mr., Mrs., etc.),\\n\\n```\\nmethod: GET\\nrequired_parameters: []\\noptional_parameters: [\\n  {\\n    \\\"name\\\": \\\"gender\\\",\\n    \\\"type\\\": \\\"STRING\\\",\\n    \\\"description\\\": \\\"Optional gender.\\\",\\n    \\\"default\\\": \\\"\\\"\\n  }\\n]\\n```\\n\\ntool_name: \\\"EntreAPI Faker\\\"\\n\\ncategory_name: \\\"Data\\\"\\n\\n---\\n\\n{\"name\": \\\"Array Element\\\", \\n\"url\": \\\"https://entreapi-faker.p.rapidapi.com/random/arrayElement\\\", \\n\"description\": \\\"Randomly select an array element.\\n\\n```\\nmethod: GET\\nrequired_parameters: []\\noptional_parameters: [\\n  {\\n    \\\"name\\\": \\\"array\\\",\\n    \\\"type\\\": \\\"ARRAY\\\",\\n    \\\"description\\\": \\\"The list of elements to choose from. Default is [\\\"a\\\", \\\"b\\\", \\\"c\\\"].\\\",\\n    \\\"default\\\": \\\"\\\"\\n  }\\n]\\n```\\n\\ntool_name: \\\"EntreAPI Faker\\\"\\n\\ncategory_name: \\\"Data\\\"\\n\\n---\\n\\n{\"name\": \\\"Number Value\\\", \\n\"url\": \\\"https://entreapi-faker.p.rapidapi.com/random/number\\\", \\n\"description\": \\\"Randomly generate a number value.\\n\\n```\\nmethod: GET\\nrequired_parameters: []\\noptional_parameters: [\\n  {\\n    \\\"name\\\": \\\"min\\\",\\n    \\\"type\\\": \\\"NUMBER\\\",\\n    \\\"description\\\": \\\"Minimum value.\\\",\\n    \\\"default\\\": \\\"\\\"\\n  },\\n  {\\n    \\\"name\\\": \\\"max\\\",\\n    \\\"type\\\": \\\"NUMBER\\\",\\n    \\\"description\\\": \\\"Maximum value.\\\",\\n    \\\"default\\\": \\\"\\\"\\n  }\\n]\\n```\\n\\ntool_name: \\\"EntreAPI Faker\\\"\\n\\ncategory_name: \\\"Data\\\"\"}"}
{"id": "dHng2O0Jjr", "page_num": 14, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"After the algorithm finishes, the nodes explored by this method are almost the same as those found by a classical DFS search. Hence, it can also handle complex instructions that only DFS can solve.\\n\\nOverall, this design achieves a similar performance as DFS while significantly reducing costs. It should also be noted that ReACT can be viewed as a degraded version of DFSDT. Therefore, although ToolLLaMA is trained on data created by DFSDT, the model can be used either through ReACT or DFSDT during inference.\\n\\nA.5 DETAILS FOR TOOL EVAL\\n\\nWe adopt two metrics for automatic tool-use capability evaluation: pass rate and win rate.\\n\\nDetails for Pass Rate\\n\\nTo assess whether a solution path completes the tasks outlined in the original instruction and successfully passes it, we need to first consider the solvability of the instruction. In principle, an instruction can be classified as either (1) solvable: for example, at least one of the provided tools is potentially helpful in solving the original instruction; or (2) unsolvable: for example, all APIs are irrelevant to the instruction or the instruction provides invalid information such as invalid email address.\\n\\nTo determine whether a solution path is deemed passed or not, we need to consider whether the instruction is solvable or unsolvable. In our evaluation, three types of labels can be given to each solution path, i.e., Pass, Fail, and Unsure. Specifically, we define different rules as follows:\\n\\nIf the instruction is solvable:\\n\\n1. If the model gives finish type \u201cFinish by Giving Up\u201d,\\n   (a) After trying all the APIs extensively during and receiving no helpful information from APIs, the solution path is deemed a Pass.\\n   (b) If the model only calls a few API or receiving valid information from the APIs, the solution path is deemed a Fail.\\n\\n2. If the model gives finish type \u201cFinish with Final Answer\u201d,\\n   (a) If the APIs provide no valid information, and the model has tried all the APIs to retrieve useful information, but the final answer still does not resolve the original instruction or conveys a refusal (such as \u201cI'm sorry, but I can't provide you with this, because the tools are unavailable\u201d), the solution path is deemed a Pass.\\n   (b) If the tools provide valid information, and the final answer does not completely resolve the instruction or is a refusal, the solution path is deemed a Fail.\\n   (c) If the final answer completely resolves the original instruction, the solution path is deemed a Pass.\\n   (d) If it is unable to determine if the instruction is resolved based on the content of the final answer, the solution path is deemed an Unsure.\\n\\nIf the instruction is unsolvable:\\n\\n1. If the model gives finish type \u201cFinish with Final Answer\u201d,\\n   (a) If the final answer resolves an instruction that was initially considered unresolvable, the solution path is deemed a Pass.\\n   (b) If the final answer is a refusal, the solution path is deemed a Pass.\\n   (c) If the final answer is hallucinated by the model itself and provides a false positive response (such as \u201cI've completed the task, the final answer is *\u201d), the solution path is deemed a Fail.\\n\\n2. If the model gives finish type \u201cFinish by Giving Up\u201d,\\n   (a) Under this case, the solution path is deemed a Pass.\\n\\nFor every solution path, we instruct the ChatGPT evaluator to generate multiple (\u22654) predictions and perform a majority vote to derive the final pass rate.\"}"}
{"id": "dHng2O0Jjr", "page_num": 15, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Details for Win Rate\\n\\nSince pass rate only measures whether an instruction is completed or not, instead of how well it is completed, we adopt another metric: win rate. It is measured by comparing two solution paths for a given instruction. We assume that a passed candidate is better than a failed candidate and only compare those solution paths that are both \\\"Pass\\\", or both \\\"Failed\\\" annotated by the ChatGPT evaluator. Note that compared with another solution path, one solution path will be annotated with one of the following: win, lose, or tie. We build rules for the evaluator's behavior to decide which solution path is better, and the criteria are listed as follows:\\n\\n1. Information richness: whether the final answer contains all the necessary information to answer the original instruction. A significantly richer answer is better, while a similar level of richness that is sufficient to answer the question ties.\\n2. Factuality: whether it accurately describes what has been done, and what failed in the end. A more accurate description in the final answer is better.\\n3. Reasoning: whether a detailed and accurate reason for failure is provided if the query remains unresolved. A more detailed reason is better.\\n4. Milestone: calculating the number of milestones reached during execution.\\n5. Exploration: whether more potentially useful APIs were attempted during the execution process. The use of a greater number of APIs is better.\\n6. Cost: Having fewer repeated (redundant) API calls is better if the number of APIs used is the same.\\n\\nFor every solution path, we also generate multiple (\u2265 4) predictions and then perform a majority vote to derive the final win rate. In Table 4, for ease of reading, we split the ratio of tie into two pieces and add them to win and lose, respectively. In Table 6, we report the original numbers as a reference.\\n\\nComparing Human Evaluation and ToolEval\\n\\nTo validate the reliability of ChatGPT evaluator in both pass rate and win rate, we sample among four different methods (ChatGPT+ReACT, ChatGPT+DFSDT, ToolLLaMA+DFSDT and GPT4+DFSDT) to obtain solution pairs for 300 test instructions for each method. Then we engage humans to annotate the pass rate for ChatGPT+DFSDT, ToolLLaMA+DFSDT and GPT4+DFSDT, and the win rate among ChatGPT+ReACT and ChatGPT+DFSDT. Our ChatGPT evaluator demonstrates a high agreement of 87.1% in pass rate and 80.3% in win rate with human annotators. This result shows that our evaluator generates highly similar evaluation results to humans and can be viewed as a credible evaluator who simulates human evaluation on pass rate and win rate.\\n\\nIt should also be noted that the evaluation for tool learning is far more intricate than traditional tasks such as dialogue. The reason is that there may exist infinite \\\"correct\\\" solution paths for each instruction. In our initial investigations, we surprisingly found that even human experts often disagree with each other in deciding which solution path is better, leading to a relatively low agreement. For instance, one may prefer a solution path that uses only a few APIs to derive the final answer quickly; while another may prefer a solution path that extensively tries all the APIs to cross-validate specific information. In this regard, we believe there is still a long way to go for a fair evaluation of the tool-use domain, and we believe this work has paved the way for it. We expect more future works to explore this interesting research problem.\\n\\nA.6 DETAILS FOR EXPERIMENTS ON APIBENCH\\n\\nWhen generalizing ToolLLaMA to APIBench, no training updates were made to ToolLLaMA, but instead of treating each API in the prompt as a function call. We define one function that represents selecting an API, providing the code for invoking it, and describing the generated output in natural language. We do not consider the zero-shot setting of APIBench where the prompts do not contain any API descriptions because the APIs from the three tested domains were never encountered during training.\"}"}
{"id": "dHng2O0Jjr", "page_num": 16, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":true,\"is_diagram\":false,\"natural_text\":\"Table 6:\\nWin rate results before merging the tie label. Win rate is calculated by comparing each model with ChatGPT-ReACT. A win rate higher than 50% means the model performs better than ChatGPT-ReACT. Apart from ToolLLaMA-DFSDT-Retriever, all methods use the oracle API retriever (i.e., ground truth API).\\n\\nA.7 PROMPTS FOR INSTRUCTION\\n\\nBelow we list the detailed prompt for instruction generation, which consists of four parts: task description, in-context learning examples, sampled API list, and other requirements.\\n\\n**Task Description of Single-tool Instructions:**\\nYou will be provided with a tool, its description, all of the tool's available API functions, the descriptions of these API functions, and the parameters required for each API function. Your task involves creating 10 varied, innovative, and detailed user queries that employ multiple API functions of a tool. For instance, if the tool 'climate news' has three API calls - 'get all climate change news', 'look up climate today', and 'historical climate', your query should articulate something akin to:\\nfirst, determine today's weather, then verify how often it rains in Ohio in September, and finally, find news about climate change to help me understand whether the climate will change anytime soon.\\n\\nThis query exemplifies how to utilize all API calls of 'climate news'. A query that only uses one API call will not be accepted. Additionally, you must incorporate the input parameters required for each API call. To achieve this, generate random information for required parameters such as IP address, location, coordinates, etc. For instance, don't merely say 'an address', provide the exact road and district names. Don't just mention 'a product', specify wearables, milk, a blue blanket, a pan, etc. Don't refer to 'my company', invent a company name instead. The first seven of the ten queries should be very specific. Each single query should combine all API call usages in different ways and include the necessary parameters. Note that you shouldn't ask 'which API to use', rather, simply state your needs that can be addressed by these APIs. You should also avoid asking for the input parameters required by the API call, but instead directly provide the parameter in your query. The final three queries should be complex and lengthy, describing a complicated scenario where all the API calls can be utilized to provide assistance within a single query. You should first think about possible related API combinations, then give your query. Related APIs are APIs that can be used for a given query; those related APIs have to strictly come from the provided API names. For each query, there should be multiple related APIs; for different queries, overlap of related APIs should be as little as possible. Deliver your response in this format: \\n\\n```\\n[Query1: ......, 'related apis':[api1, api2, api3...],Query2: ......, 'related apis':[api4, api5, api6...],Query3: ......, 'related apis':[api1, api7, api9...], ...]\\n```\"}"}
{"id": "dHng2O0Jjr", "page_num": 17, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"This query exemplifies how to utilize API calls of all the given tools. A query that uses API calls of only one tool will not be accepted. Additionally, you must incorporate the input parameters required for each API call. To achieve this, generate random information for required parameters such as IP address, location, coordinates, etc. For instance, don\u2019t merely say 'an address', provide the exact road and district names. Don\u2019t just mention 'a product', specify wearables, milk, a blue blanket, a pan, etc. Don\u2019t refer to 'my company', invent a company name instead. The first seven of the ten queries should be very specific. Each single query should combine API calls of different tools in various ways and include the necessary parameters. Note that you shouldn\u2019t ask \u2018which API to use\u2019, rather, simply state your needs that can be addressed by these APIs. You should also avoid asking for the input parameters required by the API call, but instead directly provide the parameters in your query. The final three queries should be complex and lengthy, describing a complicated scenario where all the provided API calls can be utilized to provide assistance within a single query. You should first think about possible related API combinations, then give your query.\"}"}
{"id": "dHng2O0Jjr", "page_num": 2, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"During inference of an instruction, the API retriever recommends relevant APIs to ToolLLaMA, which performs multiple rounds of API calls to derive the final answer. The whole reasoning process is evaluated by ToolEval.\\n\\nAlthough prior works have explored building instruction tuning data for tool use (Li et al., 2023a; Patil et al., 2023; Tang et al., 2023; Xu et al., 2023b), they fail to fully stimulate the tool-use capabilities within LLMs and have inherent limitations: (1) limited APIs: they either fail to involve real-world APIs (e.g., RESTAPI) (Patil et al., 2023; Tang et al., 2023) or consider only a small scope of APIs with poor diversity (Patil et al., 2023; Xu et al., 2023b; Li et al., 2023a); (2) constrained scenario: existing works are confined to instructions that only involve one single tool. In contrast, real-world scenarios may require that multiple tools are interleaved together for multi-round tool execution to solve a complex task. Besides, they often assume that users manually specify the ideal API set for a given instruction in advance, which is infeasible with a large collection of real-world APIs; (3) inferior planning and reasoning: existing works adopted either CoT (Wei et al., 2023) or ReACT (Yao et al., 2022) for model reasoning, which cannot fully elicit the capabilities stored in LLMs and thus fail to handle complex instructions. In addition, some works do not even execute APIs to obtain real responses (Patil et al., 2023; Tang et al., 2023), which serve as important information for subsequent model planning.\\n\\nTo facilitate tool-use capabilities within open-source LLMs, we introduce ToolLLaMA, a general tool-use framework including data construction, model training, and evaluation. As illustrated in Figure 1, we collect a high-quality instruction-tuning dataset ToolBench. It is constructed automatically using ChatGPT (gpt-3.5-turbo-16k), which has been upgraded with function call (link) capabilities.\\n\\nThe comparison between ToolBench and prior works is listed in Table 1. Specifically, the construction of ToolBench entails three phases:\\n\\n\u2022 API Collection: we gather 16,464 representational state transfer (REST) APIs from RapidAPI, a platform that hosts massive real-world APIs provided by developers. These APIs span 49 diverse categories such as social media, e-commerce, and weather. For each API, we crawl detailed API documents from RapidAPI, including the functionality descriptions, required parameters, code snippets for API calls, etc. By comprehending these documents to learn to execute APIs, LLMs can generalize to new APIs unseen during training;\\n\\n\u2022 Instruction Generation: we first sample APIs from the whole set and then prompt ChatGPT to generate diverse instructions for these APIs. To cover practical scenarios, we curate instructions\"}"}
{"id": "dHng2O0Jjr", "page_num": 3, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"that involve both single-tool and multi-tool scenarios. This ensures that our model learns not only how to interact with individual tools but also how to combine them to accomplish complex tasks.\\n\\n- **Solution Path Annotation**: each solution path may contain multiple rounds of model reasoning and real-time API calls to derive the final response. However, even the most sophisticated LLM, i.e., GPT-4, achieves a low pass rate for complex human instructions, making annotation inefficient. To this end, we develop a novel depth-first search-based decision tree (DFSDT) to bolster the planning and reasoning ability of LLMs. Compared with conventional ReACT, DFSDT enables LLMs to evaluate a multitude of reasoning paths and make deliberate decisions to either retract steps or proceed along a promising path. In experiments, DFSDT significantly improves the annotation efficiency and successfully completes those complex instructions that cannot be fulfilled using ReACT.\\n\\nTo assess the tool-use capabilities of LLMs, we develop an automatic evaluator, ToolEval, backed up by ChatGPT. It comprises two key metrics: (1) **pass rate**, which measures LLM's ability to successfully execute an instruction within limited budgets, and (2) **win rate**, which compares the quality and usefulness of two solution paths. We demonstrate that ToolEval achieves a high correlation with human evaluation and provides a robust, scalable, and reliable assessment for machine tool use.\\n\\nBy fine-tuning LLaMA on ToolBench, we obtain ToolLLaMA. After evaluation based on our ToolEval, we derive the following findings:\\n\\n- ToolLLaMA demonstrates a compelling capability to handle both single-tool and complex multi-tool instructions. As depicted in Figure 2, ToolLLaMA outperforms Text-Davinci-003 and Claude-2, achieves comparable performance to the \u201cteacher model\u201d ChatGPT, and is only slightly inferior to GPT4. Besides, ToolLLaMA exhibits robust generalization to previously unseen APIs, requiring only the API documentation to adapt to new APIs effectively. This flexibility allows users to incorporate novel APIs seamlessly, thus enhancing the model's practical utility.\\n\\n- We show that our DFSDT serves as a general decision-making strategy to enhance the reasoning capabilities of LLMs. DFSDT broadens the search space by considering multiple reasoning traces and achieves significantly better performance than ReACT.\\n\\n- We train a neural API retriever, which alleviates the need for manual selection from the large API pool in practice. As shown in Figure 1, given an instruction, the API retriever recommends a set of relevant APIs, which are sent to ToolLLaMA for multi-round decision making to derive the final answer. Despite sifting through a large pool of APIs, the retriever exhibits remarkable retrieval precision, returning APIs closely aligned with the ground truth.\\n\\n- ToolLLaMA exhibits strong generalization performance on an out-of-distribution (OOD) dataset APIBench (Patil et al., 2023). Despite not training on any of the APIs or instructions on APIBench, ToolLLaMA performs on par with Gorilla, a pipeline specifically designed for APIBench.\"}"}
{"id": "dHng2O0Jjr", "page_num": 4, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"2.1 API COLLECTION\\n\\nWe start by introducing RapidAPI and its hierarchy, followed by how we crawl and filter APIs.\\n\\nRapidAPI Hub\\n\\nRapidAPI is a leading API marketplace that connects developers with thousands of real-world APIs, streamlining the process of integrating diverse services into applications. Developers can test and connect with various APIs by registering only a RapidAPI key. All APIs in RapidAPI can be classified into 49 coarse-grained categories (link), such as sports, finance, and weather. The categories associate an API with the most relevant topic. Additionally, the hub also provides 500+ fine-grained categorization called collections (link), e.g., Chinese APIs and database APIs. APIs in the same collection share a common characteristic and often have similar functionalities or goals.\\n\\nHierarchy of RapidAPI\\n\\nAs shown in Figure 3, each tool may be composed of multiple APIs. For each tool, we crawl the following information: the name and description of the tool, the URL of the host, and all the available APIs belonging to the tool; for each API, we record its name, description, HTTP method, required parameters, optional parameters, request body, executable code snippets for API call, and an example API call response. This rich and detailed metadata serves as a valuable resource for LLMs to understand and effectively use the APIs, even in a zero-shot manner.\\n\\nAPI Filtering\\n\\nInitially, we gathered \\\\(10,853\\\\) tools (53,190 APIs) from RapidAPI. However, the quality and reliability of these APIs can vary significantly. In particular, some APIs may not be well-maintained, such as returning 404 errors or other internal errors. To this end, we perform a rigorous filtering process (details in appendix A.1) to ensure that the ultimate tool set of ToolBench is reliable and functional. Finally, we only retain \\\\(3,451\\\\) high-quality tools (16,464 APIs).\\n\\n2.2 INSTRUCTION GENERATION\\n\\nDifferent from prior works, we specifically focus on two crucial aspects for instruction generation: (1) diversity: to train LLMs to handle a wide range of API usage scenarios, thereby boosting their generalizability and robustness; and (2) multi-tool usage: to mirror real-world situations that often demand the interplay of multiple tools, improving the practical applicability and flexibility of LLMs.\\n\\nTo this end, instead of brainstorming instructions from scratch and then searching for relevant APIs, we sample different combinations of APIs and craft various instructions that involve them.\\n\\nGenerating Instructions for APIs\\n\\nDefine the total API set as \\\\(S_{API}\\\\), at each time, we sample a few APIs: \\\\(S_{sub N} = \\\\{API_1, \\\\cdots, API_N\\\\}\\\\) from \\\\(S_{API}\\\\). We prompt ChatGPT to understand the functionalities of these APIs and then generate (1) possible instructions \\\\(\\\\text{Inst}^*\\\\) that involve APIs in \\\\(S_{sub N}\\\\), and (2) relevant APIs \\\\(S_{rel}^* \\\\subset S_{sub N}\\\\) for each instruction \\\\(\\\\text{Inst}^*_n\\\\), i.e., \\\\([S_{rel}^*_1, \\\\text{Inst}^*_1], \\\\cdots, [S_{rel}^*_N, \\\\text{Inst}^*_N]\\\\). These (instruction, relevant API) pairs will be used for...\"}"}
{"id": "dHng2O0Jjr", "page_num": 5, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Thought: I will first get some information about Hailee Steinfeld. API Name: get_extra_character_details. Arguments: {\"name\": \"Hailee Steinfeld\"}.\\n\\nObservation: {\"age\": 28, \\\"recent_movies\\\": [\\\"Spider-Man: Across the Spider-Verse\\\", ...]}\\n\\nAPI Name: Finish with Final Answer. Arguments: {\"Final Answer\": \\\"Hailee Steinfeld recently voiced Spider-Woman in \\\"Spider-Man: Across the Spider-Verse\\\". You could buy a Spider-Woman mask as a gift, and she would probably like it.\\\"}.\\n\\nAPI Name: Finish by Giving Up. Observation: {\"message\": \\\"server is not available.\\\"}.\\n\\nFigure 4: A comparison of our DFSDT and conventional CoT or ReACT during model reasoning (left). We show part of the solution path annotation process using ChatGPT (right).\\n\\nTraining the API retriever in \u00a7 3.1. We use different sampling strategies (introduced later) to cover all APIs and most of their combinations, thus ensuring the diversity of our instructions.\\n\\nThe prompt for ChatGPT is composed of (1) a general description of the intended instruction generation task, (2) comprehensive documentation of each API in $S_{sub}$, which helps ChatGPT understand their functionality and interplay, and (3) three in-context seed examples $\\\\{seed_1, seed_2, seed_3\\\\}$. Each seed example is an ideal instruction generation written by human experts. These seed examples are leveraged to better regulate ChatGPT's behavior through in-context learning. In total, we wrote 12/36 diverse seed examples ($S_{seed}$) for the single-tool / multi-tool setting, and randomly sampled three examples at each time. Detailed prompts for instruction generation are described in appendix A.7.\\n\\nOverall, the generation process can be formulated as follows:\\n\\nChatGPT $\\\\{API_1, \\\\cdots, API_N\\\\} \\\\in S_{API}$, $\\\\{seed_1, \\\\cdots, seed_3\\\\} \\\\in S_{seed}$ ($\\\\{|API_1, \\\\cdots, API_N, seed_1, \\\\cdots, seed_3\\\\|S_{rel} = \\\\{[S_{rel_1}, Inst_1], \\\\cdots, [S_{rel_N'}, Inst_N']\\\\}$|API_1, \\\\cdots, API_N, seed_1, \\\\cdots, seed_3$).\\n\\nSampling Strategies for Different Scenarios\\n\\nAs shown in Figure 3, for the single-tool instructions (I1), we iterate over each tool and generate instructions for its APIs. However, for the multi-tool setting, since the interconnections among different tools in RapidAPI are sparse, random sampling tool combinations from the whole tool set often leads to a series of irrelevant tools that cannot be covered by a single instruction in a natural way. To address the sparsity issue, we leverage the RapidAPI hierarchy information. Since tools belonging to the same RapidAPI category or collection are generally related to each other in the functionality and goals, we randomly select 2-5 tools from the same category / collection and sample at most 3 APIs from each tool to generate the instructions. We denote the generated instructions as intra-category multi-tool instructions (I2) and intra-collection multi-tool instructions (I3), respectively. Through rigorous human evaluation, we find that instructions generated in this way already have a high diversity that covers various practical scenarios. We also provide visualization for instructions using Atlas (link) to support our claim.\\n\\nAfter generating the initial set of instructions, we further filter those with the hallucinated relevant APIs by assessing whether they exist in $S_{sub}$. Finally, we collect nearly 200k qualified (instruction, relevant API) pairs, including 87413, 84815, and 25251 instances for I1, I2, and I3, respectively.\\n\\n2.3 Solution Path Annotation\\n\\nAs shown in Figure 4, given an instruction $Inst_*$, we prompt ChatGPT to search for a valid action sequence: $\\\\{a_1, \\\\cdots, a_N\\\\}$. Such a multi-step decision-making process is cast as a multi-round conversation for ChatGPT. At each round $t$, the model generates an action $a_t$ based on previous interactions, i.e., ChatGPT($a_t|\\\\{a_1, r_1, \\\\cdots, a_{t-1}, r_{t-1}\\\\}, Inst_*$), where $r_*$ denotes the real API response. For each\"}"}
{"id": "dHng2O0Jjr", "page_num": 1, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Despite the advancements of open-source large language models (LLMs), e.g., LLaMA, they remain significantly limited in tool-use capabilities, i.e., using external tools (APIs) to fulfill human instructions. The reason is that current instruction tuning largely focuses on basic language tasks but ignores the tool-use domain. This is in contrast to the excellent tool-use capabilities of state-of-the-art (SOTA) closed-source LLMs, e.g., ChatGPT. To bridge this gap, we introduce ToolLLM, a general tool-use framework encompassing data construction, model training, and evaluation. We first present ToolBench, an instruction-tuning dataset for tool use, which is constructed automatically using ChatGPT. Specifically, the construction can be divided into three stages: (i) API collection: we collect 16,464 real-world RESTful APIs spanning 49 categories from RapidAPI Hub; (ii) instruction generation: we prompt ChatGPT to generate diverse instructions involving these APIs, covering both single-tool and multi-tool scenarios; (iii) solution path annotation: we use ChatGPT to search for a valid solution path (chain of API calls) for each instruction. To enhance the reasoning capabilities of LLMs, we develop a novel depth-first search-based decision tree algorithm. It enables LLMs to evaluate multiple reasoning traces and expand the search space. Moreover, to evaluate the tool-use capabilities of LLMs, we develop an automatic evaluator: ToolEval. Based on ToolBench, we fine-tune LLaMA to obtain an LLM ToolLLaMA, and equip it with a neural API retriever to recommend appropriate APIs for each instruction. Experiments show that ToolLLaMA demonstrates a remarkable ability to execute complex instructions and generalize to unseen APIs, and exhibits comparable performance to ChatGPT. Our ToolLLaMA also demonstrates strong zero-shot generalization ability in an out-of-distribution tool-use dataset: APIBench. The codes, trained models, and demo are publicly available at https://github.com/OpenBMB/ToolBench.\"}"}
{"id": "dHng2O0Jjr", "page_num": 10, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"ACKNOWLEDGEMENTS\\n\\nThe contributions are listed as follows: (1) API collection: Shihao Liang, Sihan Zhao, Kunlun Zhu, Yujia Qin; (2) instruction generation: Lan Yan, Kunlun Zhu, Shihao Liang, Yujia Qin; (3) solution path annotation: Yining Ye, Shihao Liang, Runchu Tian, Yujia Qin, Xin Cong; (4) model implementation: Shihao Liang, Yujia Qin, Kunlun Zhu, Lauren Hong, Yifan Wu; (5) system demonstration: Xiangru Tang, Bill Qian. Yujia Qin led the project, designed the methodology and experiments, and wrote the paper. Yankai Lin, Mark Gerstein, Dahai Li, Zhiyuan Liu, Maosong Sun, and Jie Zhou advised the project. Yankai Lin, Xin Cong, and Ruobing Xie proofread the whole paper. All authors participated in the discussion. Yujia Qin is sponsored by the Baidu Scholarship.\\n\\nThe authors would like to thank Yifan Wu, Si Sun, Zheni Zeng, Chen Zhang, Yu Gu, Chenfei Yuan, Junxi Yan, Shizuo Tian, Mingxi Yan, Jason Phang, Chen Qian, and Weize Chen for their valuable feedback, discussion, and participation in this project.\\n\\nREFERENCES\\n\\nMichael Ahn, Anthony Brohan, Noah Brown, Yevgen Chebotar, Omar Cortes, Byron David, Chelsea Finn, Keerthana Gopalakrishnan, Karol Hausman, Alex Herzog, et al. Do as i can, not as i say: Grounding language in robotic affordances. ArXiv preprint, abs/2204.01691, 2022.\\n\\nStephen Bach, Victor Sanh, Zheng Xin Yong, Albert Webson, Colin Raffel, Nihal V Nayak, Abheesht Sharma, Taewoon Kim, M Saiful Bari, Thibault F\u00b4evry, et al. Promptsource: An integrated development environment and repository for natural language prompts. In Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics: System Demonstrations, pp. 93\u2013104, 2022.\\n\\nS\u00b4ebastien Bubeck, Varun Chandrasekaran, Ronen Eldan, Johannes Gehrke, Eric Horvitz, Ece Kamar, Peter Lee, Yin Tat Lee, Yuanzhi Li, Scott Lundberg, et al. Sparks of artificial general intelligence: Early experiments with gpt-4. arXiv preprint arXiv:2303.12712, 2023.\\n\\nShouyuan Chen, Sherman Wong, Liangjian Chen, and Yuandong Tian. Extending context window of large language models via positional interpolation. arXiv preprint arXiv:2306.15595, 2023.\\n\\nWei-Lin Chiang, Zhuohan Li, Zi Lin, Ying Sheng, Zhanghao Wu, Hao Zhang, Lianmin Zheng, Siyuan Zhuang, Yonghao Zhuang, Joseph E. Gonzalez, Ion Stoica, and Eric P. Xing. Vicuna: An open-source chatbot impressing gpt-4 with 90%* chatgpt quality, March 2023. URL https://lmsys.org/blog/2023-03-30-vicuna/.\\n\\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of deep bidirectional transformers for language understanding. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers), pp. 4171\u20134186, Minneapolis, Minnesota, 2019. Association for Computational Linguistics. doi: 10.18653/v1/N19-1423. URL https://aclanthology.org/N19-1423.\\n\\nNing Ding, Yulin Chen, Bokai Xu, Yujia Qin, Zhi Zheng, Shengding Hu, Zhiyuan Liu, Maosong Sun, and Bowen Zhou. Enhancing chat language models by scaling high-quality instructional conversations. arXiv preprint arXiv:2305.14233, 2023.\\n\\nDifei Gao, Lei Ji, Luowei Zhou, Kevin Qinghong Lin, Joya Chen, Zihan Fan, and Mike Zheng Shou. Assistgpt: A general multi-modal assistant that can plan, execute, inspect, and learn. arXiv preprint arXiv:2306.08640, 2023.\\n\\nTanmay Gupta and Aniruddha Kembhavi. Visual programming: Compositional visual reasoning without training. In Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, pp. 14953\u201314962, 2023.\\n\\nShibo Hao, Tianyang Liu, Zhen Wang, and Zhiting Hu. Toolkengpt: Augmenting frozen language models with massive tools via tool embeddings. arXiv preprint arXiv:2305.11554, 2023.\"}"}
{"id": "dHng2O0Jjr", "page_num": 11, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":null}"}
{"id": "dHng2O0Jjr", "page_num": 12, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Qiaoyu Tang, Ziliang Deng, Hongyu Lin, Xianpei Han, Qiao Liang, and Le Sun. Toolalpaca: Generalized tool learning for language models with 3000 simulated cases. arXiv preprint arXiv:2306.05301, 2023.\\n\\nRohan Taori, Ishaan Gulrajani, Tianyi Zhang, Yann Dubois, Xuechen Li, Carlos Guestrin, Percy Liang, and Tatsunori B. Hashimoto. Stanford alpaca: An instruction-following llama model. https://github.com/tatsu-lab/stanford_alpaca, 2023.\\n\\nHugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet, Marie-Anne Lachaux, Timoth\u00e9e Lacroix, Baptiste Rozi\u00e8re, Naman Goyal, Eric Hambro, Faisal Azhar, Aurelien Rodriguez, Armand Joulin, Edouard Grave, and Guillaume Lample. Llama: Open and efficient foundation language models. arXiv preprint arXiv:2302.13971, 2023a.\\n\\nHugo Touvron, Louis Martin, Kevin Stone, Peter Albert, Amjad Almahairi, Yasmine Babaei, Nikolay Bashlykov, Soumya Batra, Prajjwal Bhargava, Shruti Bhosale, et al. Llama 2: Open foundation and fine-tuned chat models. arXiv preprint arXiv:2307.09288, 2023b.\\n\\nYizhong Wang, Yeganeh Kordi, Swaroop Mishra, Alisa Liu, Noah A Smith, Daniel Khashabi, and Hannaneh Hajishirzi. Self-instruct: Aligning language model with self generated instructions. arXiv preprint arXiv:2212.10560, 2022.\\n\\nJason Wei, Maarten Bosma, Vincent Y Zhao, Kelvin Guu, Adams Wei Yu, Brian Lester, Nan Du, Andrew M Dai, and Quoc V Le. Finetuned language models are zero-shot learners. arXiv preprint arXiv:2109.01652, 2021.\\n\\nJason Wei, Xuezhi Wang, Dale Schuurmans, Maarten Bosma, Brian Ichter, Fei Xia, Ed Chi, Quoc Le, and Denny Zhou. Chain-of-thought prompting elicits reasoning in large language models, 2023.\\n\\nChenfei Wu, Shengming Yin, Weizhen Qi, Xiaodong Wang, Zecheng Tang, and Nan Duan. Visual chatgpt: Talking, drawing and editing with visual foundation models. ArXiv preprint abs/2303.04671, 2023.\\n\\nCan Xu, Qingfeng Sun, Kai Zheng, Xiubo Geng, Pu Zhao, Jiazhan Feng, Chongyang Tao, and Daxin Jiang. Wizardlm: Empowering large language models to follow complex instructions, 2023a.\\n\\nQiantong Xu, Fenglu Hong, Bo Li, Changran Hu, Zhengyu Chen, and Jian Zhang. On the tool manipulation capability of open-source large language models. arXiv preprint arXiv:2305.16504, 2023b.\\n\\nLinyao Yang, Hongyang Chen, Zhao Li, Xiao Ding, and Xindong Wu. Chatgpt is not enough: Enhancing large language models with knowledge graphs for fact-aware language modeling. arXiv preprint arXiv:2306.11489, 2023.\\n\\nShunyu Yao, Jeffrey Zhao, Dian Yu, Nan Du, Izhak Shafran, Karthik Narasimhan, and Yuan Cao. React: Synergizing reasoning and acting in language models. ArXiv preprint abs/2210.03629, 2022.\\n\\nShunyu Yao, Dian Yu, Jeffrey Zhao, Izhak Shafran, Thomas L Griffiths, Yuan Cao, and Karthik Narasimhan. Tree of thoughts: Deliberate problem solving with large language models. arXiv preprint arXiv:2305.10601, 2023.\\n\\nYining Ye, Xin Cong, Yujia Qin, Yankai Lin, Zhiyuan Liu, and Maosong Sun. Large language model as autonomous decision maker. arXiv preprint arXiv:2308.12519, 2023.\\n\\nYuchen Zhuang, Yue Yu, Kuan Wang, Haotian Sun, and Chao Zhang. Toolqa: A dataset for llm question answering with external tools. arXiv preprint arXiv:2306.13304, 2023.\"}"}
{"id": "dHng2O0Jjr", "page_num": 13, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"We perform a rigorous filtering process to ensure that the ultimate tool set of ToolBench is reliable and functional. The filtering process is as follows: (1) initial testing: we begin by testing the basic functionality of each API to ascertain whether they are operational. We discard any APIs that do not meet this basic criterion; (2) example response evaluation: we make API calls to obtain an example response. Then we evaluate their effectiveness by response time and quality. APIs that consistently exhibit a long response time are omitted. Also, we filter out the APIs with low-quality responses, such as HTML source codes or other error messages.\\n\\nWhen examining the response returned by each API, we discover that some responses may contain redundant information and are too long to be fed into LLMs. This may lead to problems due to the limited context length of LLMs. Therefore, we perform a response compression to reduce the length of API responses while maintaining their critical information.\\n\\nSince each API has a fixed response format, we use ChatGPT to analyze one response example and remove unimportant keys within the response to reduce its length. The prompt of ChatGPT contains the following information for each API: (1) tool documentation, which includes tool name, tool description, API name, API description, parameters, and an example API response. This gives ChatGPT a hint of the API's functionality; (2) 3 in-context learning examples, each containing an original API response and a compressed response schema written by experts. In this way, we obtain the response compression strategies for all APIs. During inference, when the API response length exceeds $1024$ tokens, we compress the response by removing unimportant information. If the compressed response is still longer than $1024$, we only retain the first $1024$ tokens. Through human evaluation, we find that this compression retains important information contained in the API response and successfully removes the noises.\\n\\nWe train the model in a multi-round conversation mode. For the training data format, we keep the input and output the same as those of ChatGPT. Since it is unclear how ChatGPT organizes the function call field, we just concatenate this information into the input as part of the prompt for ToolLLaMA. For the training hyper parameters, we use a learning rate of $5 \\\\times 10^{-5}$, a warmup ratio of $4 \\\\times 10^{-2}$, a total batch size of $64$, a maximum sequence length of $8192$, and use a position interpolation ratio of $2$. We train the model for two epochs and select the model checkpoint with the best performance on the development set and then evaluate it on the test set.\\n\\nIn practice, it is essential to balance effectiveness with costs (the number of OpenAI API calls). Classical DFS algorithms generate multiple child nodes at each step, then sort all the child nodes, and select the highest-scoring node for expansion. After greedily expanding to the terminal node, DFS backtracks to explore nearby nodes, expanding the search space. Throughout the algorithm, the most resource-intensive part is the sorting process of child nodes. If we use an LLM to evaluate two nodes at a time, it requires approximately $O(n \\\\log n)$ complexity of OpenAI API calls, where $n$ is the number of child nodes. In fact, we find empirically that in most cases, the nodes ranked highest are often the node generated at first. Therefore, we skip the sorting process of child nodes and choose a pre-order traversal (a variant for DFS) for the tree search. This design has the following advantages:\\n\\n\u2022 If the model does not retract an action (e.g., for the case of simple instructions), then DFSDT degrades to ReACT, which makes it as efficient as ReACT.\"}"}
{"id": "dHng2O0Jjr", "page_num": 6, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"at, ChatGPT should specify its \u201cthought\u201d, which API to use, and the specific parameters for this API, i.e.,\\n\\n\\\\[\\n\\\\text{Thought: } \\\\cdots, \\\\quad \\\\text{API Name: } \\\\cdots, \\\\quad \\\\text{Parameters: } \\\\cdots\\n\\\\]\\n\\nTo leverage the function call feature of ChatGPT, we treat each API as a special function and feed\\nits API documentation into ChatGPT's function field. In this way, the model understands how to\\ncall the API. For each instruction $\\\\text{Inst}^*$, we feed all the sampled APIs $S_{\\\\text{sub}}$ to ChatGPT's as available\\nfunctions. To let ChatGPT finish an action sequence, we define two additional functions, i.e., \u201cFinish\\nwith Final Answer\u201d and \u201cFinish by Giving Up\u201d. The former function has a parameter that corresponds\\nto a detailed final answer to the original instruction; while the latter function is designed for cases\\nwhere the provided APIs cannot complete the original instruction after multiple API call attempts.\\n\\n### Depth First Search-based Decision Tree\\n\\nIn our pilot studies, we find that CoT (Wei et al., 2023) or ReACT (Yao et al., 2022) has inherent limitations: (1) error propagation: a mistaken action may propagate the errors further and cause the model to be trapped in a faulty loop, such as continually\\ncalling an API in a wrong way or hallucinating APIs; (2) limited exploration: CoT or ReACT only explores one possible direction, leading to limited exploration of the whole action space. Hence even GPT-4 often fails to find a valid solution path, making annotation difficult.\\n\\nTo this end, we propose to construct a decision tree to expand the search space and increase the\\npossibility of finding a valid path. As depicted in Figure 4, our DFSDT allows the model to assess\\ndifferent reasoning paths and choose to either (1) proceed along a promising path or (2) abandon\\nan existing node by calling the \u201cFinish by Giving Up\u201d function and expand a new node. During\\nnode expansion, to diversify the child nodes and expand the search space, we prompt ChatGPT with\\nthe information of the previously generated nodes and explicitly encourage the model to generate a\\ndistinct node. For the searching process, we prefer depth-first search (DFS) instead of breadth-first\\nsearch (BFS) because the annotation can be finished as long as one valid path is found. Using BFS\\nwill cost excessive OpenAI API calls. More details are described in appendix A.8. We perform\\nDFSDT for all the generated instructions and only retain those passed solution paths. Ultimately, we\\ngenerate $126,486$ (instruction, solution path) pairs, which are used to train ToolLLaMA in \u00a7 3.2.\\n\\n### 3 EXPERIMENTS\\n\\nIn this section, we investigate the performance of ToolLLM framework. We first introduce the\\nevaluation metric and evaluate the efficacy of API retriever and DFSDT in \u00a7 3.1. Then we present the\\nmain experiments in \u00a7 3.2, followed by a generalization experiment in \u00a7 3.3.\\n\\n#### 3.1 PRELIMINARY EXPERIMENTS\\n\\n**ToolEval**\\n\\nConsidering the API's temporal variability on RapidAPI and the infinite potential solution\\npaths for an instruction, it is infeasible to annotate a fixed ground-truth solution path for each test\\ninstruction. Considering that human evaluation can be time-consuming, we follow AlpacaEval (Li\\net al., 2023b) to develop an efficient evaluator ToolEval based on ChatGPT, which incorporates\\ntwo evaluation metrics (details in appendix A.5): (1) Pass Rate: it calculates the proportion of\\nsuccessfully completing an instruction within limited budgets. The metric measures the executability\\nof instructions for an LLM and can be seen as a basic requirement for ideal tool use; and (2) Win Rate:\\nwe provide an instruction and two solution paths to ChatGPT evaluator and obtain its preference (i.e.,\\nwhich one is better). We pre-define a set of criteria for both metrics and these criteria are organized\\nas prompts for our ChatGPT evaluator. We evaluate multiple times based on ChatGPT to improve the\\nreliability. Then we calculate the average results from the evaluator.\\n\\nThrough rigorous testing (details in appendix A.5), we find that ToolEval demonstrates a high\\nagreement of 87.1\\\\% in pass rate and 80.3\\\\% in win rate with human annotators. This shows that\\nToolEval can reflect and represent human evaluation to a large extent.\\n\\n**Efficacy of API Retriever**\\n\\nThe API retriever aims to retrieve relevant APIs to an instruction. We\\nemploy Sentence-BERT (Reimers & Gurevych, 2019) to train a dense retriever based on BERT-\\nBASE (Devlin et al., 2019). The API retriever encodes the instruction and API document into two\\nembeddings, and calculates their relevance with embedding similarity. For training, we regard the\\nrelevant APIs of each instruction generated in \u00a7 2.2 as positive examples and sample a few other\\nAPIs as negative examples for contrastive learning. For baselines, we choose BM25 (Robertson et al.,\"}"}
{"id": "dHng2O0Jjr", "page_num": 7, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table 2: Our API retriever v.s. two baselines for three types of instructions (I1, I2, I3). We report NDCG@1 and NDCG@5.\\n\\n| Method   | I1  | I2  | I3  | Average |\\n|----------|-----|-----|-----|---------|\\n| BM25     | 18.4| 19.7| 12.0| 11.0    |\\n| Ada      | 57.5| 58.8| 36.8| 30.7    |\\n| Ours     | 84.2| 89.7| 68.2| 77.9    |\\n\\nAs shown in Table 2, our API retriever consistently outperforms baselines across all settings, indicating its feasibility in real-world scenarios with massive APIs. Also, the NDCG score of I1 is generally higher than I2 and I3, which means single-tool instruction retrieval is simpler than multi-tool setting.\\n\\nTable 3: Pass rate of different reasoning strategies for three types of instructions (I1, I2, I3) based on ChatGPT.\\n\\n| Method   | I1  | I2  | I3  |\\n|----------|-----|-----|-----|\\n| ReACT    | 40.6| 40.6| 27.6|\\n| DFSDT    | 58.0| 70.6| 62.8|\\n\\nSuperiority of DFSDT over ReACT\\n\\nBefore solution path annotation, we validate the efficacy of DFSDT. Based on ChatGPT, we compare DFSDT and ReACT using the pass rate metric. Since DFSDT consumes more OpenAI API calls than ReACT, for a fairer comparison, we also establish a \u201cReACT@N\u201d baseline, which conducts multiple times of ReACT until the total costs reach the same level of DFSDT. Once a valid solution is found by ReACT@N, we deem it a pass.\\n\\nFrom Table 3, it can be observed that DFSDT significantly outperforms the two baselines in all scenarios. Since we only retain those passed annotations as the training data, given the same budgets, using DFSDT could annotate more instructions. This makes DFSDT a more efficient way that saves the total annotation cost. We also find that the performance improvement of DFSDT is more evident for harder instructions (i.e., I2 and I3) than those simpler instructions (I1). This means that by expanding the search space, DFSDT can better solve those difficult, complex instructions that are unanswerable by the vanilla ReACT no matter how many times it is performed.\\n\\n3.2 M EXPERIMENTS\\n\\nToolLLaMA\\n\\nWe fine-tune LLaMA-2 7B model (Touvron et al., 2023b) using the instruction-solution pairs. The original LLaMA-2 model has a sequence length of 4096, which is not enough under our setting since the API response can be very long. To this end, we use positional interpolation (Chen et al., 2023) to extend the context length to 8192 (training details in appendix A.3).\\n\\nSettings\\n\\nIdeally, by scaling the number and diversity of instructions and unique tools in the training data, ToolLLaMA is expected to generalize to new instructions and APIs unseen during training. This is meaningful since users can define customized APIs and expect ToolLLaMA to adapt according to the documentation. To this end, we strive to evaluate the generalization ability of ToolLLaMA at three levels: (1) Inst.: unseen instructions for the same set of tools in the training data, (2) Tool: unseen tools that belong to the same (seen) category of the tools in the training data, and (3) Cat.: unseen tools that belong to a different (unseen) category of tools in the training data.\\n\\nWe perform experiments on three scenarios: single-tool instructions (I1), intra-category multi-tool instructions (I2), and intra-collection multi-tool instructions (I3). For I1, we conduct the evaluation for the aforementioned three levels (I1-Inst., I1-Tool, and I1-Cat.); for I2, since the training instructions already involve different tools of the same category, we only perform level 1 and level 3 for the generalization evaluation (I2-Inst. and I2-Cat.); similarly, we only perform level 1 generalization for I3 (I3-Inst.) since it already covers instructions that involve various combinations of tools from different categories (the tools in a RapidAPI collection may come from different RapidAPI categories).\\n\\nFor each test instruction, we feed the ground-truth (oracle) APIs to each model. This simulates the scenario where the user specifies the API set they prefer.\\n\\nBaselines\\n\\nWe choose two LLaMA variants that have been fine-tuned for general-purpose dialogue, i.e., Vicuna (Chiang et al., 2023) and Alpaca (Taori et al., 2023). We also choose the \u201cteacher model\u201d ChatGPT, Text-Davinci-003, GPT-4, and Claude-2 as baselines, and apply both DFSDT and ReACT to them. When calculating the win rate, each model is compared with ChatGPT-ReACT.\"}"}
{"id": "dHng2O0Jjr", "page_num": 8, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table 4: Main experiments of ToolBench. Win rate is calculated by comparing each model with ChatGPT-ReACT. A win rate higher than 50% means the model performs better than ChatGPT-ReACT. Apart from ToolLLaMA-DFSDT-Retriever, all methods use the oracle API retriever (i.e., ground truth API).\\n\\nMain Results\\nThe results are placed in Table 4, from which we derive that:\\n\\n1. Both Vicuna and Alpaca fail to pass any instruction (pass rate & win rate = 0), which means their instruction-following abilities do not cover the tool-use domain. This underscores the deficiency of current instruction tuning attempts, which largely focus on language skills;\\n\\n2. For all LLMs, using DFSDT significantly outperforms ReACT in both pass rate and win rate. Notably, ChatGPT +DFSDT surpasses GPT-4+ReACT in pass rate and performs comparably in win rate. This underscores the superiority of DFSDT over ReACT in decision-making;\\n\\n3. When using DFSDT, ToolLLaMA performs much better than Text-Davinici-003 and Claude-2, and achieves a result almost on par with ChatGPT (the teacher model). In general, despite generalizing to unseen instructions and tools, ToolLLaMA +DFSDT demonstrates competitive generalization performance in all scenarios, achieving a pass rate second to GPT4+DFSDT.\\n\\nOverall, these results demonstrate that ToolBench can sufficiently elicit the tool-use capabilities within LLMs and empower them to skillfully master even unseen APIs for various instructions.\\n\\nIntegrating API Retriever with ToolLLaMA\\nIn real-world scenarios, asking users to manually recommend APIs from a large pool may not be practical. To emulate this practical setting, we feed the top 5 APIs (instead of the ground truth APIs $S_{subN}$) recommended by our API retriever to ToolLLaMA.\\n\\nAs shown in Table 4, using retrieved APIs even improves the performance compared to the ground truth API set. This is because many APIs in the ground truth API set can be replaced by other similar APIs with better functionalities, which our API retriever can successfully identify. In other words, our retriever expands the search space of relevant APIs and finds more appropriate ones for the current instruction. It demonstrates the excellent ability of our API retriever to retrieve relevant APIs, especially considering the vast pool (16,000+) of APIs from which our API retriever selects.\\n\\n3.3 OOF-DISTRIBUTION (OOD) GENERALIZATION TO APIBENCH (PAUL ET AL., 2023)\\nSettings\\nWe further extend ToolLLaMA to an OOD dataset APIBench to validate its generalization ability. We equip ToolLLaMA with two retrievers: our trained API retriever and the oracle retriever. We evaluate three domains of APIBench, i.e., TorchHub, TensorHub, and HuggingFace. We compare ToolLLaMA with Gorilla, a LLaMA-7B model fine-tuned using the training data of APIBench. Following the original paper, we adopt two settings for Gorilla: zero-shot setting (ZS) and retrieval-aware setting (RS). The latter means (RS) the retrieved APIs are sent to the model as part of the prompts; while the former (ZS) does not incorporate the APIs in the prompts when training the model.\\n\\nWe adopt the official evaluation metric and report the AST accuracy and the hallucination rates.\\n\\nResults\\nThe results are shown in Table 5. In general, ToolLLaMA achieves remarkable OOD generalization performance on all three datasets, despite being trained on a completely different API domain and instruction domain. Specifically, ToolLLaMA+our API retriever outperforms Gorilla+BM25 from both training settings (ZS / RS) in terms of AST accuracy on HuggingFace and TorchHub. With the same oracle retriever, ToolLLaMA is consistently superior when compared to Gorilla-ZS. It should be noted that Gorilla model cannot be generalized to our ToolBench dataset due to our more complex settings, such as the multi-tool use and multi-step reasoning.\"}"}
{"id": "dHng2O0Jjr", "page_num": 9, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"TABLE 5: OOD generalization experiments on APIBench. For the Gorilla entries, ZS / RS means that Gorilla was trained in a zero-shot / retrieval-aware setting on APIBench. We report hallucination rate and AST accuracy.\\n\\n| Method        | Hallucination Rate | AST Accuracy |\\n|---------------|--------------------|--------------|\\n| ToolLLaMA + Our Retriever | 10.60              | 16.77        |\\n| Gorilla-ZS + BM25             | 46.90              | 10.51        |\\n| Gorilla-RS + BM25             | 6.42               | 15.71        |\\n| ToolLLaMA + Oracle            | 8.66               | 88.80        |\\n| Gorilla-ZS + Oracle           | 52.88              | 44.36        |\\n| Gorilla-RS + Oracle           | 6.97               | 89.27        |\\n\\n5 CONCLUSION\\n\\nTo elicit the tool-use capabilities within LLMs, we present ToolBench, covering 16k+ real-world APIs and various practical use-case scenarios including both single-tool and multi-tool tasks. Moreover, we propose DFSDT to reinforce the planning and reasoning ability of LLMs, enabling them to navigate through reasoning paths strategically. For efficient evaluation of tool learning, we devise an automatic evaluator ToolEval. By fine-tuning LLaMA on ToolBench, the obtained model ToolLLaMA matches the performance of ChatGPT and exhibits remarkable generalization ability to unseen APIs. Besides, we develop a neural API retriever to recommend relevant APIs for each instruction. The retriever can be integrated with ToolLLaMA as a more automated tool-use pipeline. In the experiments, we demonstrate the generalization ability of our pipeline to out-of-distribution domains. In general, this work paves the way for future research in the intersection of instruction tuning and tool use for LLMs.\\n\\n4 RELATED WORK\\n\\nTool Learning\\n\\nRecent studies have shed light on the burgeoning capabilities of LLMs in mastering tools and making decisions within complex environments (Nakano et al., 2021; Qin et al., 2023a; Shen et al., 2023; Wu et al., 2023; Schick et al., 2023; Hao et al., 2023; Qian et al., 2023; Song et al., 2023; Zhuang et al., 2023; Gao et al., 2023). Gaining access to external tools endows LLMs with real-time factual knowledge (Yang et al., 2023), multimodal functionalities (Gupta & Kembhavi, 2023), and specialized skills in vertical domains (Jin et al., 2023). However, open-source LLMs still lag far behind SOTA LLMs in tool use, and how tool-use ability is acquired by SOTA LLMs remains unclear. In this paper, we aim to bridge this gap and fathom the underlying mechanism.\\n\\nInstruction Tuning\\n\\nInstruction tuning enhances LLMs in understanding human instructions and generating proper responses (Wei et al., 2021; Bach et al., 2022). Since manual annotation is time-consuming, self-instruct (Wang et al., 2022) proposes to generate high-quality data from SOTA LLMs, which facilitates a recent trend of data curation for multi-turn dialogue (Taori et al., 2023; Chiang et al., 2023; Xu et al., 2023a; Ding et al., 2023). Compared with the dialogue, tool learning is more challenging given the vast diversity of APIs and the complexity of multi-tool instructions. As a result, even GPT-4 often fails to find a valid solution path. However, the existing tool-learning dataset cannot effectively address real human needs as mentioned in \u00a7 1. Instead, ToolBench is designed for practical scenarios and improves the previous pipeline for tool-learning data construction.\\n\\nPrompting LLMs for Decision Making\\n\\nPrompting facilitates LLMs to decompose high-level tasks into sub-tasks and generate grounded plans (Ahn et al., 2022; Huang et al., 2022a;b; Ye et al., 2023). ReACT (Yao et al., 2022) integrates reasoning with acting by allowing LLMs to give a proper reason for an action and incorporating environmental feedback for reasoning. However, these studies do not incorporate a mechanism for decision retraction, which becomes problematic as an initial error can lead to a cascade of subsequent errors. Recently, Reflexion (Shinn et al., 2023) mitigates this issue by asking LLMs to reflect on previous failures. Our DFSDT extends Reflexion to a more general method by allowing LLMs to assess different reasoning paths and select the most promising one. In essence, DFSDT shares a similar idea to one concurrent work: tree-of-thought (ToT) reasoning (Yao et al., 2023). However, DFSDT targets general decision-making problems where the decision space is infinite, compared to ToT's relatively simple tasks that can be addressed by brute-force search.\"}"}
