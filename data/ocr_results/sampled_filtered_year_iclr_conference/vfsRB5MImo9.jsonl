{"id": "vfsRB5MImo9", "page_num": 5, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table 1: Dataset statistics. Input and answer length are the corresponding average token lengths.\\n\\n| Dataset Name                  | Input Length | Answer Length |\\n|------------------------------|--------------|---------------|\\n| LAMA                         | 11.9         | 1.3           |\\n| NEWLAMA                      | 14.7         | 8.7           |\\n| BUATEDLAMA                   | 13.7         | 9.4           |\\n| NEWLAMA-EASY                 | 44.4         | 6.1           |\\n\\nNewLama-E can be considered easier since each instance was constructed to be similar to the data distribution seen during continued pretraining.\\n\\nDataset Construction\\n\\nThe data for continual pretraining, CC-R, is constructed using news-please (Hamborg et al., 2017). InNARIANT LAMA is constructed by manually selecting 28 time-invariant relations from T-Rex (Elsahar et al., 2018). For UPDATEDLAMA and NEWLAMA, we use Amazon Mechanical Turk (mturk) for crowd-sourcing Human Intelligent Tasks (HITs). The process requires selecting answerable questions from a list of questions generated by the model introduced in Lewis et al. (2021) and converting them into cloze sentences. We have also separately hired 11 experts to verify the correctness and search the C4 database to categorize each instance following our definition of updated and new. NEWLAMA-EASY is constructed at a larger scale through a two-phase mturk process where sentences selected from articles containing new information are decontextualized and paraphrased before being masked, verified and converted to corresponding questions. The constructed dataset statistics are in Table 1. Important details about the data construction pipeline, examples, and more fine-grained statistics are provided in Appendix B.\\n\\n3.2 Combined Metric for CKL\\n\\nWe propose a novel metric, FUAR ($F_{ORGOTTEN}/(U_{PUPATED}+A_{CQUIRED})$), that can compare the efficiency of each CKL method using the trade-off between forgotten time-invariant knowledge and updated or newly acquired knowledge. FUAR represents relatively how many time-invariant knowledge instances are forgotten in order to learn one new or updated knowledge instance.\\n\\nWe first define FUAR for the general case where there can be multiple corpora used for training an ever-changing LM.\\n\\nLet $T$ be an arbitrary task and $(D_i)_{n=0}^n$ be a sequence of corpora used for LM pretraining, where $D_0$ is the initial pretraining corpus. We define $\\\\text{Gap}(T, D_a, D_b) = \\\\text{Score}(T)_{LM_a} - \\\\text{Score}(T)_{LM_b}$, where $LM_a$ represents the LM after being pretrained on $D_a$. Then, we denote $T_F = (T_F_i)_{n=0}^{n-1}$ as a sequence of tasks from $(D_i)_{n=0}^n$ measuring the forgetting of invariant-knowledge from each corresponding corpus. If there is no such task from corpus $D_i$, the value of $T_F_i$ is set to $n.d.$, which means not defined. Likewise, we denote $T_U$ and $T_A$ as tasks from $D_n$ measuring the update and acquisition of new knowledge, respectively. We define FUAR as follows:\\n\\n$$\\\\text{FUAR}(T_F, T_U, T_A) = \\\\begin{cases} \\\\sum_{i=0}^{n-1} \\\\max(0, \\\\text{Gap}(T_F_i, D_i, D_n)) \\\\frac{1}{\\\\{T_F_i \\\\neq n.d.\\\\}} & \\\\text{if denominator > 0, no gain, otherwise.} \\\\\\\\ \\\\frac{\\\\sum_{i=0}^{n-1} \\\\max(0, \\\\text{Gap}(T_U, D_n, D_i)) + \\\\max(0, \\\\text{Gap}(T_A, D_n, D_i))}{\\\\text{denominator}} & \\\\end{cases}$$\\n\\nThe choice of benchmark tasks $T_F$, $T_U$, and $T_A$ can differ according to each experimental setup. FUAR value of 1.0 represents an equal trade-off scenario where one time-invariant knowledge instance of $T_F$ is forgotten on average to gain one new or updated knowledge instance of $T_U$ and $T_A$. The two terms in the denominators are summed because newly gained knowledge and updated knowledge are mutually exclusive by definition. When the value is smaller than 1, it means that the model obtains more new or updated knowledge than the amount of forgotten knowledge, so methods...\"}"}
{"id": "vfsRB5MImo9", "page_num": 6, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"that exhibit a low FUAR value can be considered suitable for CKL. If the value is zero, then it is a case where no forgetting occurs at all and is the upper bound for performance. If the denominator is 0, we denote the case as no gain and regard it as the worst possible case.\\n\\n**Experimental Setup**\\n\\nWe perform extensive experiments with an encoder-decoder model, T5 (Raffel et al., 2019), a large LM (\u2248 737M params) initially pretrained on April 2019 dump of C4 and May 2020 dump of Wikipedia (thus $D_0$ in our experiments) with salient span masking (SSM). The details of the pretraining, continual pretraining, and evaluation configurations are in Appendix C. We establish the following methods as the baselines for the CKL benchmark and categorize them into regularization, rehearsal, and parameter-expansion methods. The specific hyperparameters used for the implementation of each method are detailed in Appendix D.\\n\\nInitial refers to the setting where we evaluate the LM before any continued pretraining. The performance of this model can be considered as the upper-bound for NVARIANT LAMA and lower-bound on UPDATED LAMA and NEW LAMA.\\n\\nVanilla is a specific setting of further pretraining (Gururangan et al., 2020), where the domain is new knowledge, and the LM is further pretrained without any training strategies.\\n\\nRecAdam (Chen et al., 2020) falls into the category of regularization methods. It places a stronger independent assumption among the model parameters than the traditional regularization method (EWC (Kirkpatrick et al., 2017)) and does not access the initial pretraining corpus to regularize the model weights during continued pretraining. The optimizer is annealed so that less regularization is applied as the training progresses.\\n\\nMix-Review (He et al., 2021) falls into the category of rehearsal methods, which assumes access to the initial pretraining corpus and mixes in random subsets of the initial pretraining data during continued pretraining, depending on the mix-ratio at the current time step. As the training progresses, the mix-ratio decays towards 0, decreasing the amount of the mixed original data at each iteration.\\n\\nLoRA (Hu et al., 2021) falls into the category of parameter-expansion methods. It freezes the original parameters of the LM and adds trainable rank-decomposition matrices into each layer that are updated during continued pretraining. Hu et al. (2021) has implemented this approach with decoder-only models (GPT-2 (Radford et al., 2019) & GPT-3 (Brown et al., 2020)) while we apply it to an encoder-decoder model, denoting it as T5-LoRA.\\n\\nK-Adapter (Wang et al., 2021b) is another parameter-expansion method that freezes the original parameters of the LM while adding $k$ number of new layers, namely adapters, that are updated during continued pretraining. Wang et al. (2021b) have shown successful injection of factual and linguistic knowledge for encoder-only models, BERT (Devlin et al., 2019) & RoBERTa (Liu et al., 2019), while we also apply it to an encoder-decoder model, T5, and decoder-only model, GPT-2.\\n\\nModular is a newly proposed parameter-expansion method specifically for encoder-decoder models which freezes the original, pretrained encoder while adding a new, randomly initialized encoder that is updated during continued pretraining. For the newly added encoder, we vary the size to T5-small while keeping the size of the original encoder and decoder to be T5-large.\\n\\n**Results**\\n\\nIn this section, we first show the main experimental results for the CKL Benchmark. Then, since multiple steps of continual knowledge learning, i.e., CKL are needed for training a true, ever-changing LM, we explore the effects of multiple CKL phases as well as how epochs, corpus size, and the total number of training steps affect CKL. We further explore how learning rates affect CKL in Appendix E, how continual pretraining on $D_1$ affects the performance of KILT tasks which re-\\n\\nEach of the last two sentences means that we do not measure positive backward transfer and negative forward transfer, respectively. The latter in some cases actually do happen (shown in Appendix G). Explanations about the backward and forward transfer are in Appendix A.1.\"}"}
{"id": "vfsRB5MImo9", "page_num": 7, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table 2: Zero-shot probing performance on the CKL benchmark. The best results for each task and metric are shown in bold, and the second-best results are underlined.\\n\\n| Method               | # of Params     | IL  | UL  | NL  | NLE | FUAR |\\n|----------------------|-----------------|-----|-----|-----|-----|------|\\n| T5-Initial           | 0M / 737M       | 24.17 | 1.62 | 1.88 | 10.32 | -    |\\n| T5-Vanilla           | 737M / 737M     | 12.89 | 10.17 | 3.77 | 17.75 | 1.08 |\\n| T5-RecAdam           | 737M / 737M     | 13.20 | 12.55 | 4.02 | 17.85 | 0.84 |\\n| T5-MixReview         | 737M / 737M     | 13.92 | 6.49  | 2.89 | 14.86 | 1.74 |\\n| T5-LoRA              | 403M / 738M     | 16.58 | 12.77 | 4.52 | 19.56 | 0.55 |\\n| T5-Kadapters (k=2)   | 427M / 762M     | 19.59 | 12.34 | 5.03 | 18.75 | 0.33 |\\n| T5-Kadapters (k=3)   | 440M / 775M     | 19.76 | 12.66 | 4.02 | 19.00 | 0.33 |\\n| T5-Modular           | 438M / 773M     | 20.29 | 12.66 | 4.65 | 19.24 | 0.28 |\\n\\nWe first find that all of the CKL methods except for T5-MixReview are more effective at forgetting less time-invariant knowledge while updating and acquiring new knowledge than using the na\u00efve approach of T5-Vanilla as shown by the FUAR. This result also highlights the main difference between CKL and CL; while rehearsal methods show strong performances in traditional CL settings (Prabhu et al., 2020; Bang et al., 2021), in CKL, it shows the worst performance since the update of outdated knowledge and acquisition of new knowledge is severely deterred as shown in the performance of UL and NL while not showing competitive mitigation of forgetting as shown in the performance of IL compared to other CKL methods. Amongst the other CKL methods, we observe a rather consistent trend that the parameter-expansion methods achieve better results. The first and second-best results on all of UL, NL, and NLE are all from parameter-expansion methods. Meanwhile, although UL and NL are constructed following the same procedure, there is a huge difference between the EM scores of UL and NL. We analyze the source of this difference in Appendix I.\\n\\nFigure 9 visualizes how the EM scores of each task change as T5-Kadapters, the CKL method with the most robust performance, and T5-Vanilla are continually pretrained on \\\\( D_1 \\\\). In all of the tasks, the performance of T5-Initial can be considered as the upper-bound for IL and lower-bound for UL, NL, NLE. Corresponding with our main observations, CKL allows considerable retention of time-invariant world knowledge while improving updating and gaining new world knowledge compared to T5-Vanilla, mitigating the overall trade-off.\\n\\n5.2 Exploring Multiple Phases of CKL\\n\\nIn order to show the potential for creating a truly ever-changing LM, we explore the effect of multiple CKL phases by creating CC-RecentNews-Small, denoted as \\\\( S \\\\), which is a small variant of CC-RecentNews that consists of randomly sampled 10% of the original corpus. We then split...\"}"}
{"id": "vfsRB5MImo9", "page_num": 8, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":true,\"is_diagram\":false,\"natural_text\":\"Figure 2: Performance at each epoch during continued pretraining in the main experimental setting.\\n\\nTable 3: Zero-shot probing performance after T5 models are continually pretrained on different subsets of CC-RECENT NEWS. NLE and IL stand for NewLAMA-Easy and InvariantLAMA, respectively. There are three scenarios according to the corpus used for continual pretraining, explained in the text of Section 5.2. The FUAR of the three scenarios is calculated differently, and the corresponding tasks are shown in the table as the parameters of FUAR: $T_F$, $T_{Un}$, and $T_{An}$. In this setting, $T_F$ consists of only a single task $T_F(0)$ measuring the time-invariant information lost from $D_0$ only. For $S_{SMALL}$, we calculate the gap on NLE using the weighted sum of the gaps on NLE $P_1$ and NLE $P_2$ with uniform weights.\\n\\n| Corpus Method | # of Params | EM | EM | EM |\\n|---------------|-------------|----|----|----|\\n| T5-Initial    | 0M / 737M   | 24.17 | 8.69 | 9.45 |\\n| T5-Vanilla    | 737M / 737M | 11.86 | 17.77 | 16.42 |\\n| T5-RecAdam    | 737M / 737M | 11.85 | 16.46 | 13.93 |\\n| T5-MixReview  | 737M / 737M | 14.36 | 14.18 | 13.93 |\\n| T5-LoRA       | 403M / 738M | 14.26 | 20.60 | 19.90 |\\n| T5-Kadapters (k=2) | 427M / 762M | 18.16 | 18.34 | 16.42 |\\n| T5-Kadapters (k=3) | 440M / 775M | 17.12 | 20.98 | 20.39 |\\n| T5-Modular    | 438M / 773M | 16.40 | 19.47 | 19.90 |\\n\\n*CC-RECENT* NEWS-SMALL into two different splits by the published date of each article to simulate a setting where multiple CKL phases are needed, denoted as $S_{SMALL}-P1$ (05.2020 - 11.2020) and $S_{SMALL}-P2$ (11.2020 - 04.2021). NLE is also split into two different, smaller datasets, NLE $P_1$ and NLE $P_2$, each comprising of instances constructed from articles in $S_{SMALL}-P1$ and $S_{SMALL}-P2$. We use NewLAMA-Easy instead of NewLAMA because the number of instances in NL corresponding to articles from $S_{SMALL}$ is too small for robust evaluation.\"}"}
{"id": "vfsRB5MImo9", "page_num": 21, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":true,\"is_diagram\":false,\"natural_text\":\"Table 7: Result of T5-Vanilla and T5-Kadapters continually pretrained with various learning rates. The experiments are done under the setting of SMALL scenario in Table 3, thus $D_0$ are C4 (April 2019) and Wikipedia (May 2020), and $D_1$ is CC-RECENT-NEWS-SMALL. Each of IL and NLE stands for INVARIANT LAMA and NEW LAMA-ASY. The parameters of FUAR are $T_F$, $T_U$, and $T_A$, the tasks measuring the amount of time-invariant knowledge from corpus $D_0$, updated knowledge from $D_1$, and newly acquired knowledge from $D_1$, respectively.\\n\\n| Method          | Learning Rate | IL  | NLE          | FUAR |\\n|-----------------|---------------|-----|--------------|------|\\n| T5-Initial      | -             | -   | -            | -    |\\n| T5-Vanilla      | $1e^{-5}$     | 19.15 | 13.56       | 1.08 |\\n| T5-Vanilla      | $1e^{-4}$     | 17.45 | 15.21       | 1.06 |\\n| T5-Vanilla      | $5e^{-4}$     | 14.88 | 15.89       | 1.33 |\\n| T5-Vanilla      | $1e^{-3}$     | 11.19 | 18.77       | 1.32 |\\n| T5-Kadapters (k=2) | $1e^{-4}$     | 19.93 | 14.93       | 0.70 |\\n| T5-Kadapters (k=2) | $1e^{-3}$     | 16.46 | 19.59       | 0.72 |\\n\\nMix-Review (He et al., 2021) We use the English Wikipedia to represent the original pretraining corpus. The mix-decay and mix-ratio are set to 4 and 0.7, respectively, which is the best hyperparameter setting in the paper.\\n\\nLoRA (Hu et al., 2021) We only freeze the encoder for the encoder-decoder LM and the entire model for the decoder-only LM. We use the optimal rank $r$ of 4 and adapt both $W_q$ and $W_v$ in the self-attention module, which corresponds to the best performing hyperparameter setting in the paper.\\n\\nK-Adapter (Wang et al., 2021b) Similarly with T5-LoRA, we freeze the encoder for the encoder-decoder LM and the entire model for GPT-2. We implement $k=2, 3$ for both T5 and GPT-2 to see the effect of increasing # of parameters. Unlike in the original paper, we set the configuration of the adapter identical to a single transformer layer from the original LM, ridding the need of an up-projection and down-projection layer.\\n\\nModular We use a projection layer before adding the hidden state outputs from both encoders to match the dimensions.\\n\\nWhy do we add parameters to only the encoder for T5? For parameter-expansion methods, we add parameters to only the encoder because the encoder is applied to the input sequence and the decoder is applied to the output sequence. Since most of the computational cost comes from the decoder computing for the output sequence in an auto-regressive manner as highlighted in (Li et al., 2021), the newly added parameters in the encoder are roughly expected to have minimal additional computational cost.\\n\\nWhy do we freeze parameters of only the encoder for T5? K-Adapter and LoRA are initially proposed to freeze all of the parameters except for the newly added parameters. However, when applying this methodology to T5, it was empirically shown that unfreezing the parameters of the decoder results in better performances when utilized together with parameter-expansion methods in terms of overall trade-off.\\n\\nTable 7 shows that lowering the learning rate for the continual pretraining leads to less forgetting of the original knowledge, but also less learning of new knowledge. The experiments are done under the setting of SMALL scenario in Table 3. By comparing the FUAR among the T5-Vanilla models with different learning rates, it can be seen that there is no rule of thumb for choosing the appropriate learning rate since FUAR is the lowest.\"}"}
{"id": "vfsRB5MImo9", "page_num": 22, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table 8: Dev performance on KILT benchmark datasets after finetuning. Each model is finetuned on the train sets of KILT after continually trained on CC-REWS dataset for 4 epochs.\\n\\n| Method              | Fact Checking | Entity Linking | Slot-filling | Open Domain QA | Dialogue |\\n|---------------------|---------------|----------------|--------------|----------------|----------|\\n|                     | ACC           | ACC            | ACC          | ACC            | ACC      |\\n| T5-Initial          | 80.39         | 81.44          | 50.47        | 48.92          | 44.64    |\\n| T5-Vanilla          | 78.02         | 81.19          | 48.17        | 46.46          | 44.08    |\\n| T5-RecAdam          | 77.83         | 81.44          | 49.12        | 47.01          | 43.04    |\\n| T5-MixReview        | 77.17         | 80.77          | 49.38        | 46.22          | 44.08    |\\n| T5-LoRA             | 79.89         | 81.44          | 48.82        | 47.29          | 45.68    |\\n| T5-Kadapters (k=2) | 80.35         | 80.94          | 48.91        | 46.65          | 45.52    |\\n| T5-Kadapters (k=3) | 80.31         | 80.52          | 47.09        | 46.26          | 45.60    |\\n| T5-Modular          | 80.54         | 82.44          | 48.44        | 44.81          | 48.16    |\\n\\nTable 9: Hyperparameters and dataset details for all tasks of KILT.\\n\\n| Method              | Fact Checking | Entity Linking | Slot-filling | Open Domain QA | Dialogue |\\n|---------------------|---------------|----------------|--------------|----------------|----------|\\n| Epoch 5             | 20            | -              | 9            | 30             | 45       |\\n| Input Seq           | 25            | 768            | 512          | 2,048          | 25       |\\n| Output Seq          | 10            | 6              | 6            | 6              | 6        |\\n| LR                  | 1e-4          | 1e-4           | -            | 1e-3           | 1e-4     |\\n| Batch Size          | 128           | 16             | 128          | 48             | 512      |\\n| Train Size          | 104,966       | 18,395         | -            | 2,284,168      | 147,909  |\\n| Dev Size            | 10,444        | 4,784          | 3,396        | 5,599          | 5,000    |\\n\\nIn addition to the CKL benchmark, we also show in Table 8 the performance on the dev set of KILT (Petroni et al., 2021) after finetuning each of the continually pretrained models of Table 2. Since KILT is made from Wikipedia, which corresponds to the old pretraining corpus \\\\( D_0 \\\\), the performance on KILT measures how continual pretraining on new corpus \\\\( D_1 \\\\) affects the performance on the knowledge obtained from \\\\( D_0 \\\\) if finetuning is done on behalf of the knowledge from \\\\( D_0 \\\\).\\n\\nConfiguration KILT (Petroni et al., 2021) consists of 5 different tasks and 11 datasets: Open-Domain Question Answering (Joshi et al., 2017; Kwiatkowski et al., 2019; Fan et al., 2019; Yang et al., 2018), Fact Checking (Thorne et al., 2018), Entity Linking (Hoffart et al., 2011; Guo & Barbosa, 2018), Slot-filling (Levy et al., 2017), and Knowledgeable Open Dialogue (Dinan et al., 2019). Because each task requires a different training objective than the one used during pretraining, additional finetuning is necessary. We search for the hyperparameters such as training epochs, batch size, input size, output size, and learning rate of each individual KILT task to match the T5-base dev performance reported by Petroni et al. (2021). Using the identified configurations, we perform experiments on all of the KILT tasks with the continually pretrained models for each method as the initialization checkpoints. Evaluation metrics are different for each dataset: accuracy for discrete...\"}"}
{"id": "vfsRB5MImo9", "page_num": 23, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"output (fact-checking, entity linking, slot-filling), Exact Match (EM) for question answering tasks\\nwith short output, ROUGE-L for ELI5 (question answering task with long output), and F1-score for\\nWizard of Wikipedia (dialogue). The data statistics and the hyperparameters used for finetuning on\\neach KILT dataset is reported in Table 9.\\n\\nExperimental Result\\nWe first focus on the performance on zero-shot Relation Extraction (zsRE),\\nwhich is measured on the dev set of 12 relations that are ensured to have no overlap with the 84 rela-\\ntions of the train set (Levy et al., 2017). Since the setting is similar to the zero-shot probing setting\\non the two datasets are similar. The performance of T5-Vanilla drops to\\nhalf from that of T5-Initial as shown in IL, and the best performing method for both datasets is T5-\\nModular. In addition, corresponding with results from the CKL benchmark, parameter-expansion\\nmethods generally show stronger performance than the other methods.\\n\\nHowever, for the other datasets that cannot be performed in a zero-shot manner, the intermediate\\nprocess of continually pretraining on corpus $D_1$ does not seem to be that harmful on the finetuning\\nfor the target tasks even though they are more related to the knowledge of $D_0$. Even T5-Vanilla\\nshows modest performance, sometimes with better results than some other CKL baselines. One\\nhypothesis is that the models could have regained the original knowledge from corpus $D_0$ through\\nthe finetuning process. Also, some of the knowledge could have been recovered through the test-\\ntrain overlap (Lewis et al., 2020b; Wang et al., 2021a).\\n\\nA more surprising finding is that the performance of some of the parameter-expansion methods are\\neven higher than that of T5-Initial, which is considered to be the upper bound for KILT because T5-\\nInitial is only trained on behalf of the knowledge from $D_0$. For example, T5-Modular shows higher\\nscores than T5-Initial on 6 out of 11 tasks. Since the parameter-expansion methods force the model\\nto store the new knowledge in the newly added parameters during continual pretraining, one careful\\nconjecture is these LMs have learned to combine and utilize in its internal representation of both old\\nand new knowledge stored in separate parameters during finetuning to maximize the performance.\\n\\nGEEXPLORE CKL METHODS\\n\\nWe perform experiments with GPT-2 Large (\u2248 774M params) (Radford et al., 2019) initially pre-\\ntrained on WebText and Wikipedia $D_0$ and continually trained on CC-RECENT\\nNEWS-SMALL, i.e., $D_1$ for 8 epochs. For continued pretraining, we use the common teacher-forcing pre-\\ntaining objective. The initial learning rate for the continued pretraining stage is empirically chosen\\nas 1e-4 (results with learning rate as 1e-3 are shown in Appendix G.1). After continued pretraining,\\nwe apply\\nlight-tuning, a process denoted for finetuning the model for only one epoch on a small\\nportion of data similar to the evaluation set. Training on a single epoch constrains the model to\\nbarely adapt to the input-output form of the data and not to learn the knowledge in tuning samples,\\nmitigating the problem suggested by Lewis et al. (2020b).\\n\\nTo measure the time-invariant knowledge, we use InvariantLAMA (IL) because most of the slots to\\nfill are at the end of the sentence. For light-tuning on behalf of IL, we use additional T-Rex data from\\nShin et al. (2020) which has a similar distribution as instances from IL. Among them, 5,000 instances\\nwith the same\\ntime-invariant\\nrelations as IL are randomly sampled for\\nlight-tuning. On the other\\nhand, unlike IL where most of the slots to fill are at the end of the sentences, the LAMA datasets for\\nnew knowledge in our CKL benchmark mostly have the slots at the beginning of the sentences.\\nTherefore, we use the corresponding CBQA dataset of NEWLAMA-EASY, NEWQUESTIONS-\\nASY (NQE) to roughly measure the new knowledge.\\n\\n14 GPT-2 was initially pretrained on WebText (Dec 2019), which consists of 8 million documents with\\nWikipedia pages excluded. In order to measure the performance on INVARIANT LAMA constructed from\\nWikipedia, we continually pretrain GPT-2 on a subset of Wikipedia (May 2020) for 14k global training steps\\nbefore CKL.\\n\\n15 The QA version of UL, NL and NLE will be also released with the main CKL benchmark.\"}"}
{"id": "vfsRB5MImo9", "page_num": 24, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table 10: Performance of decoder-only models initially pretrained on Dec 2019 dump of Webtext and May 2020 dump of Wikipedia (D\u2080) continually pretrained on CC-RECENT-NEWS (D\u2081) for 8 epochs with a learning rate of 1e-4. Each of IL and NQE stands for INVARIANT LAMA and NEW QUESTIONS-ASY. The parameters of FUAR are TF\u2081 and TA\u2081, the tasks measuring the amount of time-invariant knowledge from corpus D\u2080, updated knowledge from D\u2081, and newly acquired knowledge from D\u2081, respectively.\\n\\n| Method          | IL    | NQE  | FUAR  |\\n|-----------------|-------|------|-------|\\n| GPT2-Initial    | 38.11 | -    |       |\\n| GPT2-Vanilla    | 35.88 | 5.79 | 1.58  |\\n| GPT2-Recadam    | 35.50 | 5.79 | 1.84  |\\n| GPT2-Mixreview  | 38.93 | 5.57 | 0.00  |\\n| GPT2-Lora       | 37.99 | 6.23 | 0.06  |\\n| GPT2-Kadapters (k=2) | 37.85 | 6.34 | 0.13  |\\n| GPT2-Kadapters (k=3) | 38.03 | 5.79 | 0.06  |\\n\\nTable 10 shows the CKL benchmark performance of GPT-2 models. We report the results averaged over 5 runs with different random seeds. As in Table 2, parameter-expansion methods show robust performance on both IL and NQE, resulting in low FUAR. This shows that these methods are not only effective on the encoder-decoder model but also the decoder-only model as well. One interesting result in Table 10 is that GPT2-MixReview performs the best on IL, with performance even higher than the initial model, which results in the best FUAR of 0 which means no forgetting occurred at all. We suppose that the training strategy of GPT2-MixReview, allowing access to samples of D\u2080 during continued pretraining, would have allowed fast adaptation to knowledge from D\u2080 during the light-tuning phase. Performance of GPT2-MixReview suggests that it makes it possible to regain the original knowledge for decoder-only models even with small tuning steps.\\n\\nWe want to highlight that the discrepancy of the performances among the CKL methods between encoder-decoder LM (T5) and decoder-only LM (GPT-2) may not solely be on the LM architecture, but also on the learning rate and the evaluation method (light-tuning was used to evaluate GPT-2 while we evaluated T5 in a zero-shot manner). We leave further exploration of training ever-changing decoder-only LMs such as GPT-2 as future work.\\n\\nG.1 FAILED GPT-2 EXPERIMENTS WITH LARGER LEARNING RATE\\n\\nTable 11 shows the CKL benchmark result of GPT-2 models continually pretrained on CC-RECENT-NEWS-SMALL for 8 epochs with a learning rate of 1e-3. By comparing the results in this table with those in Table 10, which is for models continually pretrained with a learning rate of 1e-4, the results in Table 11 shows worse performance on both IL and NQE. Unlike in Appendix E, increasing the learning rate does not result in better learning of new knowledge. Instead, NQE performance is even worse than GPT2-Initial for GPT2-Vanilla, GPT2-Recadam, and GPT2-MixReview. FUAR is no gain for these cases by the definition of the metric because the denominator has the value of zero. This shows that a large learning rate for continual pretraining may lead to failure: neither retaining old knowledge nor acquiring new knowledge effectively. For parameter-expansion methods, because many parameters including the decoder are frozen during the continual training process, they seem to be less prone to the effect of a large learning rate.\\n\\nHEXPLORING THE PREDICTION CHANGE DURING CONTINUAL RETRAINING\\n\\nTable 12 shows the prediction results of T5-Vanilla and T5-Modular on three knowledge probing tasks: INVARIANT LAMA, UPDATED LAMA, and NEW LAMA. We show the prediction for every training epoch for each model. The instances are selected from the predictions that T5-Modular got correct but T5-Initial got wrong on the final prediction, in order to see where the gap of the EM comes from.\"}"}
{"id": "vfsRB5MImo9", "page_num": 25, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table 11: Performance of decoder-only models initially pretrained on Dec 2019 dump of Webtext and May 2020 dump of Wikipedia ($D_0$) continually pretrained on CC-RECENT-NEWS-MALL ($D_1$) for 8 epochs with a learning rate of 1e-3. These are the results failed due to a large learning rate. Each of IL and NQE stands for INVARIANT LAMA and NEW QUESTIONS-EASY.\\n\\n| Method          | IL   | NQE | FUAR |\\n|-----------------|------|-----|------|\\n| GPT2-Initial    | 38.11| 4.37| -    |\\n| GPT2-Vanilla    | 23.03| 1.64| no gain |\\n| GPT2-Recadam    | 25.38| 2.73| no gain |\\n| GPT2-Mixreview  | 32.07| 1.64| no gain |\\n| GPT2-Lora       | 34.52| 5.46| 3.29 |\\n| GPT2-Kadapters (k=2) | 33.67| 6.01| 2.71 |\\n| GPT2-Kadapters (k=3) | 31.75| 7.65| 1.94 |\\n\\nTable 12: Change of Prediction Outputs During Continued Pretraining\\n\\n| Cloze Sentence Model | Epoch 1 | Epoch 2 | Epoch 3 | Epoch 4 | Answer |\\n|----------------------|---------|---------|---------|---------|--------|\\n| IL                   |         |         |         |         |        |\\n| The native language of Yvonne Monlaur is | French | French | French | French | French |\\n| Sonic Drift 2 is developed by | Sonic D | Sonic the | Sonic the | Sega | Sega |\\n| Webkit is developed by | | Microsoft | Google | GitHub | Apple |\\n| The official language of Republic of Ingushetia is | English | English | Kazakh | English | Russian |\\n| The capital of Roman Empire is | Rome | Rome | Constantino | Constantino | Rome |\\n| UL                   |         |         |         |         |        |\\n| The biggest exporter of crude oil to china is | Saudi Arabia | Saudi Arabia | Saudi Arabia | Saudi Arabia | Saudi Arabia |\\n| \u2192 Russia | Russia | Saudi Arabia | Russia | Russia |\\n| is the head of the euro zone central bank | Mario Draghi | Yves Le Maire | Yves Dujarric | Mario Draghi | Mario Draghi |\\n| \u2192 Christine Lagarde | Mario Draghi | Christine Lagarde | Christine Lagarde | Christine Lagarde | Christine Lagarde |\\n| is the manager of chelsea in the premier league | Mauricio Fernandez | Steve Bruce | Frank Lampard | Mikel Arteta | Luis Enrique |\\n| \u2192 Frank Lampard | Jose Mourinho | Jose Mourinho | Frank Lampard | Frank Lampard | Frank Lampard |\\n| is the price for a flat in nottingham | What | \u00a31.25m | \u00a31.25m | 40,000 | pounds |\\n| \u2192 30,000 | pounds | 40,000 | pounds | 40,000 | pounds |\\n| was the governor of New York at the time this article was written | Andrew M. Cuomo | Cuomo | Andrew Cuomo | Franklin D. Roosevelt | Martin Van Buren |\\n| \u2192 Andrew Cuomo | Andrew Cuomo | Andrew Cuomo | Andrew M. Cuomo | Andrew Cuomo | Andrew Cuomo |\\n| NL                   |         |         |         |         |        |\\n| is on the Bills all-pro team | Corey Williams | Corey Connor Williams | M Williams | Williams | Williams |\\n| is the founder of the popular cryptocurrency bitcoin | Satoshi Nakamoto | Satoshi Nakamoto | Yuri Xiaobo | Satoshi Nakamoto | Vitalik Buterin |\\n| | Satoshi Nakamoto | Satoshi Nakamoto | Satoshi Nakamoto | Satoshi Nakamoto | Satoshi Nakamoto |\\n| The bail for kyle rittenhouse is | Rs. 1 crore | a whopping $1 million | $1 million | $2 million | $2 million |\\n| \u2192 $2 million | $2 million | $2 million | $2 million | $2 million |\\n| is the host of ellen de generes show | Yves samantha | Norma | Mike Ellen DeGeneres | M Elise Ellen DeGeneres | Ellen DeGeneres |\\n| \u2192 Ellen DeGeneres | Ellen deGenes | Ellen DeGeneres | Ellen DeGeneres | Ellen DeGeneres | Ellen DeGeneres |\\n\\nEXPLORING THE CAUSE OF THE EM GAP BETWEEN UPDATED LAMA AND NEW LAMA\\n\\nAs shown in the main experiment, Table 2, there is a considerable gap between the EM of UPDATED LAMA (UL) and NEW LAMA (NL) over all the methods, despite undergoing the same data construction process. We attempt to analyze the causation by first analyzing what answer types make up the EM score of both UL and NL of T5-Vanilla, which are 10.17 and 3.77, respectively. As shown in Figure 8a, the cloze sentences that take Person type as the ground truth makes up most of the EM of both tasks, despite Person type answers taking up a similar proportion out of the total answer types (61.46% for UL and 59.7% for NL). Since UL consists of probes requiring an update of information from $D_0$, one might conjecture that the EM gap is simply due to the difference of the\"}"}
{"id": "vfsRB5MImo9", "page_num": 26, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table 13: F1 Score of Main Results.\\n\\n| Method                  | IL   | UL   | NL   | NLE  | FUAR |\\n|------------------------|------|------|------|------|------|\\n| T5-Initial             | 24.88| 2.62 | 3.19 | 14.49| -    |\\n| T5-Vanilla             | 13.11| 11.89| 5.84 | 22.53| 0.68 |\\n| T5-RecAdam             | 13.39| 14.33| 6.15 | 22.68| 0.57 |\\n| T5-MixReview           | 14.09| 8.11 | 4.80 | 18.89| 1.10 |\\n| T5-LoRA                | 17.04| 14.50| 7.45 | 24.59| 0.36 |\\n| T5-Kadapters (k=2)     | 19.88| 13.67| 7.43 | 24.04| 0.22 |\\n| T5-Kadapters (k=3)     | 19.91| 14.31| 6.55 | 23.33| 0.21 |\\n| T5-Modular             | 21.35| 12.78| 6.94 | 24.42| 0.17 |\\n\\nAdditionally, analyzing the source of the EM gap, we find overlapping Person type answers from UL and NL. In order to get rid of the influence of frequency of entities, we find overlapping Person type answers from UL and NL, and analyze only the 67 probing sentences for both datasets each paired to one of these entities. As shown in Figure 8b, the EM on UL is still much higher than that of NL. Manually analyzing these instances, we find that the probing sentences for NL ask for relatively more fine-grained knowledge compared to UL, since the instances of UL by definition are overlapped cloze sentences with different answers in the corpus D0 and D1, that naturally make them be coarse-grained. For instance, the probing sentences for entity \\\"Tim Walz\\\" in UL and NL are \\\"is the governor of Minnesota this year.\\\" and \\\"is the governor of Minnesota calling for the evacuation of St. Paul.\\\", respectively. We thus conjecture that the main causation of the EM gap to be UL consisting of instances requiring coarse-grained knowledge, which is likely to have appeared more during D1, while NL consisting of instances requiring fine-grained knowledge, which is expected to likely have appeared less in D1.\"}"}
{"id": "vfsRB5MImo9", "page_num": 27, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":true,\"natural_text\":\"Figure 9: Mean P@k curve for CKL benchmark with varying k.\"}"}
{"id": "vfsRB5MImo9", "page_num": 13, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Thomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony Moi, Pierric Cistac, Tim Rault, Remy Louf, Morgan Funtowicz, Joe Davison, Sam Shleifer, Patrick von Platen, Clara Ma, Yacine Jernite, Julien Plu, Canwen Xu, Teven Le Scao, Sylvain Gugger, Mariama Drame, Quentin Lhoest, and Alexander M. Rush. Transformers: State-of-the-art natural language processing. In EMNLP System Demonstrations, 2020.\\n\\nJing Xu, Arthur Szlam, and Jason Weston. Beyond goldfish memory: Long-term open-domain conversation. arXiv preprint arXiv:2107.07567, 2021.\\n\\nZhilin Yang, Peng Qi, Saizheng Zhang, Yoshua Bengio, William W Cohen, Ruslan Salakhutdinov, and Christopher D Manning. Hotpotqa: A dataset for diverse, explainable multi-hop question answering. In EMNLP, 2018.\\n\\nJaehong Yoon, Eunho Yang, Jeongtae Lee, and Sung Ju Hwang. Lifelong learning with dynamically expandable networks. In ICLR, 2018.\\n\\nRowan Zellers, Ari Holtzman, Hannah Rashkin, Yonatan Bisk, Ali Farhadi, Franziska Roesner, and Yejin Choi. Defending against neural fake news. In NeurIPS, 2019.\\n\\nMichael J.Q. Zhang and Eunsol Choi. SituatedQA: Incorporating extra-linguistic contexts into QA. EMNLP, 2021.\\n\\nChen Zhu, Ankit Singh Rawat, Manzil Zaheer, Srinadh Bhojanapalli, Daliang Li, Felix Yu, and Sanjiv Kumar. Modifying memories in transformer models. arXiv preprint arXiv:2012.00363, 2020.\"}"}
{"id": "vfsRB5MImo9", "page_num": 14, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"As mentioned in Section 2, there are fundamental differences between the traditional CL formulations and CKL which make the previous CL methods inadequate for the CKL setting. In this section, we introduce the prior traditional continual learning methods in detail, explore the methods from the literature set as baselines for the CKL benchmark and how they address the identified limitations of CL methods, and provide descriptions about alternative methods making LMs cope with the changing world.\\n\\nA.1 Traditional Continual Learning\\n\\nTraditional continual learning (CL) methods focus on addressing two aspects of transfer between sequentially incoming tasks: forward transfer and backward transfer (Lopez-Paz & Ranzato, 2017).\\n\\nForward transfer refers to how past tasks affect the performance of the current and future tasks. Backward transfer refers to how current or future tasks affect the performance of previous tasks.\\n\\nThe general pretrain-finetune approach can be seen as an instance of positive forward transfer where a model performs better on a target task after being pretrained on a more general source task. Moreover, catastrophic forgetting can be seen as an instance of negative backward transfer where previous tasks suffer performance due to continued training on different tasks. With respect to these two aspects, CL approaches can be categorized into three main approaches: regularization, rehearsal, and parameter-expansion methods.\\n\\nRegularization\\n\\nElastic Weight Consolidation (EWC) (Kirkpatrick et al., 2017) is a method that regularizes important parameters of previous tasks while training for the current tasks, helping mitigate the negative backward transfer of previous tasks. Important parameters are measured via a Fisher information matrix computed by measuring the magnitude of the gradient update step of each parameter during training of previous tasks.\\n\\nRehearsal\\n\\nGradient Episodic Memory (GEM) (Lopez-Paz & Ranzato, 2017) is one of the first rehearsal methods that utilize samples from each task stored in episodic memory and places an inequality constraint with respect to the losses of the samples in order to prevent negative backward transfer as well as allow the positive backward transfer. Other methods such as Experience replay and local adaptation (d'Autume et al., 2019) replay samples stored in the memory of previous tasks during training to mitigate forgetting.\\n\\nParameter-expansion\\n\\nProgressive Neural Networks (PNN) (Rusu et al., 2016) is one of the earliest parameter-expansion/sharing approaches that introduce new sets of parameters for each new task where previous parameters are frozen and can be connected via lateral connections allowing for positive forward transfer. PNN not only prevents negative backward transfer but also surpassed the previous pretrain-finetune approach in terms of positive forward transfer in some tasks.\\n\\nA.2 CKL Methods for Language Models\\n\\nAs mentioned in Section 2, we explore the methods from the literature that have addressed the limitations of CL methods and thus are applicable to CKL. We also categorize these methods into the three main categories of CL.\\n\\nRegularization\\n\\nMost CL methods that utilize regularization require computing important parameters of the previous task, which in this case is pretraining on the original text corpus. Determining these parameters is oftentimes unrealistic since it requires large-scale pretraining which can hardly be replicated by most. Also, exactly how and where the knowledge is stored in the parameters of an LM is currently extremely difficult to identify and localize (Vig et al., 2020; De Cao et al., 2021).\\n\\nRecAdam (Chen et al., 2020) overcomes this limitation by following the same training objective as EWC (Kirkpatrick et al., 2017) with a stronger independent assumption and places a quadratic penalty, ridding the need to access the initial pretraining corpus.\"}"}
{"id": "vfsRB5MImo9", "page_num": 15, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Rehearsal\\n\\nLarge LMs are usually pretrained on a vast amount of raw text corpus such as Common Crawl. When treating pretraining as a CL task, limitations exist when trying to apply previous rehearsal methods since a few samples from the pretraining corpus cannot represent the overall world knowledge from the original pretraining corpus. Mix-Review (He et al., 2021) solves this issue by performing preliminary experiments in a smaller pretraining setting by assuming access to the pretraining corpus during finetuning and mixing random subsets of pretraining corpus depending on a mix-ratio that anneals towards the target task as training progresses. Mix-Review can be considered a mild version of multi-task learning.\\n\\nParameter-expansion\\n\\nK-Adapter (Wang et al., 2021b) shares and freezes the original parameters and adds new parameters through adapters for continued pretraining of factual and linguistic knowledge and improve performance on three different knowledge-driven downstream tasks. More recently, LoRA (Hu et al., 2021) freezes the original parameters and injects trainable rank-decomposition matrices into each layer of the Transformer architecture, greatly reducing the number of trainable parameters and the computational hardware requirement while performing on-par or better than training all of the parameters. Both methods hypothesize freezing the original parameters allows mitigation of catastrophic forgetting. We test out the hypothesis through implementation in our CKL benchmark.\\n\\nA.3 Methods of Integrating World Knowledge with Language Models\\n\\nExplicit Methods\\n\\nFacts-as-Experts (Verga et al., 2021) store representations of entities in the form of key-value pairs into external memory that can be modified during inference time. RAG (Lewis et al., 2020a) accesses a dense vector index of Wikipedia with a retriever and swaps indexes for updating the behavior of the model as the world changes. Blender Bot 2.0 (Xu et al., 2021; Komeili et al., 2021), is also one of the explicit methods that search the internet for recent knowledge and saves recent conversations in external long-term memory. Explicit methods, such as swapping indexes, adding explicit entity-relation knowledge, or searching the internet are in need of manual intervention during inference or are bound to tasks that require retrieval. In this paper, we focus only on implicit methods.\\n\\nImplicit Methods\\n\\nZhu et al. (2020) proposed a new task of explicitly modifying specific facts without forgetting unmodified facts and provided several benchmark approaches without utilizing non-parametric memory, including constrained layer-wise finetuning. Wang et al. (2021b) proposed K-Adapter, a method that adds adapters to frozen layers of pretrained LMs to inject factual and linguistic knowledge and improve performance on downstream tasks. Chen et al. (2020) proposed a new optimizer that simulates the pretraining optimization while finetuning on the target task without needing access to the pretraining corpus, improving performance on the GLUE benchmark. De Cao et al. (2021) propose using a hyper-network to edit factual knowledge.\\n\\nEven though these implicit methods are efficient methods of injecting or modifying knowledge from the implicit parameters of the LMs, they are all limited to injecting specific knowledge such as the case of (Wang et al., 2021b) or modifying past knowledge such as the case of (Zhu et al., 2020; De Cao et al., 2021). No work, to the best of our knowledge, has specifically addressed the catastrophic forgetting of world knowledge gained from the initial pretraining when continued pretraining on new text corpus for the gain of new world knowledge.\\n\\nB Dataset Construction\\n\\nIn this section, we describe the dataset construction process we undergo in creating the benchmark datasets used in CKL. For the construction, we use Amazon Mechanical Turk (mturk) for crowdsourcing Human Intelligent Tasks (HITs) and separately hire 11 experts for annotation that requires extensive searching of the C4 corpus. In addition, three more experts who set up the data construction process and prepared the annotation guideline to ensure the quality of the data through post-validation and giving feedback to the annotators in real-time. The interfaces used for mturk HITs are provided in Appendix B.2.\\n\\n9 https://commoncrawl.org/\\n10 https://www.mturk.com\\n11 The first three authors of the paper.\"}"}
{"id": "vfsRB5MImo9", "page_num": 16, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Is the prediction correct in C4?\\n\\nSelect a question that requires recent knowledge to answer AND answer can be found in the article.\\n\\nConvert to cloze sentence:\\n\\nprobably-asked questions\\n\\nnew_answer = answer\\n\\nPretrained T5 LM\\n\\nevidence = evidence\\n\\nCan an alternative answer be found in C4?\\n\\nUpdate to NewLAMA\\n\\nDoes the news article have new information?\\n\\nIn-Lab Experts\\n\\nDo the answers agree?\"}"}
{"id": "vfsRB5MImo9", "page_num": 1, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"ABSTRACT\\nLarge Language Models (LMs) are known to encode world knowledge in their parameters as they pretrain on a vast amount of web corpus, which is often utilized for performing knowledge-dependent downstream tasks such as question answering, fact-checking, and open dialogue. In real-world scenarios, the world knowledge stored in the LMs can quickly become outdated as the world changes, but it is non-trivial to avoid catastrophic forgetting and reliably acquire new knowledge while preserving invariant knowledge. To push the community towards better maintenance of ever-changing LMs, we formulate a new continual learning (CL) problem called Continual Knowledge Learning (CKL). We construct a new benchmark and metric to quantify the retention of time-invariant world knowledge, the update of outdated knowledge, and the acquisition of new knowledge. We adopt applicable recent methods from literature to create several strong baselines. Through extensive experiments, we find that CKL exhibits unique challenges that are not addressed in previous CL setups, where parameter expansion is necessary to reliably retain and learn knowledge simultaneously. By highlighting the critical causes of knowledge forgetting, we show that CKL is a challenging and important problem that helps us better understand and train ever-changing LMs. The benchmark datasets, model checkpoints, and code to reproduce our results are available at this https URL.\\n\\nINTRODUCTION\\nRecent works have shown that large Language Models (LM), such as T5 (Raffel et al., 2019) and GPT-3 (Brown et al., 2020), have the capability of storing a tremendous amount of world knowledge in their parameters when pretrained on a vast corpus of text (Petroni et al., 2019). These pretrained LMs have shown potential to serve as knowledge bases when probed for world knowledge without any finetuning through the LAnguage Model Analysis (LAMA) task (Petroni et al., 2019), which requires probing LMs for world knowledge in a zero-shot manner through slot-filling, and promising results utilizing the encoded world knowledge when finetuned on various Knowledge Intensive Language Tasks (KILT) (Petroni et al., 2021), e.g., question answering, knowledgeable open dialogues. While the world knowledge stored in LMs has diverse use cases, it can quickly become outdated as the world changes fast, and LMs need to frequently renew their internal world knowledge accordingly. For example, it is impossible to probe for new information such as \\\"won the US Election 2020\\\" from the original T5 (Raffel et al., 2019) which was pretrained on C4 web corpus from April 2019. Also, information that may have once been considered accurate may no longer be valid because the information has been updated. For instance, the answer to \\\"Which soccer team does Cristiano Ronaldo play for?\\\" has changed from Juventus to Manchester United in September 2021. Meanwhile, time-invariant information learned from the original corpus such as \\\"Barack Obama was born in Honolulu, Hawaii\\\" should not be altered within the LMs.\\n\\n1 T5 was initially pretrained on the C4 dataset (about 750 GB), which is a cleansed dump of Common Crawl extracted from the web in April 2019.\"}"}
{"id": "vfsRB5MImo9", "page_num": 2, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Despite its importance, the challenge of renewing the internal world knowledge stored in the parameters of LMs is nontrivial and has only been explored in rather specific settings. For example, recent works have proposed to modify specific target knowledge such as individual facts (De Cao et al., 2021; Zhu et al., 2020; Dai et al., 2021). Dhingra et al. (2021) have addressed LMs as temporal knowledge bases by jointly modeling text with its timestamp. But the problem of renewing the world knowledge of LMs in a more general and scalable way, such as through continual pretraining on a corpus with new knowledge, has not been formally formulated or explored by previous works. Moreover, the community lacks a benchmark that can be used to systematically study how the internal knowledge of LMs changes through the training on new information. Lastly, methodologies to effectively renew the knowledge of LMs at scale have yet to be thoroughly explored.\\n\\nIn this work, we propose a novel continual learning (CL) formulation named CONTINUALL KNOWLEDGE LEARNING (CKL), where we attempt to renew the internal world knowledge of LMs through continual pretraining on new corpora. We systematically categorize world knowledge into three main categories and make benchmark datasets to measure each of them during CKL: (1) INVARIANT LAMA for time-invariant world knowledge in LMs that should not be forgotten or altered, (2) UPDATED LAMA for outdated world knowledge that needs to be updated in the LMs, and (3) NEW LAMA for new world knowledge that should be injected into the LMs. We also propose a novel metric named FUAR (FORGOTTEN / (UPDATED + ACQUIRED) RATIO) that can measure the trade-off between forgetting, updating, and acquiring knowledge. Finally, while one might think of implementing contemporary CL methods for this benchmark, we show that CKL has nontrivial differences to traditional CL formulations and require approaches specific to CKL. We find and compare model architectures and training methodologies (Chen et al., 2020; He et al., 2021; Hu et al., 2021; Wang et al., 2021b) from the literature that have shown potential to mitigate forgetting of knowledge gained during pretraining, establishing them as baselines for the CKL benchmark.\\n\\nIn sum, while the challenge of renewing the internal world knowledge of LMs is essential in real-world scenarios, it has yet to be formulated or extensively explored. Therefore, in this paper:\\n\\n\u2022 We propose a novel CL formulation called CONTINUALL KNOWLEDGE LEARNING (CKL) and construct a new benchmark to measure the amount of forgetting and amount of world knowledge gained by continued pretraining on a novel language modeling corpus that we construct, containing new knowledge.\\n\\n\u2022 We explore LM architectures and training methodologies that are natural baselines for CKL in literature, denoting them as CKL methods, and performing extensive experiments on our CKL benchmark. We categorize them into regularization, rehearsal, and parameter-expansion methods, same as in traditional CL literature, and compare the effectiveness of each type of method using a novel metric named FUAR that we propose to measure the trade-off between forgotten knowledge and updated or acquired knowledge.\\n\\n\u2022 Towards creating an ever-changing LM, we perform extensive analysis in the CKL benchmark and highlight important challenges and findings: parameter-expansion methods have the limitation of memory inefficiency despite performing the best in most of our experiments and seeing the same data repeatedly during continued pretraining is a critical cause of forgetting. Also, we show interesting results that need further exploration: learning rate can be varied to balance the forgetting and learning of new knowledge, CKL may help in...\"}"}
{"id": "vfsRB5MImo9", "page_num": 3, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"performing previous-knowledge-intensive tasks after gaining new world knowledge, and CKL methods are transferable across LM architectures despite showing a different trend in performance.\\n\\nAn overview of the proposed CKL benchmark is shown in Figure 1.\\n\\nLanguage Models (LMs) utilizing knowledge from external sources, such as Retrieval-Augmented Generation (RAG) (Lewis et al., 2020a) and Blender Bot 2.0 (Xu et al., 2021; Komeili et al., 2021), cope with the changing world by updating the external sources during inference or searching the internet for retrieving recent information. However, recent works have shown that these memory-augmented models suffer from hallucination, which means that they present false information as if it were correct, despite being given updated knowledge during inference (Zhang & Choi, 2021), which worsens as the size of the LM increases (Longpre et al., 2021), making it more so important for implicit parameters to be renewed as well.\\n\\nIn order to renew the internal knowledge of LMs, one might consider pretraining LMs from scratch with a newly updated text corpus of a scale similar to the one used during initial pretraining, such as a recent dump of the entire Wikipedia. However, this approach is computationally demanding and also environmentally harmful (Patterson et al., 2021). Another alternative approach is continuing the pretraining process on a much smaller corpus containing new world knowledge, but such a methodology is known to suffer from catastrophic forgetting (McCloskey & Cohen, 1989; Kirkpatrick et al., 2017), where the models forget previously learned knowledge as they acquire new knowledge.\\n\\nLazaridou et al. (2021); Jin et al. (2021) suggests implementing prior Continual Learning (CL) methods (Sun et al., 2020; d\u2019Autume et al., 2019) to address this problem. However, it is important to note that there are nontrivial differences between traditional CL and the proposed Continual Knowledge Learning (CKL) formulation which make applying traditional CL methods inadequate.\\n\\nIn traditional CL, methods can be largely categorized into regularization, rehearsal, and parameter-expansion methods. (1) While regularization methods (Kirkpatrick et al., 2017) require identifying important parameters used for previous tasks, exactly how and where the knowledge is stored in the parameters of an LM is currently extremely difficult to identify and localize (Vig et al., 2020; De Cao et al., 2021). (2) While prior rehearsal methods (Lopez-Paz & Ranzato, 2017) consider learning all of the streams of tasks at once (multi-task learning) as the performance upper-bound and replicate such a setting with samples stored in the episodic memory, a few samples from the pretraining corpus cannot represent the overall world knowledge from the corpus. Moreover, if LMs are pretrained on a shuffled concatenation of stream of corpora, there is no guarantee that the LMs will acquire the correct, recent information from the recent corpora, especially in cases where the former corpora are much bigger than the latter ones, which is shown by experiments in Section 5.1. (3) Lastly, prior parameter-expansion methods (Rusu et al., 2016; Yoon et al., 2018) focus on learning a stream of different tasks via strong supervision, while in CKL, the focus is constantly updating world knowledge from a stream of corpora via self-supervision.\\n\\nBecause of these fundamental differences, instead of contemporary CL methods mentioned above, we explore methodologies from the literature that are suitable for CKL (Chen et al., 2020; He et al., 2021; Hu et al., 2021; Wang et al., 2021b), modifying and adapting each method according to our needs as CKL methods. Lastly, while it has been pointed out that some of the traditional CL formulations may have little practical importance in real-world scenarios by Prabhu et al. (2020), CKL is much closer to the initial motivation behind CL, which is that the \u201cfundamental characteristic of natural intelligence is its ability to continually learn new knowledge while updating information about the old ones\u201d (Prabhu et al., 2020). Details of related works regarding the traditional CL methods and how CKL methods address the fundamental differences are provided in Appendix A.\\n\\nIn this section, we explain the formulation of the task, the data construction process, and the proposed metric measuring the trade-off between forgetting previous world knowledge and updating and learning of new world knowledge.\"}"}
{"id": "vfsRB5MImo9", "page_num": 4, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"When viewing the task of renewing the internal knowledge of LMs as one of CL formulations, pretraining on the original corpus can be considered as a previous task, and continued pretraining on new corpus can be considered as the current task, the main objective becoming retaining the time-invariant world knowledge gained through initial pretraining while efficiently learning new and updated world knowledge through continued pretraining. Throughout the paper, we let $D_0$ refer to the corpus used for initial pretraining and let $D_1$ denote the new corpus used for continued pretraining.\\n\\nNew Text Corpus for Language Modeling\\n\\nFor LMs to renew their internal knowledge, they need to be continually pretrained on a new text corpus $D_1$ which has the updated and new information. $D_1$ should ideally be much smaller than $D_0$, as a large amounting to the size of $D_0$ will result in massive computational costs similar to pretraining the LMs from scratch. For constructing $D_1$, we crawl recently published news articles from the web making CC-RECENT NEWS.  \\n\\nProbing LMs for World Knowledge\\n\\nThe most widely used task for probing LMs for world knowledge is the LAnguage Model Analysis (LAMA) (Petroni et al., 2019) task, which consists of cloze sentences created from a set of knowledge sources using manually defined templates. We define that an LM knows a fact if it can successfully predict in a zero-shot manner the masked entity in the cloze sentence, such as \\\"Dante was born in\\\" as Florence. While there may be other alternatives for measuring the world knowledge encoded in LMs, we construct our main datasets as LAMA tasks, while also additionally providing the corresponding question pairs to the cloze sentences for those who want to test on CBQA as well.\\n\\nMeasuring Retention of Time-invariant World Knowledge\\n\\nWe define time-invariant world knowledge as the information present in $D_0$ that has no possibility of conflicting with information from $D_1$. For example, if the information of the birthplace of Barack Obama is present in $D_0$, it is unlikely that $D_1$ contains information that contradicts that fact. Also, we classify instances where the time-stamps are fixed such as \\\"Cristiano Ronaldo played for\\\" in 2010 as time-invariant. These time-invariant instances should not be changed as LMs are continually pretrained on $D_1$. In order to measure how much time-invariant information is lost due to catastrophic forgetting during continued pretraining, we create I$^{\\\\text{INVARIANT}}$LAMA, a subset of LAMA (Petroni et al., 2019), consisting of only time-invariant cloze sentences detailed in Appendix B.1.\\n\\nMeasuring Update of Outdated World Knowledge\\n\\nIn this work, we define outdated world knowledge as information that is conflicting between $D_0$ and $D_1$. For example, the President of the US may be Barack Obama in $D_0$ and Joe Biden in $D_1$. In this case, the LM should update its internal knowledge as Joe Biden as the US president. If an LM is pretrained on both $D_0$ and $D_1$ simultaneously, there is no guarantee that the LM will acquire the correct, recent information from $D_1$, especially in cases where $D_0$ is much bigger than $D_1$, which is one of the biggest difference between the CKL and traditional CL setting. For measuring update of outdated information, we construct U$^{\\\\text{UPDATED}}$LAMA which is made up of cloze statements for which answers can be found in both $D_0$ and $D_1$, but are conflicting.\\n\\nMeasuring Acquisition of New World Knowledge\\n\\nWe define new world knowledge as the information present in $D_1$, but not in $D_0$. To measure new knowledge acquired through continued pretraining on $D_1$, we construct N$^{\\\\text{NEW}}$LAMA which is made up of detailed cloze statements requiring new knowledge from $D_1$ to correctly answer. We provide two datasets for measuring new world knowledge: N$^{\\\\text{NEW}}$LAMA, for which each of the instances is verified that the answer does not exist in $D_0$, but only in $D_1$, and N$^{\\\\text{NEW}}$LAMA-EASY for which each of the instances does not perfectly comply with our strict definition of new world knowledge due to its creation process, but is used to generally measure the new knowledge acquired from continued pretraining on $D_1$ at a larger scale.\\n\\nCC-RECENT NEWS consists of 221,779 articles (\u2248168M tokens), which is estimated to be about 750 times smaller than C4, a cleansed version of the April 2019 Common Crawl dataset (https://commoncrawl.org/) that was used to initially pretrain the T5 LM (Raffel et al., 2019).\\n\\nClosed-book question answering (CBQA) (Roberts et al., 2020) can also be considered as a task that measures the world knowledge of LMs through finetuning, but it has been pointed out that much of its performance increases are due to the test-train overlap (Lewis et al., 2020b; Wang et al., 2021a) in the datasets.\"}"}
{"id": "vfsRB5MImo9", "page_num": 9, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Comparing the performance on IL of the two scenarios, SMALL and SMALL-P1\u2192SMALL-P2, results show that LMs are prone to more forgetting as they go through multiple CKL phases, despite having the same number of training steps. One of the reasons may be due to the learning rate scheduling, which is initialized at the start of each phase. Furthermore, despite showing the best performance overall, the drawbacks of parameter-expansion methods are also highlighted in the SMALL-P1\u2192SMALL-P2 setting; they require new parameters to be added at every phase of the update. For example, the number of total parameters of T5-Modular increases by 36M in every round of the continual pretraining phase. Likewise, considering a large number of CKL phases introduces new problems that should be additionally studied. Taking into account that LMs should be updated frequently with a small amount of data in real-world scenarios for gaining up-to-date world knowledge about the ever-changing world in a computation-effective manner, more research is needed to mitigate the amount of forgetting that follows the larger number of update phases.\\n\\nEffects of Epochs, Corpus Size, and Total Number of Training Steps in CKL on Forgetting\\n\\nFigure 3 shows the result of T5-Vanilla and T5-Kadapters during continued pretraining in different scenarios from Table 2 and 3, where each point in the graph represents the performance of IL after every epoch. Comparing MAIN (4 epochs) and SMALL (8 epochs) in Figure 3 (a) T5-Vanilla, we can see that more forgetting occurs in SMALL, even though trained for five times less number of global training steps. This phenomenon is further highlighted when comparing results from SMALL-P1 (8 epochs) which shows the most amount of forgetting despite being trained for ten times less number of global training steps. While the overall drop is much mitigated in Figure 3 (b) T5-Kadapters, we observe the same trend between each scenario which goes to show how critical observing the same data repeatedly during continued pretraining is for causing forgetting.\\n\\nThe results are in line with findings from Lee et al. (2021) which suggest LMs should be pretrained with just a few epochs on less duplicating data for efficiency. We add additional intuition to their findings and conjecture that the inefficiency of pretraining from duplicate data could have been caused by the forgetting of the rather long-tail knowledge in the pretraining corpus.\"}"}
{"id": "vfsRB5MImo9", "page_num": 10, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"ACKNOWLEDGMENTS\\n\\nThe authors would like to thank Sang-Woo Lee, Jinheon Baek, Miyoung Ko, Hyunji Lee, and Eunbi Choi for helpful discussions. This work was supported by Institute of Information & communications Technology Planning & Evaluation (IITP) grant funded by the Korea government (MSIT) (No. 2019-0-00075, Artificial Intelligence Graduate School Program (KAIST)).\\n\\nREFERENCES\\n\\nJihwan Bang, Heesu Kim, YoungJoon Yoo, Jung-Woo Ha, and Jonghyun Choi. Rainbow memory: Continual learning with a memory of diverse samples. In CVPR, 2021.\\n\\nTom B Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, et al. Language models are few-shot learners. In NeurIPS, 2020.\\n\\nSanyuan Chen, Yutai Hou, Yiming Cui, Wanxiang Che, Ting Liu, and Xiangzhan Yu. Recall and learn: Fine-tuning deep pretrained language models with less forgetting. In EMNLP, 2020.\\n\\nEunsol Choi, Jennimaria Palomaki, Matthew Lamm, Tom Kwiatkowski, Dipanjan Das, and Michael Collins. Decontextualization: Making sentences stand-alone. TACL, 9:447\u2013461, 2021.\\n\\nDamai Dai, Li Dong, Y. Hao, Zhifang Sui, and Furu Wei. Knowledge neurons in pretrained transformers. ArXiv, abs/2104.08696, 2021.\\n\\nCyprien de Masson d'Autume, Sebastian Ruder, Lingpeng Kong, and Dani Yogatama. Episodic memory in lifelong language learning. In NeurIPS, 2019.\\n\\nNicola De Cao, Wilker Aziz, and Ivan Titov. Editing factual knowledge in language models. In EMNLP, 2021.\\n\\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. Bert: Pre-training of deep bidirectional transformers for language understanding. In NAACL, 2019.\\n\\nBhuwan Dhingra, Jeremy R Cole, Julian Martin Eisenschlos, Daniel Gillick, Jacob Eisenstein, and William W Cohen. Time-aware language models as temporal knowledge bases. arXiv preprint arXiv:2106.15110, 2021.\\n\\nEmily Dinan, Stephen Roller, Kurt Shuster, Angela Fan, Michael Auli, and Jason Weston. Wizard of wikipedia: Knowledge-powered conversational agents. In ICLR, 2019.\\n\\nHady Elsahar, Pavlos Vougiouklis, Arslen Remaci, Christophe Gravier, Jonathon Hare, Elena Simperl, and Frederique Laforest. T-rex: A large scale alignment of natural language with knowledge base triples. In LREC, 2018.\\n\\nAngela Fan, Yacine Jernite, Ethan Perez, David Grangier, Jason Weston, and Michael Auli. Eli5: Long form question answering. In ACL, 2019.\\n\\nZhaochen Guo and Denilson Barbosa. Robust named entity disambiguation with random walks. Semantic Web, 9(4):459\u2013479, 2018.\\n\\nSuchin Gururangan, Ana Marasovi \u00b4c, Swabha Swayamdipta, Kyle Lo, Iz Beltagy, Doug Downey, and Noah A Smith. Don't stop pretraining: adapt language models to domains and tasks. In ACL, 2020.\\n\\nKelvin Guu, Kenton Lee, Zora Tung, Panupong Pasupat, and Ming-Wei Chang. Realm: Retrieval-augmented language model pre-training. In ICML, 2020.\\n\\nFelix Hamborg, Norman Meuschke, Corinna Breitinger, and Bela Gipp. news-please: A generic news crawler and extractor. In 15th International Symposium of Information Science (ISI 2017), pp. 218\u2013223, 2017.\"}"}
{"id": "vfsRB5MImo9", "page_num": 11, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Tianxing He, Jun Liu, Kyunghyun Cho, Myle Ott, Bing Liu, James Glass, and Fuchun Peng. Analyzing the forgetting problem in pretrain-finetuning of open-domain dialogue response models. In EACL, 2021.\\n\\nJohannes Hoffart, Mohamed Amir Yosef, Ilaria Bordino, Hagen F\u00fcrstenau, Manfred Pinkal, Marc Spaniol, Bilyana Taneva, Stefan Thater, and Gerhard Weikum. Robust disambiguation of named entities in text. In EMNLP, 2011.\\n\\nEdward J Hu, Yelong Shen, Phillip Wallis, Zeyuan Allen-Zhu, Yuanzhi Li, Shean Wang, and Weizhu Chen. Lora: Low-rank adaptation of large language models. arXiv preprint arXiv:2106.09685, 2021.\\n\\nXisen Jin, Dejiao Zhang, Henghui Zhu, Wei Xiao, Shang-Wen Li, Xiaokai Wei, Andrew Arnold, and Xiang Ren. Lifelong pretraining: Continually adapting language models to emerging corpora. arXiv preprint arXiv:2110.08534, 2021.\\n\\nMandar Joshi, Eunsol Choi, Daniel S Weld, and Luke Zettlemoyer. Triviaqa: A large scale distantly supervised challenge dataset for reading comprehension. In ACL, 2017.\\n\\nJames Kirkpatrick, Razvan Pascanu, Neil Rabinowitz, Joel Veness, Guillaume Desjardins, Andrei A Rusu, Kieran Milan, John Quan, Tiago Ramalho, Agnieszka Grabska-Barwinska, et al. Overcoming catastrophic forgetting in neural networks. Proceedings of the national academy of sciences, 114(13):3521\u20133526, 2017.\\n\\nMojtaba Komeili, Kurt Shuster, and Jason Weston. Internet-augmented dialogue generation. arXiv preprint arXiv:2107.07566, 2021.\\n\\nTom Kwiatkowski, Jennimaria Palomaki, Olivia Redfield, Michael Collins, Ankur Parikh, Chris Alberti, Danielle Epstein, Illia Polosukhin, Jacob Devlin, Kenton Lee, et al. Natural questions: a benchmark for question answering research. TACL, 7:453\u2013466, 2019.\\n\\nAngeliki Lazaridou, Adhiguna Kuncoro, Elena Gribovskaya, Devang Agrawal, Adam Liska, Tayfun Terzi, Mai Gimenez, Cyprien de Masson d\u2019Autume, Sebastian Ruder, Dani Yogatama, et al. Pitfalls of static language modelling. arXiv preprint arXiv:2102.01951, 2021.\\n\\nKatherine Lee, Daphne Ippolito, Andrew Nystrom, Chiyuan Zhang, Douglas Eck, Chris Callison-Burch, and Nicholas Carlini. Deduplicating training data makes language models better. arXiv preprint arXiv:2107.06499, 2021.\\n\\nOmer Levy, Minjoon Seo, Eunsol Choi, and Luke Zettlemoyer. Zero-shot relation extraction via reading comprehension. In CoNLL, 2017.\\n\\nPatrick Lewis, Ethan Perez, Aleksandara Piktus, Fabio Petroni, Vladimir Karpukhin, Naman Goyal, Heinrich K\u00fctter, Mike Lewis, Wen-tau Yih, Tim Rockt\u00e4schel, et al. Retrieval-augmented generation for knowledge-intensive nlp tasks. In NeurIPS, 2020a.\\n\\nPatrick Lewis, Pontus Stenetorp, and Sebastian Riedel. Question and answer test-train overlap in open-domain question answering datasets. arXiv preprint arXiv:2008.02637, 2020b.\\n\\nPatrick Lewis, Yuxiang Wu, Linqing Liu, Pasquale Minervini, Heinrich K\u00fctter, Aleksandra Piktus, Pontus Stenetorp, and Sebastian Riedel. Paq: 65 million probably-asked questions and what you can do with them. In EACL, 2021.\\n\\nYanyang Li, Ye Lin, Tong Xiao, and Jingbo Zhu. An efficient transformer decoder with compressed sub-layers. arXiv preprint arXiv:2101.00542, 2021.\\n\\nYinhan Liu, Myle Ott, Naman Goyal, Jingfei Du, Mandar Joshi, Danqi Chen, Omer Levy, Mike Lewis, Luke Zettlemoyer, and Veselin Stoyanov. Roberta: A robustly optimized bert pretraining approach. arXiv preprint arXiv:1907.11692, 2019.\\n\\nShayne Longpre, Kartik Perisetla, Anthony Chen, Nikhil Ramesh, Chris DuBois, and Sameer Singh. Entity-based knowledge conflicts in question answering. arXiv preprint arXiv:2109.05052, 2021.\"}"}
{"id": "vfsRB5MImo9", "page_num": 12, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"David Lopez-Paz and Marc'Aurelio Ranzato. Gradient episodic memory for continual learning. In NeurIPS, 2017.\\n\\nMichael McCloskey and Neal J Cohen. Catastrophic interference in connectionist networks: The sequential learning problem. Psychology of learning and motivation, 24:109\u2013165, 1989.\\n\\nDavid Patterson, Joseph Gonzalez, Quoc Le, Chen Liang, Lluis-Miquel Munguia, Daniel Rothchild, David So, Maud Texier, and Jeff Dean. Carbon emissions and large neural network training. arXiv preprint arXiv:2104.10350, 2021.\\n\\nFabio Petroni, Tim Rockt\u00e4schel, Patrick Lewis, Anton Bakhtin, Yuxiang Wu, Alexander H Miller, and Sebastian Riedel. Language models as knowledge bases? In EMNLP, 2019.\\n\\nFabio Petroni, Aleksandra Piktus, Angela Fan, Patrick Lewis, Majid Yazdani, Nicola De Cao, James Thorne, Yacine Jernite, Vladimir Karpukhin, Jean Maillard, et al. Kilt: a benchmark for knowledge intensive language tasks. In NAACL, 2021.\\n\\nNina Poerner, Ulli Waltinger, and Hinrich Sch\u00fctze. E-bert: Efficient-yet-effective entity embeddings for bert. In Findings of EMNLP, 2019.\\n\\nAmeya Prabhu, Philip HS Torr, and Puneet K Dokania. Gdumb: A simple approach that questions our progress in continual learning. In ECCV, 2020.\\n\\nAlec Radford, Jeffrey Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. Language models are unsupervised multitask learners. OpenAI blog, 1(8):9, 2019.\\n\\nColin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J Liu. Exploring the limits of transfer learning with a unified text-to-text transformer. arXiv preprint arXiv:1910.10683, 2019.\\n\\nAdam Roberts, Colin Raffel, and Noam Shazeer. How much knowledge can you pack into the parameters of a language model? In EMNLP, 2020.\\n\\nAndrei A Rusu, Neil C Rabinowitz, Guillaume Desjardins, Hubert Soyer, James Kirkpatrick, Koray Kavukcuoglu, Razvan Pascanu, and Raia Hadsell. Progressive neural networks. arXiv preprint arXiv:1606.04671, 2016.\\n\\nTaylor Shin, Yasaman Razeghi, Robert L. Logan IV, Eric Wallace, and Sameer Singh. AutoPrompt: Eliciting knowledge from language models with automatically generated prompts. In EMNLP, 2020.\\n\\nFan-Keng Sun, Cheng-Hao Ho, and Hung-Yi Lee. Lamol: Language modeling for lifelong language learning. In ICLR, 2020.\\n\\nJames Thorne, Andreas Vlachos, Christos Christodoulopoulos, and Arpit Mittal. Fever: a large-scale dataset for fact extraction and verification. In NAACL, 2018.\\n\\nJ\u00f6rg Tiedemann and Santhosh Thottingal. OPUS-MT \u2014 Building open translation services for the World. In EAMT, Lisbon, Portugal, 2020.\\n\\nPat Verga, Haitian Sun, Livio Baldini Soares, and William W Cohen. Facts as experts: Adaptable and interpretable neural memory over symbolic knowledge. In NAACL, 2021.\\n\\nJesse Vig, Sebastian Gehrmann, Yonatan Belinkov, Sharon Qian, Daniel Nevo, Simas Sakenis, Jason Huang, Yaron Singer, and Stuart Shieber. Causal mediation analysis for interpreting neural nlp: The case of gender bias. In NeurIPS, 2020.\\n\\nCunxiang Wang, Pai Liu, and Yue Zhang. Can generative pre-trained language models serve as knowledge bases for closed-book qa? In ACL, 2021a.\\n\\nRuize Wang, Duyu Tang, Nan Duan, Zhongyu Wei, Xuanjing Huang, Cuihong Cao, Daxin Jiang, Ming Zhou, et al. K-adapter: Infusing knowledge into pre-trained models with adapters. In Findings of ACL, 2021b.\"}"}
{"id": "vfsRB5MImo9", "page_num": 17, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"recting them whenever necessary and checks whether the model prediction is correct by searching through the C4 corpus as a representative of \\\\( D_0 \\\\). If the prediction is correct and the prediction is not the same with the new answer, the following instance must be present in both \\\\( D_0 \\\\) and \\\\( D_1 \\\\) with details changed, and thus is added to \\\\( U \\\\) along with the evidence document found in C4. If same, the instance is discarded because the instance is neither updated nor new. (5) Lastly, if the model prediction is wrong, the expert annotator is asked to find an alternative answer for the question in C4. If not found, the instance is added to \\\\( N \\\\) since the answer to the question could only be found in the article of \\\\( C4 \\\\) \\\\( (D_1) \\\\), but not in \\\\( C4 \\\\) \\\\( (D_0) \\\\). Similarly, if the alternative answer is found in \\\\( C4 \\\\), we check whether it is the same as the new answer and add the instance to \\\\( U \\\\) if not the same and disregard it otherwise.\\n\\nThroughout the whole process, a validator checks the sanity of the data and gives detailed real-time feedback on the work of the annotator.\\n\\n\\\\( NEW \\\\) \\\\( LAMA-E \\\\)\\n\\nEven though \\\\( NEW \\\\) \\\\( LAMA \\\\) corresponds to our exact definition of new knowledge that we define in the task formulation, scaling the size of the dataset was difficult since each instance required searching the whole C4 database for answers. Instead, we provide a much larger, easier variant \\\\( NEW \\\\) \\\\( LAMA-E \\\\) where we test the general new knowledge acquired during continued pretraining on \\\\( CC-R \\\\). The pipeline for the creation of a single instance of \\\\( NEW \\\\) \\\\( LAMA-E \\\\) is shown in Figure 4 (b) and follows the following procedures:\\n\\n(1) First, the crowd-sourced worker is instructed to classify whether the given article contains new information or not. (We define new as not likely to be known before May 2020). If the article contains new information, the worker is instructed to select a sentence from the article that contains the most recent information and an entity among the possible answer candidates in the sentence and discard the article if otherwise. We provide the possible entities through a Named-Entity Recognition Model. (2) We make the selected sentence stand-alone from the article through the decontextualization model provided by Choi et al. (2021). (3) The decontextualized sentence is paraphrased by a back-translation model \\\\( (en \\\\rightarrow de \\\\rightarrow en) \\\\) (Tiedemann & Thottingal, 2020) and checked whether the selected word is still in the paraphrased sentence; the sentence is discarded if not. (4) Next, we mask out the selected word from the sentence and ask two crowd-sourced workers to convert the cloze sentence into a question and answer the question. (5) If the answers agree among the workers as well as correspond to the actual selected word, we add the instance to \\\\( NEW \\\\) \\\\( LAMA-E \\\\).\\n\\nThe specific interfaces used for the mturk HITs are provided in Appendix B.2. Statistics of the constructed datasets are in Appendix B.3.\\n\\nB.1 TIME-INvariant RELATIONS OF LAMA\\n\\nTable 4 shows the list of 28 time-invariant relations of \\\\( INVARIANT \\\\) LAMA. We manually filter the 44 original LAMA relations to leave only the time-invariant relations. Templates such as \u201c[X] works for [Y].\u201d and \u201c[X] is a member of [Y].\u201d are excluded because the answer may change for different timestamps. In the template, [X] and [Y] refers to subject and object labels, respectively. Given a template with only the subject included, the model has to predict the object label [Y] for knowledge probing.\\n\\nB.2 INTERFACES USED FOR THE CONSTRUCTION OF CKL BENCHMARK\\n\\nThe Mturk interface used during construction of \\\\( U \\\\) \\\\( PDATED \\\\) LAMA and \\\\( N \\\\) \\\\( NEW \\\\) \\\\( LAMA \\\\), \\\\( NEW \\\\) \\\\( LAMA-E \\\\) are shown in Figure 5, 6, and 7, respectively.\\n\\nB.3 DATASET STATISTICS AND EXAMPLES\\n\\nWe report the data statistics for the CKL benchmark in Table 5. We measure the size, average input token length, average answer token length, and the answer types of each constructed dataset. One thing to consider is that LAMA (Petroni et al., 2019) from which we constructed \\\\( INVARIANT \\\\) LAMA is originally constructed for only single-token decoding (1.3 with the T5-tokenizer) because multi-token decoding entails additional, tunable parameters (beam size, n-gram repetition penalties, etc.).\"}"}
{"id": "vfsRB5MImo9", "page_num": 18, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":true,\"is_diagram\":false,\"natural_text\":\"### Table 4: Relations of **NIVARIANT**\\n\\n| Relation Template ([X], [Y]) | Example |\\n|-----------------------------|---------|\\n| P19 [X] was born in [Y]    | Taras Kuzio was born in Halifax. |\\n| P20 [X] died in [Y]        | Georgios Roilos died in Athens. |\\n| P279 [X] is a subclass of [Y] | Hutterite German is a subclass of Bavarian. |\\n| P37 The official language of [X] is [Y] | The official language of Azad Kashmir is English. |\\n| P449 [X] was originally aired on [Y] | Microsoap was originally aired on BBC. |\\n| P47 [X] shares border with [Y] | Illinois shares border with Kentucky. |\\n| P138 [X] is named after [Y] | Logan International Airport is named after Boston. |\\n| P364 The original language of [X] is [Y] | The original language of The Fatal Eggs is Russian. |\\n| P527 [X] consists of [Y] | AIM alliance consists of Apple. |\\n| P176 [X] is produced by [Y] | Alfa Romeo 155 is produced by Fiat. |\\n| P27 [X] is [Y] citizen | Woodrow Lloyd is Canada citizen. |\\n| P407 [X] was written in [Y] | France Culture was written in French. |\\n| P30 [X] is located in [Y] | Lavoisier Island is located in Antarctica. |\\n| P178 [X] is developed by [Y] | Tizen is developed by Intel. |\\n| P1376 [X] is the capital of [Y] | London is the capital of England. |\\n| P131 [X] is located in [Y] | Pershing County is located in Nevada. |\\n| P1412 [X] used to communicate in [Y] | Jacques Rivette used to communicate in French. |\\n| P17 [X] is located in [Y] | Eibenstock is located in Germany. |\\n| P276 [X] is located in [Y] | Delhi Technological University is located in India. |\\n| P937 [X] used to work in [Y] | Pierre Trudeau used to work in Ottawa. |\\n| P140 [X] is affiliated with the [Y] religion | Emirate of Granada is affiliated with the Islam religion. |\\n| P103 The native language of [X] is [Y] | The native language of Anastasy V onsyatsky is Russian. |\\n| P190 [X] and [Y] are twin cities | Beijing and Milan are twin cities. |\\n| P1001 [X] is a legal term in [Y] | Surgeon General is a legal term in Canada. |\\n| P495 [X] was created in [Y] | La Grande Vadrouille was created in France. |\\n| P36 The capital of [X] is [Y] | The capital of Granville County is Oxford. |\\n| P740 [X] was founded in [Y] | Grimaldi Group was founded in Naples. |\\n| P361 [X] is part of [Y] | Sinqa is part of Andes. |\\n\\n### Table 5: CKL benchmark dataset statistics\\n\\n| Dataset          | Size (Examples) | Avg. Input Tokens | Avg. Answer Tokens | Answer Types                  |\\n|------------------|-----------------|-------------------|--------------------|------------------------------|\\n| **NIVARIANT** LAMA | 17474           | 11.9              | 1.3                | Geographical (54%), Language (14.9%), Nationalities (7.2%), Person (6.3%), Location (5.7%), Organization (5.3%), etc. (6.6%) |\\n| **UPDATE** LAMA   | 924             | 13.7              | 9.4                | Person (61.47%), Organization (8.3%), Geographical (6.6%), Numerals (5.19%), Date (2.4%), etc. (16.04%) |\\n| **NEW** LAMA      | 797             | 14.7              | 8.7                | Person (59.7%), Organization (10.2%), Numerals (7.6%), Date (5.3%), Geographical (4.8%), etc. (12.4%) |\\n| **NEW** LAMA-ASY  | 11177           | 44.4              | 6.1                | Person (48.5%), Organization (13%), Geographical (9.8%), Date (5.5%), Nationalities (3.4%), Numerals (2.5%), etc. (17.3%) |\\n\\nThe newly constructed datasets **UPDATE** LAMA, **NEW** LAMA, and **NEW** LAMA-ASY require multi-token decoding which adds a level of difficulty for the task compared to **NIVARIANT** LAMA. Moreover, **NEW** LAMA-ASY has a different input distribution (longer input sequences) than the other datasets since the decontextualization and back-translation processes are applied to create each instance, which makes the sentences longer. Lastly, some examples of the CKL benchmark datasets are provided in Table 6.\"}"}
{"id": "vfsRB5MImo9", "page_num": 19, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Figure 5: MTurk interface used for construction of UPDATER LAMA and NEW LAMA.\\n\\nFigure 6: First MTurk interface used for construction of NEW LAMA-EASY.\\n\\nFigure 7: Second MTurk interface used for construction of NEW LAMA-EASY.\"}"}
{"id": "vfsRB5MImo9", "page_num": 20, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table 6: Examples of INVARIANT LAMA, UPDATED LAMA, NEW LAMA, and NEW LAMA-E\\n\\n| Task | Input | Output |\\n|------|-------|--------|\\n| iPod Touch is produced by | Apple | iPod Touch is produced by Apple. |\\n| The Sharon Cuneta Show was created in | Philippines | Philippines. |\\n| The native language of Lee Chang-dong is | Korean | Korean. |\\n| is the prime minister of England. | Theresa May | Boris Johnson |\\n| has the most passing yards in the NFL. | Brady Quinn | Jalen Guyton |\\n| Bale has | Real Madrid. | 4 champions league titles with Real Madrid. |\\n| Alicia Braga plays | in the New Mutant. | Disney Winter Soldier. |\\n| owns the rights to the Falcon and the | | |\\n| Tesla invested in the digital currency bitcoin. | $1.5 billion | |\\n\\nCEXPERIMENTAL CONFIGURATION\\n\\nPretraining Configuration\\nWe utilize the T5 initially pretrained on C4 (April 2019) and continually pretrained with salient span masking (Guu et al., 2020) on Wikipedia (May 2020) as initialization. We use the checkpoints from Wolf et al. (2020). We also perform the SSM objective during CKL because it was shown to help LMs \u201cfocus on problems that require world knowledge\u201d (Guu et al., 2020; Roberts et al., 2020).\\n\\nContinual Pretraining Configurations\\nThe input and output sequence length is fixed to 350. We use gradient accumulation for cases where the same number of training batches could not be loaded on the GPUs due to the varying memory consumption required for different methods and set the global batch size to 60. We use Adafactor optimizer with an initial learning rate of 1e-3. We show the effects of learning rate variation regarding the trade-off between maintaining previous knowledge and acquiring new knowledge in Appendix E. We use learning rate warm-up for the first 10% of training and linearly decay the learning rate to half of the initial learning rate towards the end of training. For all of the experiments, we use 4 32GB V100 GPUs for training with each method except Mix-Review, where we use 16 32GB V100 GPUs. The details of the configurations used for evaluation on each individual CKL task are provided in Appendix C.\\n\\nEvaluation Configurations\\nFor T5 based models, all evaluation is done in a zero-shot manner and is processed with a single GPU. For INVARIANT LAMA, the input and output length is fixed as 25 and 4 respectively. For UPDATED LAMA and NEW LAMA, the input and output length is 50 and 10 respectively. Lastly, the input and output length is 150 and 10 respectively for NEW LAMA-EASY. The rationale of this hyperparameter is based on average input and answer token in Table 5. Unlike T5 models, GPT-2 based models need additional light-tuning for 1 epoch for evaluation. For INVARIANT LAMA, the input and output length is 50 and 3 respectively. The training batch size is 32 and the learning rate is 1e-3. For evaluation on the acquisition of new knowledge, the input and output length is 100 and 10 respectively. The training batch size is 8 due to memory constraints and the learning rate is 1e-3. For both tuning processes, 4 V100 32GB GPUs are used. The detailed result and discussion of GPT-2 based models are shown in Appendix G.\\n\\nRecAdam (Chen et al., 2020) We use the same hyperparameter setting for the optimizer as in Chen et al. (2020): we set the coefficient of the quadratic penalty $\\\\gamma$ to 5,000, and select the best $t_0$ and $k$ in $100, 250, 500, 1,000$ and $0.05, 0.1, 0.2, 0.5, 1$ respectively for the annealing coefficient $\\\\lambda(t)$. 20\"}"}
