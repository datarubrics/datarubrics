{"id": "vJZ7dPIjip3", "page_num": 1, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"End-to-end (geometric) deep learning has seen first successes in approximating the solution of combinatorial optimization problems. However, generating data in the realm of NP-hard/-complete tasks brings practical and theoretical challenges, resulting in evaluation protocols that are too optimistic. Specifically, most datasets only capture a simpler subproblem and likely suffer from spurious features. We investigate these effects by studying adversarial robustness\u2014a local generalization property\u2014to reveal hard, model-specific instances and spurious features. For this purpose, we derive perturbation models for SAT and TSP. Unlike in other applications, where perturbation models are designed around subjective notions of imperceptibility, our perturbation models are efficient and sound, allowing us to determine the true label of perturbed samples without a solver. Surprisingly, with such perturbations, a sufficiently expressive neural solver does not suffer from the limitations of the accuracy-robustness trade-off common in supervised learning. Although such robust solvers exist, we show empirically that the assessed neural solvers do not generalize well w.r.t. small perturbations of the problem instance.\\n\\n1 INTRODUCTION\\n\\nCombinatorial Optimization covers some of the most studied computational problems. Well-known examples are the NP-complete SATisfiability problem for boolean statements or the Travelling Salesperson Problem (TSP). These problems can be solved efficiently with approximate solvers that have been crafted over the previous decades (Festa, 2014). As an alternative to engineered, application-specific heuristics, learning seems to be a good candidate (Bengio et al., 2021) and was studied as a component in traditional solvers (e.g. Haim & Walsh (2009)). Despite deep learning for combinatorial optimization gaining attention recently, it is still an open question if and to what extent deep learning can effectively approximate NP-hard problems. Moreover, there is a \u201cCatch-22\u201d; even if neural networks could solve NP-hard problems, generating the training data is either (a) incomplete but efficient or (b) complete but inefficient (or approximate). An incomplete data generator (a) crafts the problem instances s.t. their labels are known and a complete data generator (b) obtains the labels via (approximately) solving the random instances. Additionally, a dense sample is intractable even for moderate problem sizes due to the large problem space \\\\( X \\\\).\"}"}
{"id": "vJZ7dPIjip3", "page_num": 10, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"We provide the source code and configuration for the key experiments including instructions on how to generate data and train the models. All proofs are stated in the appendix with explanations and underlying assumptions. We thoroughly checked the implementation and also verified empirically that the proposed sound perturbation models hold.\\n\\nSolving combinatorial optimization problems effectively and efficiently would benefit a wide range of applications. For example, it could further improve supply chain optimization or auto-routing electric circuits. Since combinatorial optimization is such a fundamental building block it is needless to detail how big of an impact this line of research could have. Unfortunately, this also includes applications with negative implications. Specifically, the examples about supply chain optimization and electric circuits also apply to military applications. Nevertheless, we believe that the positive impact can be much greater than the negative counterpart.\\n\\nUnarguably, studying adversarial robustness in the context of combinatorial optimization comes with the possibility of misuse. However, not studying this topic and, therefore, being unaware of the model's robustness imposes an even greater risk. Moreover, since we study white-box attacks we leave the practitioner with a huge advantage over a possible real-world adversary that e.g. does not know the weights of the model. Aside from robustness, we did not conduct dedicated experiments on the consequences on e.g. fairness for our methods or the resulting models.\\n\\nReferences\\n\\nSaeed Amizadeh, Sergiy Matusevych, and Markus Weimer. Learning to solve circuit-sat: An unsupervised differentiable approach. In 7th International Conference on Learning Representations, ICLR, New Orleans, LA, USA, May 6-9, 2019. OpenReview.net, 2019.\\n\\nDavid Applegate, Ribert Bixby, Vasek Chvatal, and William Cook. Concorde tsp solver, 2006.\\n\\nGilles Audemard and Laurent Simon. Predicting learnt clauses quality in modern sat solvers. In Proceedings of the 21st International Joint Conference on Artificial Intelligence, IJCAI'09, San Francisco, CA, USA, 2009. Morgan Kaufmann Publishers Inc.\\n\\nIrwan Bello, Hieu Pham, Quoc V Le, Mohammad Norouzi, and Samy Bengio. Neural combinatorial optimization with reinforcement learning. arXiv preprint arXiv:1611.09940, 2016.\\n\\nYoshua Bengio, Andrea Lodi, and Antoine Prouvost. Machine learning for combinatorial optimization: A methodological tour d'horizon. European Journal of Operational Research, 290(2), 2021. Publisher: Elsevier.\\n\\nXavier Bresson and Thomas Laurent. The transformer network for the traveling salesman problem. CoRR, abs/2103.03012, 2021.\\n\\nChris Cameron, Rex Chen, Jason Hartford, and Kevin Leyton-Brown. Predicting propositional satisfiability via end-to-end learning. In Proceedings of the AAAI Conference on Artificial Intelligence, 2020.\\n\\nQuentin Cappart, Didier Ch\u00e9telat, Elias Khalil, Andrea Lodi, Christopher Morris, and Petar Veli\u010dkovi\u0107. Combinatorial optimization and reasoning with graph neural networks. arXiv:2102.09544 [cs, math, stat], Apr. 2021. arXiv: 2102.09544.\\n\\nM. Cutler. Efficient special case algorithms for the n-line planar traveling salesman problem. Networks, 10(3), 1980. eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/net.3230100302.\\n\\nHanjun Dai, Hui Li, Tian Tian, Huang Xin, Lin Wang, Zhu Jun, and Song Le. Adversarial attack on graph structured data. 35th International Conference on Machine Learning, ICML, 3, 2018.\"}"}
{"id": "vJZ7dPIjip3", "page_num": 11, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":null}"}
{"id": "vJZ7dPIjip3", "page_num": 12, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":null}"}
{"id": "vJZ7dPIjip3", "page_num": 13, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"If the accuracy robustness trade-off existed for neural combinatorial optimization, it would imply that it is hopeless to strive for an accurate general-purpose neural combinatorial solver. Fortunately, this is not the case. To show this we built upon the ideas of Suggala et al. (2019) but we only consider the special case of combinatorial decision problems where each possible prediction \\\\( \\\\hat{Y} \\\\) is either true or false (i.e. no stochasticity of the true label as long as we account for the ambiguity in \\\\( Y \\\\)).\\n\\nFor general learning tasks, Suggala et al. (2019) refined the classical definition of adversarial robustness s.t. there is provably no such trade-off in general classification tasks if either the dataset is \u201cmargin separable\u201d or when we restrict the perturbation space to be label-preserving for a Bayes optimal classifier.\\n\\nFor combinatorial optimization with a sound perturbation model \\\\( G \\\\) we can argue both ways. First, due to the soundness we never encourage a wrong prediction (i.e. the margin condition is naturally fulfilled). This is contrast to e.g. image classification where an instance close to the decision boundary with the common \\\\( L^p \\\\) perturbation model \\\\( \\\\|x - \\\\tilde{x}\\\\|_p \\\\leq r \\\\) changes its true label or becomes meaningless (e.g. a gray image) for a large enough \\\\( r \\\\). Second, the Bayes optimal classifier for combinatorial optimization solves the optimization problem perfectly on \\\\( p(x) \\\\) (with support \\\\( \\\\text{support}(p(x)) \\\\subseteq X \\\\)).\\n\\nFor these reasons, we do not need to include the Bayes optimal classifier in the definition of the attack (Eq. 1).\\n\\nMore formally, we show by contradiction that any minimizer \\\\( f^* = \\\\arg \\\\min_{f \\\\in F} R_{\\\\text{adv},G}(f) \\\\) is optimal w.r.t. \\\\( \\\\min_{f \\\\in F} R(f) \\\\). Let \\\\( \\\\hat{f} \\\\) be an optimal classifier w.r.t. \\\\( R(f) \\\\) for a combinatorial decision problem. We assume the loss \\\\( \\\\ell \\\\) is equal for all possible optimal \\\\( \\\\hat{Y} \\\\), to account for the multiple possible \\\\( \\\\hat{Y} \\\\) and define the adversarial risk \\\\( R_{\\\\text{adv},G}(f) = \\\\mathbb{E}_{x \\\\sim p(x)} \\\\left[ \\\\max_{\\\\tilde{x} \\\\in G(x,\\\\hat{Y})} \\\\ell(f_\\\\theta(\\\\tilde{x}), h(\\\\tilde{x}, x, \\\\hat{Y})) \\\\right] \\\\) for any data distribution \\\\( p(x) \\\\) and the standard risk \\\\( R(f) = \\\\mathbb{E}_{x \\\\sim p(x)} \\\\left[ \\\\ell(f_\\\\theta(x), \\\\hat{Y}) \\\\right] \\\\). W.l.o.g. we assume the best possible risk is zero \\\\( R^* = 0 \\\\) (i.e. the prediction is always true).\\n\\nSuppose \\\\( f^* \\\\) and \\\\( \\\\hat{f} \\\\) differ in their prediction \\\\( f^*(x) \\\\neq \\\\hat{f}(x) \\\\) over a non-empty subset of support \\\\( \\\\text{support}(p(x)) \\\\). Since \\\\( f^* \\\\) is optimal and there is no stochasticity in the true label \\\\( Y \\\\), it is always correct with standard risk \\\\( R(f^*) = 0 \\\\) and, analogously, \\\\( R_{\\\\text{adv},G}(f^*) = 0 \\\\). Thus, \\\\( \\\\hat{f} \\\\) cannot be an optimizer of \\\\( \\\\hat{f} = \\\\arg \\\\min_{f \\\\in F} R(f) \\\\) if its predictions differs over a non-empty subset of support \\\\( \\\\text{support}(p(x)) \\\\).\\n\\nNote that this also holds for support \\\\( \\\\text{support}(p(x)) \\\\subseteq \\\\text{support}(G(p(x))) \\\\subseteq X \\\\) which is indeed the interesting case for contemporary data generators and models.\\n\\n**Proposition 1**\\n\\nLet \\\\( x = k_1(v_1, \\\\ldots, v_n) \\\\wedge \\\\ldots \\\\wedge k_m(v_1, \\\\ldots, v_n) \\\\) be a boolean statement in Conjunctive Normal Form (CNF) with \\\\( m \\\\) clauses and \\\\( n \\\\) variables. Then \\\\( \\\\tilde{x} \\\\), a perturbed version of \\\\( x \\\\), has the same label \\\\( y = \\\\tilde{y} \\\\) in the following cases:\\n\\n- **SAT**: \\\\( x \\\\) is satisfiable \\\\( y = 1 \\\\) with truth assignment \\\\( \\\\hat{Y} \\\\). Then, we can arbitrarily remove or add literals in \\\\( x \\\\) to obtain \\\\( \\\\tilde{x} \\\\), as long as one literal in \\\\( \\\\hat{Y} \\\\) remains in each clause.\\n- **DEL**: \\\\( x \\\\) is unsatisfiable \\\\( y = 0 \\\\) and we obtain \\\\( \\\\tilde{x} \\\\) from \\\\( x \\\\) through arbitrary removals of literals, as long as one literal per clause remains.\\n- **ADC**: \\\\( x \\\\) is unsatisfiable \\\\( y = 0 \\\\). Then, we can arbitrarily remove, add, or modify clauses in \\\\( x \\\\) to obtain \\\\( \\\\tilde{x} \\\\), as long as there remains a subset of clauses that is unsatisfiable in isolation.\\n\\nW.l.o.g. we assume that an empty clause is true. That is, we evaluate the expression if the empty clauses were not there. Moreover, we assume to know one possible \\\\( \\\\hat{Y} \\\\) (multiple might exist).\"}"}
{"id": "vJZ7dPIjip3", "page_num": 18, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table F.1: Hyperparameters for the attacks on TSP proposed in \u00a7 5\\n\\n|                  | DTSP | ConvTSP |\\n|------------------|------|---------|\\n| maximum number of adv. nodes | 5    | 5       |\\n| attack steps     | 200  | 500     |\\n| learning rate    | 0.001| 0.01    |\\n| gradient project learning rate | 0.002| 0.002   |\\n| gradient project steps | 3    | 3       |\\n\\ninstance \\\\( x \\\\in [0, 1]^{(n + \\\\Delta) \\\\times 2} \\\\) which maximizes the loss:\\n\\n\\\\[\\n\\\\max_{\\\\tilde{x}} \\\\ell(f_\\\\theta(\\\\tilde{x}), Y) \\\\quad \\\\text{s.t.} \\\\quad \\\\forall \\\\tilde{x}_i \\\\text{ with } i > n \\\\text{ Proposition 2 holds (F.1)}\\n\\\\]\\n\\nAttack details. The input of the TSP is represented by the coordinates \\\\( x \\\\in [0, 1]^{n \\\\times 2} \\\\) for the \\\\( n \\\\) nodes. Additionally, we know the near-optimal route \\\\( Y \\\\) obtained with the Concorde solver which we use as ground truth. During the TSP attack we add additional adversarial nodes \\\\( Z \\\\in [0, 1]^{\\\\Delta \\\\times 2} \\\\) to the input problem \\\\( x \\\\). The adversarial nodes are initialized by randomly sampling nodes until they fulfill the constraint from Proposition 2 (line 1). For the attack, as described in Algorithm F.1, we operate solely on the coordinates of the adversarial nodes and assume that the model converts the coordinates into a weighted graph. For the DTSP model, we additionally calculate the updated route cost \\\\( c_0 \\\\) (accordingly to \\\\( y \\\\)) and append it to the input. For simplicity, we omitted this special case in Algorithm F.1. Moreover, for the DTSP we do not pass \\\\( \\\\tilde{Y} \\\\) to the loss; instead, we use the decision label \\\\( y \\\\) that is kept constant throughout the optimization. We then obtain the updated coordinates \\\\( \\\\tilde{Z} \\\\) for the perturbed solution \\\\( \\\\tilde{Y} \\\\) (lines 5-6). In the project step (line 7), we only consider the coordinates in \\\\( Z \\\\) that violate the constraint. As discussed in \u00a7 5.2, we perform gradient descent on the constraint due to its non-convexity. We decide against optimizing the Lagrangian since this would require evaluating the neural solver \\\\( f_\\\\theta \\\\) and, therefore, is less efficient. For the projection, we update the adversarial node \\\\( i \\\\) that violates the constraint with \\\\( Z_i \\\\leftarrow Z_i - \\\\eta \\\\nabla Z_i \\\\left[ \\\\omega(P, Z_i) + \\\\omega(Q, Z_i) - \\\\omega(P, Q) \\\\right] \\\\) until the constrain is fulfilled again but for at most three consecutive steps.\\n\\nAlgorithm F.1: TSP Attack\\n\\nData: Node Coords \\\\( x \\\\in [0, 1]^{n \\\\times 2} \\\\), steps \\\\( s \\\\), learning rate \\\\( \\\\alpha \\\\), TSP model \\\\( f_\\\\theta \\\\), Adversarial Coords \\\\( Z \\\\in [0, 1]^{\\\\Delta \\\\times 2} \\\\)\\n\\nResult: Perturbed Node Coords \\\\( \\\\tilde{x} \\\\in [0, 1]^{(n + \\\\Delta) \\\\times 2} \\\\)\\n\\n1. Initialize \\\\( Z \\\\leftarrow \\\\text{random-allowed-point}() \\\\)\\n2. for \\\\( t \\\\in \\\\{0, 1, \\\\ldots, s - 1\\\\} \\\\) do\\n3. \\\\( \\\\text{mask} \\\\leftarrow \\\\text{is-constraint-fulfilled}(Z, x) \\\\)\\n4. \\\\( \\\\tilde{x} \\\\leftarrow \\\\text{append}(x, Z[\\\\text{mask}]) \\\\)\\n5. \\\\( \\\\tilde{Y} \\\\leftarrow \\\\text{update-solution}(\\\\tilde{x}, Y) \\\\)\\n6. \\\\( Z \\\\leftarrow \\\\text{update}(Z, \\\\alpha, \\\\nabla_\\\\ell(f_\\\\theta(W), \\\\tilde{Y})) \\\\)\\n7. \\\\( Z \\\\leftarrow \\\\text{project}(Z, x) \\\\); \\n8. end\\n9. return \\\\( \\\\tilde{x}, \\\\tilde{Y} \\\\)\\n\\nComputational complexity. We again assume that the model has a linear time and space complexity. This time it is linear w.r.t. the \\\\( O(n^2) \\\\) number of elements in the distance matrix between the input coordinates. The most costly operation we add, is the check if the constraint is violated or not for each of the potentially added nodes \\\\( \\\\Delta \\\\). This operation has a time and space complexity of...\"}"}
{"id": "vJZ7dPIjip3", "page_num": 19, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table G.1: Runtime in milliseconds for the Glucose and MiniSAT solver on 100 clean and perturbed problem instances from 50-100\\n\\n| Perturbed DEL ADC SAT | Glucose       | MiniSAT      |\\n|-----------------------|---------------|--------------|\\n|                       | 0.1897 \u00b1 0.20 | 0.1351 \u00b1 0.07 |\\n|                       | 0.1944 \u00b1 0.13 | 0.1510 \u00b1 0.11 |\\n|                       | 0.1315 \u00b1 0.06 | 0.0980 \u00b1 0.05 |\\n| \u2713                     | 0.0335 \u00b1 0.03 | 0.0189 \u00b1 0.02 |\\n|                       | 0.0816 \u00b1 0.11 | 0.0587 \u00b1 0.09 |\\n|                       | 0.1391 \u00b1 0.08 | 0.1383 \u00b1 0.31 |\\n\\n$O(n^2)$ since we need to evaluate the distances to all nodes (except the special case where both nodes are on the convex hull but are non-adjacent, see Corollary 2). However, checking the constraint has the same complexity as the neural solver. Therefore, the overall space complexity turns out to be $O(\\\\Delta n^2) = O(n^2)$ and the time complexity is $O(n^2 s)$ with the number of attack steps $s$.\\n\\nComparison SAT Solvers.\\n\\nWe test two SAT-solver's runtime on all attacks for both clean and perturbed samples from the 50-100 dataset to better understand the difficulty of the samples for non-neural SAT solvers. Table G.1 shows the mean as well as the standard deviation of the Glucose (Audemard & Simon, 2009) as well as the MiniSAT (S\u00f6rensson & Een, 2005) solver. The results suggest that both solvers can more quickly find that a sample is unsatisfiable for perturbed samples from both the DEL and the ADC attacks. For perturbed satisfiable samples, the runtime increases compared to the clean sample for the MiniSAT solver while Glucose solver needs about the same time as for the clean sample to find a solution.\\n\\nCONVERGENCE\\n\\nComplementary to Fig. 5, we also present the convergence for 100 randomly chosen satisfiable instances from the 10-40 dataset. We see that the observations drawn from Fig. 5 also hold here: (1) rarely an instance is predicted as SAT despite the moderate budget of perturbing 5% of the literals and (2) if NeuroSAT identifies the sample as satisfiable it requires more message passing steps to do so.\\n\\nEFFICIENCY\\n\\nTo better understand the efficiency of the NeuroSAT attacks and how many gradient update steps are needed to flip the model's prediction, we show additional results for the attack strength over several attack step budgets in Fig. I.1. The indicated number of gradient update steps are taken during the attack, while retaining the learning rate from Table E.1 and early stopping on an instance level. The results in Fig. I.1 show that only 1 gradient update step suffices for the SAT attack to decrease the accuracy from 79% to 26%. Compared to the results from Fig. 2, where the random attack draws a single sample and only decreases the accuracy to 74%, the importance of the guidance through the gradient update becomes apparent. For the DEL attack on the NeuroSAT model, the attack strength\"}"}
{"id": "vJZ7dPIjip3", "page_num": 20, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"converges around 200 steps, showing again the imbalance between the labels with regards to how many misclassifications the attack can force.\\n\\n![Graph](image.png)\\n\\n**Figure I.1:** Attacks on NeuroSAT with varying number of attack steps\\n\\n| Attack Steps | Accuracy |\\n|--------------|----------|\\n| 1            | 0.2      |\\n| 5            | 0.4      |\\n| 50           | 0.6      |\\n| 100          | 0.8      |\\n\\n![Graph](image.png)\\n\\n**Table I.1:** Number of random samples to match optimized loss\\n\\n| \u2206   | SAT   | DEL   |\\n|-----|-------|-------|\\n| 0.01| 1257  | 749   |\\n| 0.05| 9532  | 4854  |\\n\\nIn Table I.1 we further compare the efficiency of the attacks to the random baseline. Random samples are drawn until the loss matches or exceeds that of the adversarially perturbed sample. We introduce a cut-off at 20000 samples and report the mean number of samples for the SAT and DEL attack on the budgets $\\\\Delta = 0.01$ and $\\\\Delta = 0.05$. We can observe that the additional computational cost of generating adversarial samples is justified, given the random baseline performs comparably well only with several thousand random samples drawn. While the efficiency of the proposed approach in general is important to consider for practical relevance, it is not sufficient to only compare to the random baseline in terms of sample efficiency. There are several other aspects to consider, like additional computational and storage overhead for a larger, denser dataset or to what extent a larger dataset of random or adversarial examples can improve generalization.\\n\\n**JQUALITATIVE RESULTS**\\n\\nSAT\\n\\nTo illustrate the changes to SAT problems, we provide an example for a successful attack on a small and fairly simple problem (from SAT-3-10). While the model recognizes the problem below as satisfiable with 100% confidence, the SAT attack perturbs it (modified clauses highlighted blue) such that the model votes 'satisfiable' with only 0.59% confidence.\\n\\n**Clean SAT Problem:**\\n\\n$$\\\\neg 4 \\\\lor \\\\neg 3 \\\\lor 1 \\\\lor 2 \\\\land 1 \\\\lor 2 \\\\lor 3 \\\\lor 4 \\\\land \\\\neg 4 \\\\lor \\\\neg 3 \\\\lor \\\\neg 2 \\\\lor \\\\neg 1 \\\\land \\\\neg 3 \\\\lor 2 \\\\land \\\\neg 2 \\\\lor \\\\neg 1 \\\\lor 3 \\\\lor 4 \\\\land \\\\neg 3 \\\\lor 1 \\\\land \\\\neg 2 \\\\lor 1 \\\\lor 3 \\\\lor 4 \\\\land \\\\neg 4 \\\\lor \\\\neg 2 \\\\lor 1$$\\n\\n**Perturbed SAT Problem:**\\n\\n$$\\\\neg 4 \\\\lor \\\\neg 3 \\\\lor 1 \\\\lor 2 \\\\land 1 \\\\lor 2 \\\\lor 3 \\\\lor 4 \\\\land \\\\neg 4 \\\\lor \\\\neg 3 \\\\lor \\\\neg 2 \\\\lor \\\\neg 1 \\\\land \\\\neg 3 \\\\lor 2 \\\\land \\\\neg 2 \\\\lor \\\\neg 1 \\\\lor 3 \\\\lor 4 \\\\land \\\\neg 3 \\\\lor 1 \\\\land \\\\neg 2 \\\\lor 1 \\\\lor 3 \\\\lor 4 \\\\land \\\\neg 4 \\\\lor \\\\neg 2 \\\\lor 1$$\"}"}
{"id": "vJZ7dPIjip3", "page_num": 21, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"In this section we complement the figures Fig. 7 and Fig. 9 with further examples. In Fig. K.1, we plot further examples for the attack on DTSP and further examples for ConvTSP in Fig. K.2.\\n\\n(a) \\n(b) \\n(c) \\n\\nFigure K.1: Examples of the optimal route \\\\( Y \\\\) and perturbed routes \\\\( \\\\tilde{Y} \\\\) for DecisionTSP.\\n\\nConcorde Perturbed Clean Adv. Points \\n\\n(a) \\n(b) \\n(c) \\n(d) \\n(e) \\n(f) \\n\\nFigure K.2: Exemplary problem instances where the attack successfully changed the optimal route for ConvTSP that show drastic changes of the prediction.\"}"}
{"id": "vJZ7dPIjip3", "page_num": 14, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"SAT: Every disjunctive clause evaluates to one, if one literal is true. Since we keep at least one literal in $Y$ in each clause, every clause evaluates to one. The statement evaluates to one since the conjunction of true statement is also true.\\n\\nDEL: Since every clause is a disjunction of literals, the removal of one/some of the literals strictly reduces the number of specifiable assignments. That is, removing any literal $l_i$ from its clause removes the possibility to satisfy this clause through $l_i = 1$.\\n\\nADC: Since the clauses are a conjunctive, all clauses need to evaluate to true. If a subset of clauses it not satisfiable by themselves (i.e. not all can be true at the same time), the expression necessarily resolves to 0.\\n\\nHence, all conditions in Proposition 1 do not change the satisfiability $y$, but might alter $Y$. It is apparent that the updated $Y$ can be obtained efficiently. \u25a1\\n\\n**Proof of Proposition 2**\\n\\n**Proposition 2**\\n\\nLet $\\\\sigma^*$ be the optimal route over the nodes $V$ in $G$, let $Z \\\\not\\\\in V$ be an additional node, and $P, Q$ are any two neighbouring nodes on $\\\\sigma^*$. Then, the new optimal route $\\\\tilde{\\\\sigma}^*$ (including $Z$) is obtained from $\\\\sigma^*$ through inserting $Z$ between $P$ and $Q$ if $\\\\not\\\\exists (A,B) \\\\in V^2 \\\\setminus \\\\{(P,Q)\\\\}$ with $A \\\\neq B$ s.t.\\n\\n$$\\\\omega(A,Z) + \\\\omega(B,Z) - \\\\omega(A,B) \\\\leq \\\\omega(P,Z) + \\\\omega(Q,Z) - \\\\omega(P,Q).$$\\n\\n**Corollary 1**\\n\\nWe can add multiple nodes to $G$ and obtain the optimal route $\\\\tilde{\\\\sigma}^*$ as long as the condition of Proposition 2 (including the other previously added nodes) is fulfilled.\\n\\n**Corollary 2**\\n\\nFor the metric TSP, it is sufficient if the condition of Proposition 2 holds for $(A,B) \\\\in V^2 \\\\setminus \\\\{(P,Q)\\\\} \\\\cup H$ with $A \\\\neq B$ where $H$ denotes the pairs of nodes both on the Convex Hull $H \\\\in CH(V)$ that are not a line segment of the Convex Hull.\\n\\n**Proof.** We proof by contradiction. We define $(R,S) \\\\in V^2 \\\\setminus \\\\{(P,Q)\\\\}$ to be the two neighboring nodes of $Z$ on $\\\\tilde{\\\\sigma}^*$. Suppose $\\\\omega(P,Z) + \\\\omega(Q,Z) - \\\\omega(P,Q) < \\\\omega(R,Z) + \\\\omega(S,Z) - \\\\omega(R,S)$ and $\\\\tilde{\\\\sigma}^*$ would not contain the edges $\\\\omega(P,Z)$ as well as $\\\\omega(Q,Z)$.\\n\\nWe know by optimality of $\\\\sigma^*$ that $c(\\\\tilde{\\\\sigma}^*) - \\\\omega(R,Z) - \\\\omega(S,Z) + \\\\omega(R,S) \\\\geq c(\\\\sigma^*)$ and by optimality of $\\\\tilde{\\\\sigma}^*$ that $c(\\\\sigma^*) + \\\\omega(P,Z) + \\\\omega(Q,Z) - \\\\omega(P,Q) \\\\geq c(\\\\tilde{\\\\sigma}^*)$.\\n\\nThus, $c(\\\\sigma^*) + \\\\omega(P,Z) + \\\\omega(Q,Z) - \\\\omega(P,Q) \\\\geq c(\\\\tilde{\\\\sigma}^*) \\\\geq c(\\\\sigma^*) + \\\\omega(R,Z) + \\\\omega(S,Z) - \\\\omega(R,S)$ and equivalently $\\\\omega(P,Z) + \\\\omega(Q,Z) - \\\\omega(P,Q) \\\\geq \\\\omega(R,Z) + \\\\omega(S,Z) - \\\\omega(R,S)$ which leads to a contradiction. Since we do not know what edges are contained in $\\\\tilde{\\\\sigma}^*$ (i.e. what nodes could be $R$ and $S$) we state the stricter condition $\\\\not\\\\exists (A,B) \\\\in V^2 \\\\setminus \\\\{(P,Q)\\\\}$ with $A \\\\neq B$ s.t.\\n\\n$$\\\\omega(A,Z) + \\\\omega(B,Z) - \\\\omega(A,B) \\\\leq \\\\omega(P,Z) + \\\\omega(Q,Z) - \\\\omega(P,Q).$$\\n\\n\u25a1\\n\\nIf multiple $\\\\sigma^*$ exist, then this statement holds for any optimal route that has a direct connection between $P$ and $Q$. Corollary 1 follows by induction and Corollary 2 is due to the fact that in the metric space the optimal route $\\\\tilde{\\\\sigma}^*$ must be a simple polygon (i.e. no crossings are allowed). This was first stated for an euclidean space as \\\"the intersection theorem\\\" by Cutler (1980) and is a direct consequence of the triangle inequality. Also note, alternatively to the proof presented here, one can also unfold the dynamic program proposed by Rote (1991) to end up at Proposition 2.\"}"}
{"id": "vJZ7dPIjip3", "page_num": 15, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Algorithm D.1: Projected Gradient Descent\\n\\nData: Problem \\\\((x, y)\\\\) and possibly \\\\(y\\\\), Solver \\\\(f_{\\\\theta}(\\\\cdot)\\\\), Loss \\\\(\\\\ell\\\\), budget \\\\(\\\\Delta\\\\), attack steps \\\\(s\\\\), learn rate \\\\(\\\\alpha\\\\)\\n\\n1. \\\\(\\\\tilde{x}_0 \\\\leftarrow \\\\text{initialize}(x, Y, \\\\Delta)\\\\)\\n\\n2. For \\\\(t \\\\in \\\\{0, 1, \\\\ldots, s-1\\\\}\\\\) do\\n\\n3. \\\\(\\\\tilde{x}_t'_{t+1} \\\\leftarrow \\\\text{update}(\\\\tilde{x}_t, \\\\alpha_t, \\\\nabla\\\\ell(f_{\\\\theta}(\\\\tilde{x}_t), h(\\\\tilde{x}_t, x, Y)))\\\\)\\n\\n4. \\\\(\\\\tilde{x}_{t+1} \\\\leftarrow \\\\text{project}(\\\\tilde{x}_t', x, \\\\Delta)\\\\)\\n\\n5. End\\n\\n6. \\\\(\\\\tilde{x} \\\\leftarrow \\\\text{postprocess}(\\\\tilde{x}_{E}, \\\\Delta)\\\\)\\n\\n7. Return \\\\(\\\\tilde{x}, h(\\\\tilde{x}, x, Y)\\\\)\\n\\nPGD is one of the most successful and widely studied approaches to craft adversarial examples. For further techniques and a broader overview of adversarial robustness in various domains, we refer to Xu et al. (2020).\\n\\nAll our attacks roughly match the framework of Algorithm D.1. First, we initialize the perturbed instance, or, alternatively, we can use some variable that models the difference to the clean instance (line 1). Initialization strategies that we consider are random initialization or initializing to the clean instance. Then we perform the attack for \\\\(s\\\\) steps and in each step update the perturbed instance through a gradient descent step (line 3). For faster convergence we additionally use Adam as optimizer (Kingma & Ba, 2015). After the gradient update we perform a projection step that ensures we stay within the budget \\\\(\\\\Delta\\\\) or satisfy other constraints.\\n\\nFor simplicity, we omit the fact that we use early stopping in all our algorithms. Specifically, in each attack step we check if the current perturbed instance \\\\(\\\\tilde{x}_{t+1}\\\\) comes with the best loss so far. Then, after \\\\(s\\\\) attack steps we assign the best possible \\\\(\\\\tilde{x}_s \\\\leftarrow \\\\arg\\\\max_{t \\\\in \\\\{1, \\\\ldots, s\\\\}} \\\\ell(f_{\\\\theta}(\\\\tilde{x}_t), h(\\\\tilde{x}_t, x, Y))\\\\). This happens right before we (optionally) perform a postprocessing. Finally, we return the perturbed instance \\\\(\\\\tilde{x}\\\\) with solution \\\\(Y\\\\) or decision label \\\\(y\\\\).\\n\\nLimitations. As discussed in \u00a7 3, we require the model to be differentiable w.r.t. its input. Fortunately, most neural combinatorial solvers rely on GNNs and therefore this does not impose an issue. However, even if assessing a non-differentiable model one could revert to derivative-free optimization (Yang & Long, 2021).\\n\\nFor some combinatorial optimization problems the number of variables we need to optimize over can be very large. For example, when attacking a Maximum Independent Set neural solver (Li et al., 2018) using our perturbation models for SAT, we need to construct a graph that blows up quickly. Nevertheless, this could be done with derivative-free optimization (Yang & Long, 2021) or a scalable variant of \\\\(L_0\\\\)-PGD called projected randomized block coordinate descent (Geisler et al., 2021).\\n\\nSAT ATTACK DETAILS\\n\\nSAT model description. Selsam et al. (2019) propose to model the input problem as a bipartite graph as described in \u00a7 4.2. We instantiate the model as described in their paper: over 26 message passing steps the GNN updates its embeddings of size 128. Clause nodes and literal nodes have separate LSTMs to update their embeddings with messages produced by 3-layer MLPs. After the last message passing steps, the output vote on whether the problem is satisfiable or not is obtained by transforming the clause embeddings with an additional vote-MLP and averaging over the final votes of the literal nodes. The paper also notes that the number of message passing steps has to be adapted to the problem size. As no specific values are provided, we use 64 steps for the 50-100 dataset and 128 steps for the SATLIB and uni3sat data.\\n\\nSelsam et al. (2019) trained their model in a single epoch on a large dataset consisting of \u201cmillions of samples\u201d. However, since Selsam et al. (2019) did not publish their dataset we used a total of 60,000 samples with the very same data generation strategy. We then use 50,000 of the samples to train the model for 60 epochs. With this strategy we closely match the reported performance. For the larger train set in Table 1 we generate an additional 5,000 samples. During training we use the same hyperparameters as described in the paper. Please use the referenced code for exactly reproducing the dataset.\"}"}
{"id": "vJZ7dPIjip3", "page_num": 16, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Published as a conference paper at ICLR 2022\\n\\nOptimization Problem.\\n\\nWe restate the optimization problem for an adversarial attack on a SAT decision problem. The SAT attack tries to find a perturbed instance $\\\\tilde{x}$ that maximizes the loss $\\\\ell$ s.t. every clause contains at least one literal $l_j$ that is present in the solution assignments $Y = \\\\{l_1^*, ..., l_n^* | l_i^* \\\\in \\\\{\\\\neg v_i, v_i\\\\}\\\\}$. Here we omit that we additionally constrain the number of inserted/removed literals relatively to the number of literals in the clean instance $x$ via budget $\\\\Delta$.\\n\\n$$\\\\max_{\\\\tilde{x}} \\\\ell(f_\\\\theta(\\\\tilde{x}), y = 1) \\\\quad \\\\text{s.t.} \\\\quad \\\\forall \\\\tilde{k}_i \\\\in \\\\tilde{x}: (\\\\exists l_j \\\\in \\\\tilde{k}_i \\\\text{ with } l_j = l_j^*)$$\\n\\nThe ADC attack maximizes the loss by adding clauses to the problem, meaning that every clause $k_i$ in the original problem $x$ has to be present also in the perturbed instance $\\\\tilde{x}$, as these clauses ensure that the problem remains unsatisfiable:\\n\\n$$\\\\max_{\\\\tilde{x}} \\\\ell(f_\\\\theta(\\\\tilde{x}), y = 0) \\\\quad \\\\text{s.t.} \\\\quad \\\\forall k_i \\\\in x: k_i \\\\in \\\\tilde{x}$$\\n\\nLastly, the DEL attack optimizes over what literals to delete from the problem's clauses, as long as no clause is removed completely. This results in the following optimization problem:\\n\\n$$\\\\max_{\\\\tilde{x}} \\\\ell(f_\\\\theta(\\\\tilde{x}), y = 0) \\\\quad \\\\text{s.t.} \\\\quad \\\\forall \\\\tilde{k}_i \\\\in \\\\tilde{x}: \\\\tilde{k}_i \\\\subseteq k_i \\\\land \\\\text{nonempty}(\\\\tilde{k}_i)$$\\n\\nAttack Details.\\n\\nThe attack on SAT problems modifies the literals that are contained in clauses. This means specifically that we optimize over the edges represented by the literals-clauses adjacency matrix $x = A \\\\in \\\\{0, 1\\\\}^{2n \\\\times m}$. We implemented these attacks such that they can operate on batches of problems, however we omit this at this point in the following for an improved readability.\\n\\nAlgorithm E.1 describes in detail SAT and DEL (see Proposition 1). The difference of the adjacency matrix $A$ to the adversarially perturbed version $\\\\tilde{A}$ is modelled via the perturbation matrix $M$: $(\\\\tilde{x} = \\\\tilde{A} = A \\\\oplus M)$. We then optimize over $M$. During the SAT attack, we allow deletions and additions of edges, as long as one solution-preserving truth assignment per clause, described by the indicator $T = \\\\text{onehot}(Y)$, is preserved (line 7). For the DEL attack only deletions are allowed, under the constraint that no clause can be fully deleted (lines 9 & 10). Additionally, a global budget is enforced (line 6). For details on the budget as well as other hyperparameters of the attack, we refer to Table E.1.\\n\\nAlgorithm E.2 describes the ADC attack. The perturbation matrix $M \\\\in \\\\{0, 1\\\\}^{2n \\\\times \\\\tilde{m}}$ describes additional clauses appended to the original problem (line 4). The attack can freely optimize over $M$ but the number of literals/edges. $\\\\Delta$ is enforced s.t. on average each clause contains as many literals as a clause in $A$ (line 6).\\n\\nTable E.1: Hyperparameters for the attacks on NeuroSAT proposed in \u00a7 4\\n\\n| Attack  | Steps | Learning Rate | Fraction of Perturbed Literals | # Final Samples | Temperature Scaling |\\n|---------|-------|---------------|-------------------------------|----------------|-------------------|\\n| SAT     | 500   | 0.1           | 5% of edges                  | 20             | 5                 |\\n| DEL     | 500   | 0.1           | 5% of edges                  | 20             | 5                 |\\n| ADC     | 500   | 0.1           | 25% of clauses               | 20             | 5                 |\\n\\nBecause the attack optimizes over a set of discrete edges with a gradient based method, similarly to (Xu et al., 2019), we relax the edge weights to $[0, 1]$ during the attack. Before generating the perturbed problem instance $\\\\tilde{A}$, we sample the discrete $M'$ from a Bernoulli distribution where the entries of the matrix $M$ represent the probability of success. In contrast to (Xu et al., 2019) we sample 19 instead of 20 times but add an additional sample that chooses the top elements in $M$.\\n\\nThereafter, we take the sample that maximizes the loss. Moreover, our projection differs slightly from the one proposed by Xu et al. (2019) since we iteratively enforce the budget instead of performing a bisection search.\"}"}
{"id": "vJZ7dPIjip3", "page_num": 17, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Algorithm E.1: SAT & DEL Attack\\n\\nData:\\n\\\\( A \\\\in \\\\{0, 1\\\\}^{2n \\\\times m} \\\\), edge budget \\\\( \\\\Delta \\\\), steps \\\\( s \\\\), learning rate \\\\( \\\\alpha \\\\), solution \\\\( T \\\\in \\\\{0, 1\\\\}^{2n \\\\times m} \\\\), SAT model \\\\( f_{\\\\theta} \\\\), label \\\\( y \\\\)\\n\\nResult:\\nPerturbed Adjacency \\\\( \\\\tilde{A} \\\\)\\n\\n1. Initialize \\\\( M \\\\leftarrow 0^{2n \\\\times m} \\\\)\\n2. for \\\\( t \\\\in \\\\{0, 1, \\\\ldots, s-1\\\\} \\\\) do\\n3. if \\\\( y \\\\) then\\n4. \\\\( \\\\tilde{A} \\\\leftarrow A \\\\oplus M \\\\)\\n5. else\\n6. \\\\( \\\\tilde{A} \\\\leftarrow A - M \\\\)\\n7. \\\\( M \\\\leftarrow \\\\text{update}(M, \\\\alpha, \\\\nabla \\\\ell(f_{\\\\theta}(\\\\tilde{A}), y)) \\\\)\\n8. \\\\( M \\\\leftarrow \\\\text{project-budget}(M, \\\\Delta) \\\\)\\n9. if \\\\( y \\\\) then\\n10. \\\\( M \\\\leftarrow M \\\\ast T \\\\)\\n11. else\\n12. \\\\( M \\\\leftarrow M \\\\ast A \\\\)\\n13. \\\\( M \\\\leftarrow \\\\text{ensure-no-del}(M) \\\\)\\n14. \\\\( M' \\\\leftarrow \\\\text{sample}(M) \\\\)\\n15. \\\\( \\\\tilde{A} \\\\leftarrow A \\\\oplus M' \\\\)\\n\\nAlgorithm E.2: ADC Attack\\n\\nData:\\n\\\\( A \\\\in \\\\{0, 1\\\\}^{2n \\\\times \\\\tilde{m}} \\\\), clause budget \\\\( \\\\omega \\\\), steps \\\\( s \\\\), learning rate \\\\( \\\\alpha \\\\), SAT model \\\\( f_{\\\\theta} \\\\)\\n\\nResult:\\nPerturbed Adjacency \\\\( \\\\tilde{A} \\\\)\\n\\n1. Initialize \\\\( M \\\\leftarrow 0^{2n \\\\times \\\\tilde{m}} \\\\)\\n2. \\\\( \\\\Delta \\\\leftarrow \\\\text{avg}(A, \\\\text{axis}=0) \\\\ast \\\\tilde{m} \\\\)\\n3. for \\\\( t \\\\in \\\\{0, 1, \\\\ldots, s-1\\\\} \\\\) do\\n4. \\\\( \\\\tilde{A} \\\\leftarrow \\\\text{append}(A, M) \\\\)\\n5. \\\\( M \\\\leftarrow \\\\text{update}(M, \\\\alpha, \\\\nabla f_{\\\\theta}(\\\\tilde{A}), y) \\\\)\\n6. \\\\( M \\\\leftarrow \\\\text{project-budget}(M, \\\\Delta) \\\\)\\n7. end\\n8. \\\\( M' \\\\leftarrow \\\\text{sample}(M) \\\\)\\n9. \\\\( \\\\tilde{A} \\\\leftarrow \\\\text{append}(A, M') \\\\)\\n\\nComputational complexity.\\n\\nAll three attacks operate for \\\\( s \\\\) steps. Under the assumption that the models are linear w.r.t. the number of edges in the graph representation of the problem (for forward and backward pass), each step has a time complexity of \\\\( O(mn) \\\\). Therefore, the overall attack has a time complexity of \\\\( O(nms) \\\\). Under the same assumption for the memory requirements of \\\\( \\\\nabla M \\\\ell \\\\), the total space complexity is \\\\( O(nm) \\\\).\\n\\nF TSP A T DETAILS\\n\\nFor simplicity we only discuss the case of metric TSP. This is also what the used neural solvers are mainly intended for. The TSP attack is actually implemented in a batched fashion. However, for an improved readability we omit the details here. We refer to table Table F.1 for details on the attack hyperparameters.\\n\\nDTSP model.\\nThe DTSP model employs a GNN to predict whether there exists a route of certain cost on an input graph (Prates et al., 2019). The model sequentially updates the embeddings of both nodes and edges that were initialized by a 3-layer MLP with the coordinates as input. After multiple message passing steps, the final prediction is then based on the aggregation of the resulting edge embeddings. We follow the training guidelines described in the paper and train on \\\\( 2^{20} \\\\) graph samples. The graphs are generated by sampling from the unit square (\\\\( x \\\\in [0, 1]^{n \\\\times 2} \\\\)) and solutions are obtained with the concorde solver (Applegate et al., 2006). Dual problem sets are built from each graph for training, validation and test data by increasing and decreasing the true cost by a small factor.\\n\\nConvTSP model.\\nThe ConvTSP model aims at predicting the optimal route \\\\( Y = \\\\sigma \\\\) over a given graph via a GCN (Joshi et al., 2019). It predicts a probability map over the edges indicating the likelihood of an edge being present in an optimal solution. These lay the basis for different solution decoding procedures. We employ their greedy search method, where the graph is traversed based on the edges with the highest probabilities. We follow the training procedure described in the paper as well as the data generation technique. Data is generated the same way as for the DTSP model, however the target represents binary indicators whether an edge is present in the optimal solution. During training, the binary cross entropy between the target and the probability maps over the edges is minimized, and a solution-decoding technique is only applied during inference.\\n\\nOptimization problem.\\nWe again restate the optimization problem from Eq. 1 for the specific case of TSP. We add \\\\( \\\\Delta \\\\) nodes to the original problem \\\\( x \\\\in [0, 1]^{n \\\\times 2} \\\\) to create a larger, perturbed problem.\"}"}
{"id": "vJZ7dPIjip3", "page_num": 2, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"For the special case of (a) exact polynomial-time data-generators, Yehuda et al. (2020) detail two challenges as a result of the NP-hardness:\\n\\n1. Easier subproblem: a dataset from an efficient data generator only captures a strictly easier subproblem.\\n2. Spurious features: due to the lack of completeness, the resulting dataset can be trivially solvable due to superficial/spurious features.\\n\\nThese findings extrapolate to case (b) for a sufficiently sparse sample (i.e. data could have been generated by an efficient data generator). Thus, it is concerning that often the same (potentially flawed) data generator is used for training and evaluation.\\n\\nAdversarial robustness is a challenging local generalization property that offers a way of fixing the too optimistic model performance estimates that are the result of evaluations on incomplete datasets. We illustrate this in Fig. 1 for two relevant data generation schemes: (a) to the left we discuss an incomplete, efficient data generator and (b) to the right we discuss a sparse sample of a potentially complete data generator. With a suitable choice of perturbation model, we (a) possibly extend the reachable space by an efficient data generator or (b) cover the space around each instance in the sparse dataset. In other words, such adversarial attacks aim to find the intersection of the uncovered regions and hard, model-specific samples. Therefore, it is possible to detect the described defects.\\n\\nAdversarial robustness more realistically evaluates a model's generalization ability instead of simply testing on the same data generation procedure or a sparse external dataset.\\n\\nAdversarial robustness is a desirable property for neural combinatorial optimization, since, in contrast to general learning tasks, in combinatorial optimization we do not have an accuracy robustness trade-off in the sense of Suggala et al. (2019). This means, there exists a model with high accuracy and high robustness. One key factor to avoid the accuracy robustness trade-off is choosing a perturbation model that guarantees the correct label of the perturbed sample (we call them sound). This is in stark contrast to other domains where one relies on imperceptible perturbations.\\n\\nWe instantiate our adversarial attack framework for the NP-complete SAT and TSP. Nevertheless, most of the principles can be transferred to other combinatorial optimization problems. Note that often such problems can be even reduced onto one another, as is the case for e.g. SAT and the maximum independent set. Having said this, we select SAT because of its general applicability and the notoriously challenging TSP due to its practical importance (e.g. for supply chain optimization). We then use our attacks to show that the evaluated neural SAT and TSP solvers are highly non-robust.\\n\\nContributions. (1) We bring the study of adversarial robustness to the field of neural combinatorial solvers to tackle fundamental problems in the evaluation of neural solvers. (2) We propose perturbation models for SAT and TSP s.t. we efficiently determine the updated solution. (3) We show that the models for SAT and TSP can be easily fooled with small perturbations of the problem instance and (4) that adversarial training can improve the robustness and generalization.\\n\\n2 BACKGROUND ON NEURAL SOLVERS\\n\\nIntuitively, combinatorial optimization is the task of finding an optimal element from the finite set of possible solutions (e.g. the truth assignment for a boolean statement). We formalize this as\\n\\n\\\\[ Y = \\\\arg \\\\min_{Y' \\\\in g(x)} c(x, Y') \\\\]\\n\\nwhere \\\\( x \\\\) is a problem instance, \\\\( g(x) = Y \\\\) the finite set of feasible solutions, and \\\\( c(\\\\cdot) \\\\) a cost function. Typically, there is also an associated binary decision problem \\\\( y \\\\), such as finding the optimal route vs. checking whether a route of at most cost \\\\( c_0 \\\\) exists (see \u00a7 4 and \u00a7 5).\\n\\nThen, for example, a neural solver \\\\( \\\\hat{y} = f_\\\\theta(x) \\\\) learns a mapping \\\\( f_\\\\theta: X \\\\to \\\\{0, 1\\\\} \\\\) to approximate the decision problem. In this work, \\\\( \\\\theta \\\\) are the parameters, \\\\( x \\\\in X \\\\) is the problem instance, and \\\\( \\\\hat{y} \\\\) (or \\\\( \\\\hat{Y} \\\\)) the prediction. In case of supervised learning, we then optimize the parameters \\\\( \\\\theta \\\\) w.r.t. a loss \\\\( \\\\ell(f_\\\\theta(x), y) \\\\) over a finite set of labeled training instances \\\\((x, y)\\\\). However, to obtain the exact labels \\\\( y \\\\) for a given \\\\( x \\\\) is intractable for larger problem instances due to the exponential or worse runtime.\\n\\nTwo ways to generate data pairs are mentioned in the introduction and visualized in Fig. 1: (a) an efficient but incomplete data generator (b) using a solver to obtain the labels for random samples.\"}"}
{"id": "vJZ7dPIjip3", "page_num": 3, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"instances \\\\( \\\\tilde{x} \\\\) around the clean sample \\\\( x \\\\) (i.e. the perturbation space) given the original solution \\\\( Y \\\\).\\n\\nSince \\\\( \\\\tilde{Y} \\\\neq Y \\\\) in the general case, we introduce \\\\( \\\\tilde{Y} = h(\\\\tilde{x}, x, Y) \\\\) to model how the solution changes.\\n\\n\\\\[\\n\\\\ell_{\\\\text{adv}}, G(x, Y) = \\\\max_{\\\\tilde{x}} \\\\ell(f_{\\\\theta}(\\\\tilde{x}), \\\\tilde{Y}) \\\\quad \\\\text{s.t.} \\\\quad \\\\tilde{x} \\\\in G(x, Y) \\\\land \\\\tilde{Y} = h(\\\\tilde{x}, x, Y)\\n\\\\]\\n\\nSound and efficient perturbation model. Our framework for a neural combinatorial solver \\\\( f_{\\\\theta} \\\\) stands out from many other works on adversarial robustness since we choose the perturbation model \\\\( G \\\\) s.t. we provably know a solution \\\\( \\\\tilde{Y} = h(\\\\tilde{x}, x, Y) \\\\) for all possible \\\\( \\\\tilde{x} \\\\). We call such a perturbation model sound. This stands in contrast to other domains, where we usually hope to preserve the label using the subjective concept of imperceptible/unnoticable perturbations (Szegedy et al., 2014).\\n\\nWhile we can naively obtain a sound perturbation model for combinatorial optimization using a solver, this is intractable for realistic problem sizes. We therefore propose to use perturbation models that are efficient and sound. That is, we can determine the updated solution \\\\( \\\\tilde{Y} \\\\) without applying a solver on the perturbed instance \\\\( \\\\tilde{x} \\\\). For example, if we add a node to a TSP instance, the optimal route including the new node will change, but we can efficiently determine \\\\( \\\\tilde{Y} \\\\) for the chosen \\\\( G \\\\).\\n\\nImportant technical details arise due to (a) the potentially non-unique \\\\( Y \\\\) and (b) non-constant \\\\( \\\\tilde{Y} \\\\) while perturbing the input. One way to handle both effects is through the choice of the loss \\\\( \\\\ell \\\\). (a) We can deal with the ambiguity in \\\\( Y \\\\) if the loss is equal for any two optimal solutions/predictions. This can be achieved naturally by incorporating the cost \\\\( c(Y) \\\\) of the combinatorial optimization problem. (b) Since the solution \\\\( \\\\tilde{Y} \\\\) can change throughout the optimization, it is important to choose a loss that assesses the difference between prediction \\\\( f_{\\\\theta}(\\\\tilde{x}) \\\\) and ground truth \\\\( \\\\tilde{Y} \\\\). For example, a viable loss for TSP is the optimality gap \\\\( \\\\ell_{\\\\text{OG}}(\\\\hat{Y}, Y) = \\\\frac{|c(\\\\hat{Y}) - c(Y)|}{c(Y)} \\\\) that is normalized by \\\\( c(Y) \\\\).\\n\\nPerturbation strength. With a sound perturbation model, all generated instances \\\\( \\\\tilde{x} \\\\) are valid problem instances regardless of how much they differ from \\\\( x \\\\). Hence, in the context of combinatorial optimization, the perturbation strength/budget models the severity of a potential distribution shift between training data and test data. This again highlights the differences to other domains. For example in image classification with the common \\\\( \\\\ell^p \\\\) perturbation model \\\\( \\\\|x - \\\\tilde{x}\\\\|_p \\\\leq r \\\\), the instance changes its true label or becomes meaningless (e.g. a gray image) for a large enough \\\\( r \\\\).\\n\\nGeneralization. Specifically, adversarial robustness is one way to measure the generalization over perturbed instances \\\\( \\\\tilde{x} \\\\) in the proximity of \\\\( x \\\\). Adversarial robustness is important in the context of neural combinatorial solvers since training and validation/test distribution differ from the actual data distribution \\\\( p(x) \\\\). First, the data distribution \\\\( p(x) \\\\) is typically unknown and highly application-specific. Second, due to theoretical limitations of the data generation process the train and validation/test distribution likely captures a simpler sub-problem suffering from spurious features (Yehuda et al., 2020). Third, we ultimately desire a general-purpose solver that performs well regardless of \\\\( p(x) \\\\) (in the limits of a polynomial approximation).\\n\\nWe stress that in the context of combinatorial optimization, adversarial examples are neither anomalous nor statistical defects since all generated instances correspond to valid problem instances. In contrast to other domains, the set of valid problems is not just a low-dimensional manifold in a high-dimensional space. Thus, the so-called manifold hypothesis (Stutz et al., 2019) does not apply for combinatorial optimization. In summary, it is critical for neural solvers to perform well on adversarial examples when striving for generalization.\\n\\nAccuracy robustness trade-off. A trade-off between adversarial robustness and standard generalization was reported for many learning tasks (Tsipras et al., 2019). That is, with increasing robustness the accuracy on the test data decreases. Interestingly, with a sound perturbation model and the purely deterministic labels in combinatorial optimization (the solution is either optimal or not), no such trade-off exists. Hence, if the model was expressive enough and we had sufficient compute, there would exist a model with high accuracy and robustness (see \u00a7 A for more details).\\n\\nAdversarial training. In adversarial training, we leverage adversarially perturbed instances with the desire of training a robust model with improved generalization. For this, adversarial attacks reveal the regions that are both difficult for the model and not covered by training samples (see Fig. 1). Hence, adversarial training can be understood as a powerful data augmentation using hard model-specific samples. Though it is not the main focus of this work, in \u00a7 6, we show that adversarial training can be used to improve the robustness and generalization of a neural combinatorial solver.\"}"}
{"id": "vJZ7dPIjip3", "page_num": 4, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Remarks on decision problems.\\n\\nFor the binary decision problems, we typically are not required to know $\\\\tilde{Y}$; it suffices to know $\\\\tilde{y}$. Moreover, for such binary problems, we keep the solution constant $y = \\\\tilde{y}$, but there also exist practical perturbations that change the label of the decision problem. For example for SAT, we can add a set of clauses that are false in isolation which makes $\\\\tilde{y} = 0$.\\n\\nRequirements for neural solvers.\\n\\nWe study neural combinatorial solvers $f_\\\\theta$ that are often a Graph Neural Network (GNN). We then solve Eq. 1 using different variants of Projected Gradient Descent (PGD) and therefore assume the model to be differentiable w.r.t. its inputs (see \u00a7 D). For non-differentiable models, one can use derivative-free optimization (Yang & Long, 2021).\\n\\n4 SAT\\n\\nWe first introduce the problem as well as notation and then propose the perturbation models (\u00a7 4.1). Last, we discuss the attacks for a specific neural solver (\u00a7 4.2).\\n\\nProblem statement.\\n\\nThe goal is to determine if a boolean expression, e.g. $(v_1 \\\\lor v_2 \\\\lor \\\\neg v_3) \\\\land (v_1 \\\\lor v_3)$, is satisfiable $y = 1$ or not $y = 0$. Here, we represent the boolean expressions in Conjunctive Normal Form (CNF) that is a conjunction of multiple clauses $k(v_1, ..., v_n)$ and each clause is a disjunction of literals $l_i$. Each literal is a potentially negated boolean variable $l_i \\\\in \\\\{\\\\neg v_i, v_i\\\\}$ and w.l.o.g. we assume that a clause may not contain the same variable multiple times. In our standard notation, a problem instance $x$ represents such a boolean expression in CNF. A solution $Y \\\\in \\\\{l^*_1, ..., l^*_n|l^*_i \\\\in \\\\{\\\\neg v_i, v_i\\\\}\\\\}$ provides truth assignments for every variable. Hence, in the example above $x = (v_1 \\\\lor v_2 \\\\lor \\\\neg v_3) \\\\land (v_1 \\\\lor v_3)$, $y = 1$, and a possible solution is $Y = \\\\{v_1, \\\\neg v_2, v_3\\\\}$.\\n\\nNote that multiple optimal $Y$ exist but for our attacks it suffices to know one.\\n\\n4.1 SOUND PERTURBATION MODEL\\n\\nWe now introduce a sound and efficient perturbation model for SAT which we then use for an adversarial attack on a neural (decision) SAT solver. Recall that the perturbation model is sound since we provably obtain the correct label $\\\\tilde{y}$ and it is efficient since we achieve this without using a solver. Instead of using a solver, we leverage invariances of the SAT problem.\\n\\nProposition 1\\n\\nLet $x = k_1(v_1, ..., v_n) \\\\land ... k_m(v_1, ..., v_n)$ be a boolean statement in Conjunctive Normal Form (CNF) with $m$ clauses and $n$ variables. Then $\\\\tilde{x}$, a perturbed version of $x$, has the same label $y = \\\\tilde{y}$ in the following cases:\\n\\n\u2022 SAT: $x$ is satisfiable $y = 1$ with truth assignment $Y$. Then, we can arbitrarily remove or add literals in $x$ to obtain $\\\\tilde{x}$, as long as one literal in $Y$ remains in each clause.\\n\\n\u2022 DEL: $x$ is unsatisfiable $y = 0$. Then, we can obtain $\\\\tilde{x}$ from $x$ through arbitrary removals of literals, as long as one literal per clause remains.\\n\\n\u2022 ADC: $x$ is unsatisfiable $y = 0$. Then, we can arbitrarily remove, add, or modify clauses in $x$ to obtain $\\\\tilde{x}$, as long as there remains a subset of clauses that is unsatisfiable in isolation.\\n\\n4.2 NEURAL SAT SOLVER\\n\\nSelsam et al. (2019) propose NeuroSAT, a neural solver for satisfiability-problems that uses a message-passing architecture (Gilmer et al., 2017) on the graph representation of the boolean expressions. The SAT problem is converted into a bipartite graph consisting of clause nodes and literal nodes. For each variable there exist two literal nodes; one represents the variable and the other its negation. If a literal is contained in a clause its node is connected to the respective clause node.\\n\\nNeuroSAT then recursively updates the node embeddings over the message-passing steps using this graph, and in the last step, the final vote $\\\\hat{y} \\\\in \\\\{0, 1\\\\}$ is aggregated over the literal nodes.\\n\\nAttacks.\\n\\nWe then use these insights to craft perturbed problem instances $\\\\tilde{x}$ guided by the maximization of the loss $\\\\ell_{adv G}$ (see Eq. 1). Specifically, for SAT and DEL, two of admissible perturbations defined in Proposition 1, we optimize over a subset of edges connecting the literal and clause nodes where we set the budget $\\\\Delta$ relatively to the number of literals/edges in $x$. For ADC we additionally concatenate $d$ additional clauses and optimize over their edges obeying $\\\\Delta$ but keep the remaining $x$ constant. If not reported separately, we decide for either DEL and ADC randomly with equal odds.\"}"}
{"id": "vJZ7dPIjip3", "page_num": 5, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"The addition and removal of a limited number of literals is essentially a perturbation with budget $\\\\Delta$ over a set of discrete edges connecting literals and clauses. Similarly to the $L^0$-PGD attack of Xu et al. (2019), we continuously relax the edges in $\\\\{0, 1\\\\}$ to $[0, 1]$ during optimization. We then determine the edge weights via projected gradient descent s.t. the weights are within $[0, 1]$ and that we obey the budget $\\\\Delta$. After the attack, we use these weights to sample the discrete perturbations in $\\\\{0, 1\\\\}$. In other words, the attack continuously/softly adds as well as removes literals from $x$ during the attack and afterward we sample the discrete perturbations to obtain $\\\\tilde{x}$. For additional details about the attacks, we refer to \u00a7E.\\n\\n5 TSP\\n\\nWe first introduce the TSP including the necessary notation. Then, we propose a perturbation that adds new nodes s.t. we know the optimal route afterward (\u00a7 5.1). In \u00a7 5.2, we detail the attack for a neural decision TSP solver and, in \u00a7 5.3, we describe the attack for a model that predicts the optimal TSP route $Y$.\\n\\nProblem statement. We are given a weighted graph $G = (V, M)$ that consist of a finite set of nodes $V$ as well as edges $M \\\\subseteq V^2$ and a weight $\\\\omega(e)$ for each possible edge $e \\\\in V^2$. We use the elements in $V$ as indices or nodes interchangeably. The goal is then to find a permutation $\\\\sigma$ of the nodes $V$ s.t. the cost of traversing all nodes exactly once is minimized (i.e. the Hamiltonian path of lowest cost):\\n\\n$$\\\\sigma^* = \\\\arg\\\\min_{\\\\sigma' \\\\in S} c(\\\\sigma', G) = \\\\arg\\\\min_{\\\\sigma' \\\\in S} \\\\omega(\\\\sigma'_1(V), \\\\sigma'_n(V)) + \\\\sum_{i=1}^{n-1} \\\\omega(\\\\sigma'_i(V), \\\\sigma'_{i+1}(V)) \\\\tag{2}$$\\n\\nwhere $S$ is the set of all permutations and $n = |V|$ is the number of nodes. Although multiple $\\\\sigma^*$ might exist here it suffices to know one. An important special case is the \u201cmetric TSP\u201d, where the nodes represent coordinates in a space that obeys the triangle inequality (e.g. euclidean distance).\\n\\nFor notational ease, we interchangeably use $\\\\sigma$ as a permutation or the equivalent list of nodes. Moreover, we say $\\\\sigma$ contains edge $(I,J) \\\\in |M|$ if $I$ and $J$ are consecutive or the first and last element. In our standard notation $x = G$, $Y = \\\\sigma^*$, and the respective decision problem solves the question if there exist $c(\\\\sigma^*) \\\\leq c_0$ of at most $c_0$ cost.\\n\\n5.1 SOUND PERTURBATION MODEL\\n\\nAdversarially perturbing the TSP such that we know the resulting solution seems more challenging than SAT. However, assuming we would know the optimal route $\\\\sigma^*$ for graph $x = G$, then under certain conditions we can add new nodes s.t. we are guaranteed to know the perturbed optimal route $\\\\tilde{\\\\sigma}^*$. Note that this does not imply that we are able to solve the TSP in sub-exponential time in the worst case. We solely derive an efficient special case through leveraging the properties of the TSP.\\n\\nProposition 2 Let $\\\\sigma^*$ be the optimal route over the nodes $V$ in $G$, let $Z \\\\notin V$ be an additional node, and $P, Q$ are any two neighbouring nodes on $\\\\sigma^*$. Then, the new optimal route $\\\\tilde{\\\\sigma}^*$ (including $Z$) is obtained from $\\\\sigma^*$ through inserting $Z$ between $P$ and $Q$ if $\\\\not\\\\exists (A,B) \\\\in V^2 \\\\setminus \\\\{(P,Q)\\\\}$ with $A \\\\neq B$ s.t.\\n\\n$$\\\\omega(A,Z) + \\\\omega(B,Z) - \\\\omega(A,B) \\\\leq \\\\omega(P,Z) + \\\\omega(Q,Z) - \\\\omega(P,Q).$$\\n\\nCorollary 1 We can add multiple nodes to $G$ and obtain the optimal route $\\\\tilde{\\\\sigma}^*$ as long as the condition of Proposition 2 (including the other previously added nodes) is fulfilled.\\n\\nCorollary 2 For the metric TSP, it is sufficient if the condition of Proposition 2 holds for $(A,B) \\\\in V^2 \\\\setminus (\\\\{(P,Q)\\\\} \\\\cup H)$ with $A \\\\neq B$ where $H$ denotes the pairs of nodes both on the Convex Hull $H \\\\in CH(V^2)$ that are not a line segment of the Convex Hull.\\n\\n5.2 NEURAL DECISION TSP SOLVER\\n\\nPrates et al. (2019) propose a GNN (called DTSP) to solve the decision variant of the TSP for an input pair $x = (G, c_0)$ with graph $G$ and a cost $c_0$. DTSP predicts whether there exists a Hamiltonian cycle in $G$ of cost $c_0$ or less ($y = 1$ if the cycle exists).\\n\\nBased on our perturbation model, we inject adversarial nodes. For the metric TSP, we determine their coordinates by maximizing the binary cross-entropy\u2014a continuous optimization problem.\"}"}
{"id": "vJZ7dPIjip3", "page_num": 6, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"is easy to generalize to the non-metric TSP (omitting Corollary 2), if e.g. the triangle equality does not hold or there is no \\\"simple\\\" cost function concerning the node's coordinates/attributes. Then, the optimization is performed over the edge weights, but depending on what the weights represent we might need to enforce further requirements.\\n\\nUnfortunately, the constraint in Proposition 2 is non-convex and it is also not clear how to find a relaxation that is still sufficiently tight and can be solved in closed form. For this reason, when the constraint for a node is violated, we use vanilla gradient descent with the constraint as objective:\\n\\n\\\\[ \\\\omega(P,Z) + \\\\omega(Q,Z) - \\\\omega(P,Q) - \\\\min_{A,B} \\\\omega(A,Z) + \\\\omega(B,Z) - \\\\omega(A,B) \\\\]\\n\\nThis penalizes if a constraint is violated. We stop as soon as the node fulfills the requirement/constraint again and limit the maximum number of iterations to three. Since some adversarial nodes might still violate the constraint after this projection, we only include valid nodes in each evaluation of the neural solver.\\n\\nMoreover, for optimizing over multiple adversarial nodes jointly and in a vectorized implementation, we assign them an order and also consider previous nodes while evaluating the constraint. Ordering the nodes allows us to parallelize the constraint evaluation for multiple nodes, despite the sequential nature, since we can ignore the subsequent nodes.\\n\\n5.3 **NEURAL TSP SOLVER**\\n\\nJoshi et al. (2019) propose a Graph Convolutional Network (ConvTSP) to predict which edges of the euclidean TSP graph are present in the optimal route. The probability map over the edges is then decoded into a permutation over the nodes via a greedy search or beam search. We use the same attack as for the TSP decision problem (see \u00a7 5.2) with the exception of having a different objective with changing label \\\\( \\\\tilde{Y} \\\\).\\n\\nAlthough the optimality gap \\\\( \\\\ell(\\\\hat{Y}, Y) = c(\\\\hat{Y}) - c(Y)/c(Y) \\\\) is a natural choice and common in the TSP literature (Kool et al., 2019), it proved to be tough to backpropagate through the decoding of the final solution from the soft prediction. Hence, for ConvTSP we maximize the cross-entropy over the edges. Hence, we perturb the input s.t. the predicted route is maximally different from the optimal solution \\\\( \\\\tilde{Y} \\\\) and then report the optimality gap.\\n\\n6 **EMPirical RESULTS**\\n\\nIn this section, we show that the assessed SAT and TSP neural solvers are not robust w.r.t. small perturbations of the input using the sound perturbation models introduced in \u00a7 4 and 5. We first discuss SAT in \u00a7 6.1 and then TSP in \u00a7 6.2. We use the published hyperparameters by the respective works for training the models. We run the experiments for at least five randomly selected seeds. We compare the accuracy on the clean and perturbed problem instances (i.e. clean vs. adversarial accuracy). Since no directly applicable prior work exists, we compare to the random baseline that randomly selects the perturbation s.t. the budget is exhausted. Moreover, we use Adam (Kingma & Ba, 2015) and early stopping for our attacks. For further details we refer to \u00a7 E and \u00a7 F as well as the code [https://www.daml.in.tum.de/robustness-combinatorial-solvers](https://www.daml.in.tum.de/robustness-combinatorial-solvers).\"}"}
{"id": "vJZ7dPIjip3", "page_num": 7, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Following Selsam et al. (2019), we train NeuroSAT for 60 epochs using the official parameters and data generation. The random data generator for the training/validation data greedily adds clauses until the problem becomes unsatisfiable which is determined by an exact SAT solver (Ignatiev et al., 2018; S\u00f6rensson & Een, 2005). We are then left with an unsatisfiable problem instance and a satisfiable problem instance if we omit the last clause (i.e. the dataset is balanced). For each instance pair, the number of variables is sampled uniformly within a specified range and then the number of literals in each clause is drawn from a geometric distribution. We name the dataset accordingly to the range of numbers of variables. For example, the training set 10-40 consists of problem instances with 10 to 40 variables. For our attacks, we use the budgets of $\\\\Delta_{DEL} = 5\\\\%$ as well as $\\\\Delta_{SAT} = 5\\\\%$ relatively to the number of literals in $x$ and for ADC we add an additional 25% of clauses and enforce the average number of literals within the new clauses.\\n\\nFrom the results of our adversarial attacks presented in Fig. 2 it is apparent that the studied model NeuroSAT is not robust w.r.t. small perturbation of the input. Additionally, Fig. 3 shows that for the SAT attack, one gradient update step already suffices to decrease the accuracy to 26% (see also \u00a7 I). All this shows the efficacy of our attacks and perturbation model, it also highlights that the standard accuracy gives a too optimistic impression of the model's performance. We hypothesize that the model likely suffers from challenges (1) easier subproblem and/or (2) spurious features, while it is also possible that the fragility is due to a lack of expressiveness.\\n\\nDifficulty imbalance. It is much harder for the model to spot satisfiable instances than unsatisfiable ones. This is apparent from the clean accuracy and even more obvious from the adversarial accuracy. Even with moderate budgets, we are able to lower the adversarial accuracy to values below 20% for satisfiable instances while for unsatisfiable instances we barely get below 50% even on the larger problem instances 50-100. An intuitive explanation is given by the fact that it is impossible to find a solution for an unsatisfiable instance (and it is cheap to verify a candidate solution). Similarly, Selsam et al. (2019) hypothesize that NeuroSAT only changes its prediction if it finds a solution. Thus, it is even more remarkable how we are still able to fool the neural solver in 30% of the cases (DEL attack).\\n\\nQualitative insights. We show in Fig. 5 how NeuroSAT's decision evolves over the message-passing steps for satisfiable instances. NeuroSAT comes to its conclusion typically after 15 message-passing steps for the clean samples. For the perturbed samples, NeuroSAT almost never comes to the right conclusion. For the instances where NeuroSAT predicts the right label, it has a hard time doing so since it converges slower. For a specific adversarial example see \u00a7 J.\\n\\nTable 1: Accuracy comparison of regular training with a 10% larger training set and adversarial finetuning of 10 extra epochs (17%).\\n\\n| Data       | Regular Extra data | Adv. train. |\\n|------------|--------------------|-------------|\\n| 10-40      | 89.0 \u00b1 0.06        | 89.1 \u00b1 0.05 |\\n|            | 88.8 \u00b1 0.06        |\\n| Test       | 89.1 \u00b1 0.10        | 89.1 \u00b1 0.07 |\\n|            | 89.6 \u00b1 0.06        |\\n| Random     | 86.4 \u00b1 0.09        | 86.3 \u00b1 0.11 |\\n|            | 87.3 \u00b1 0.07        |\\n| Attack     | 50.0 \u00b1 1.16        | 49.6 \u00b1 1.52 |\\n|            | 54.0 \u00b1 0.48        |\\n| 50-100     | 81.1 \u00b1 0.64        | 81.2 \u00b1 0.89 |\\n|            | 82.7 \u00b1 0.50        |\\n| Test       | 78.6 \u00b1 0.80        | 79.0 \u00b1 1.02 |\\n|            | 80.8 \u00b1 0.46        |\\n| Attack     | 39.4 \u00b1 3.15        | 37.9 \u00b1 2.62 |\\n|            | 44.4 \u00b1 1.19        |\\n| 3-10       | 92.3 \u00b1 0.57        | 92.7 \u00b1 0.30 |\\n|            | 93.0 \u00b1 0.33        |\\n| 100-300    | 64.4 \u00b1 1.53        | 65.3 \u00b1 1.63 |\\n|            | 67.0 \u00b1 0.74        |\\n| SATLIB     | 66.1 \u00b1 3.07        | 66.2 \u00b1 4.71 |\\n|            | 63.7 \u00b1 1.88        |\\n| UNI3SAT    | 86.0 \u00b1 0.75        | 85.1 \u00b1 0.80 |\\n|            | 86.9 \u00b1 0.39        |\\n\\nAttack budget. We study the influence of the budget $\\\\Delta$ and, hence, the similarity of $x$ vs. $\\\\tilde{x}$, in Fig. 4. It suffices to perturb 0.2% of the literals for the recall to drop below 50% using our SAT perturbation model. This stands in stark contrast to the random attack, where the accuracy for the satisfiable instances is almost constant over the plotted range of budgets.\"}"}
{"id": "vJZ7dPIjip3", "page_num": 8, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Assuming that hard model-specific instances are the instances that are important to improve the model's performance, we can lower the amount of labeled data (potentially expensive). Of course, we cannot do anything about the NP-completeness of the problem, but adversarial robustness opens the possibility to use the expensively generated examples as effectively as possible.\\n\\nAdversarial training for SAT.\\n\\nWe conjecture that if the models were expressive enough, we would now be able to leverage the adversarial examples for an improved training procedure. Therefore, similar to Jeddi et al. (2020), we perform an adversarial fine-tuning. That is, we train the models for another 10 epochs including perturbed problem instances. We use the same setup as for the attacks presented above but we observed that too severe perturbations harm NeuroSAT's performance (e.g. a budget of 5% suffices to push the accuracy below 20% for the satisfiable instances). We therefore lower the budget of the satisfiable instances to 1% and perturb 5% of the training instances. For a fair comparison, we also compare to a model that was trained on a 10% larger training set. To compare the solvers' capability to generalize for the different training strategies, we choose datasets of different problem sizes and also include the external benchmark datasets SATLIB and UNI3SAT (Hoos & St\u00fctzle, 2000). We consistently outperform the regularly trained models in terms of robustness as well as generalization (with the exceptions SATLIB). We report the results in Table 1.\\n\\n6.2 TSP\\n\\nSetup.\\n\\nIn our setup we follow Prates et al. (2019) and generate the training data by uniformly sampling \\\\( n \\\\sim U(20, 40) \\\\) nodes/coordinates from the 2D unit square. This is converted into a fully connected graph where the edge weights represent the \\\\( L_2 \\\\)-distances between two nodes. A near-optimal solution \\\\( Y \\\\) for training and attacks is obtained with the Concorde solver (Applegate et al., 2006). For the decision-variant of the TSP, we produce two samples from every graph: a graph with \\\\( y = 1 \\\\) and cost-query \\\\( c_0 = c(\\\\sigma^*) \\\\cdot (1 + d) \\\\) and a second graph with \\\\( y = 0 \\\\) and cost-query \\\\( c_0 = c(\\\\sigma^*) \\\\cdot (1 - d) \\\\), where \\\\( d = 2\\\\% \\\\) (Prates et al., 2019). For predicting the TSP solution we use ConvTSP (Joshi et al., 2019) but keep the setup identical to its decision equivalent. We attack these models via adding five adversarial nodes and adjust \\\\( \\\\tilde{c}_0 \\\\) as well as \\\\( \\\\tilde{Y} \\\\) accordingly.\\n\\nDecision TSP Solver.\\n\\nIf a route of target cost exists, our attack successfully fools the neural solver in most of the cases. This low adversarial accuracy highlights again that the clean accuracy is far too optimistic and that the model likely suffers from challenges (1) easier subproblem and/or (2) spurious features. In Fig. 7, we see that the changes are indeed rather small and that the perturbations lead to practical problem instances. For further examples see \u00a7 K.\\n\\nDifficulty imbalance.\\n\\nFor the TSP, we also observe an imbalance in performance between both classes. This is naturally explained with a look at the non-decision TSP version where a solver constructs a potential route \\\\( \\\\hat{Y} \\\\). Since \\\\( c(\\\\hat{Y}) \\\\geq c(Y) \\\\) such a network comes with the optimal precision of 1 by design.\\n\\nAttacking TSP Solver.\\n\\nFor ConvTSP five new adversarial nodes suffice to exceed an optimality gap of 2%. Note that naive baselines such as the \\\"farthest insertion\\\" achieve an optimality gap of 2.3% on the clean dataset (Kool et al., 2019). Moreover, for the class \\\"route exists\\\" we can compare the performance on the decision TSP. Even though the model performs better than DTSP, our attacks degrade the performance relatively by 10%. In Fig. 9, we can also view the predicted routes and observe that the prediction can differ severely between the clean and perturbed problem instance.\"}"}
{"id": "vJZ7dPIjip3", "page_num": 9, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Optimality Gap\\nRoute Prediction\\nClean\\nRand\\nAdv\\n0.75\\n0.80\\n0.85\\n0.90\\nAccuracy\\nRoute Exists\\n\\nFigure 8: ConvTSP for problems with $n = 20$ nodes and five adversarial nodes. We plot the optimality gap (left) and the decision TSP performance (right).\\n\\nFigure 9: Exemplary problem instances where the attack successfully changed the optimal route for ConvTSP that show drastic changes of the prediction.\\n\\n7 Related Work\\n\\nCombinatorial Optimization.\\n\\nFurther important works about neural SAT solvers are (Amizadeh et al., 2019; Yolcu & P\u00f3czos, 2019; Kurin et al., 2019; Cameron et al., 2020) and for neural TSP solvers (Khalil et al., 2017; Deudon et al., 2018; Bresson & Laurent, 2021; Wang et al., 2021; Bello et al., 2016; Kool et al., 2019). We refer to the recent surveys (Bengio et al., 2021; Cappart et al., 2021; Vesselinova et al., 2020) for a detailed overview and discussion.\\n\\nGeneralization.\\n\\nThere are only very few works on generalization of neural combinatorial solvers.\\n\\nOne exception are Franchi et al. (2019) and Joshi et al. (2021). They empirically assess the impact of different model and training pipeline design choices on the generalization (for TSP) while we discuss the generation of hard model-specific instances. A work by Selsam & Bj\u00f8rner (2019) studies generalization for their NeuroSAT model (Selsam et al., 2019) and proposes a data augmentation technique relying on traditional solvers. Moreover, they study a hybrid model consisting of a simplified NeuroSAT and a traditional solver. In summary, previous works about generalization of neural combinatorial solvers analyze specific tasks while we propose a general framework for combinatorial optimization and study TSP and SAT to show its importance.\\n\\nAdversarial Robustness.\\n\\nAdversarial robustness has been studied in various domains including computer vision (Szegedy et al., 2014) and graphs (Z\u00fcgner et al., 2018; Dai et al., 2018). We refer to G\u00fcnnemann (2021) for a broad overview of adversarial robustness of GNNs. Specifically, for TSP we optimize the continuous input coordinates (or edge weights) but use our own approach due to the non-convex constraints. For attacking the SAT model we need to perturb the discrete graph structure and rely on $L_0$-PGD by Xu et al. (2019) proposed in the context of GNNs.\\n\\nHard sample mining.\\n\\nDeriving adversarial examples might appear similar to hard sample mining (Sung, 1995). However, hard sample mining aims in spotting hard problem instances in the train data unlike we who also perturb the problem instances (of the training data or any other dataset). Moreover, if we combine augmentations with hard sample mining, we only create randomly perturbed instances and their generation is not guided by the model. The surprisingly weak random baseline in our experiments gives an impression about how effective such an approach might be.\\n\\n8 Discussion\\n\\nWe bring the study of adversarial robustness to the field of neural combinatorial optimization. In contrast to general learning tasks, we show that there exists a model with both high accuracy and robustness. A key finding of our work is that the assessed neural combinatorial solvers are all sensitive w.r.t. small perturbations of the input. For example, we can fool NeuroSAT (Selsam et al., 2019) for the overwhelming majority of instances from the training data distribution with moderate perturbations (5% of literals). We show that adversarial training can be used to improve robustness. However, strong perturbations can still fool the model, indicating a lack of expressiveness.\\n\\nIn summary, contemporary supervised neural solvers seem to be very fragile, and adversarial robustness is an insightful research direction to reveal as well as address neural solver deficiencies for combinatorial optimization.\"}"}
