{"id": "mmUA7_O9mjY", "page_num": 1, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"ABSTRACT\\n\\nDifferentiable physics has recently been shown as a powerful tool for solving soft-body manipulation tasks. However, the differentiable physics solver often gets stuck when the initial contact points of the end effectors are sub-optimal or when performing multi-stage tasks that require contact point switching, which often leads to local minima. To address this challenge, we propose a contact point discovery approach (CPDeform) that guides the stand-alone differentiable physics solver to deform various soft-body plasticines. The key idea of our approach is to integrate optimal transport-based contact points discovery into the differentiable physics solver to overcome the local minima from initial contact points or contact switching. On single-stage tasks, our method can automatically find suitable initial contact points based on transport priorities. On complex multi-stage tasks, we can iteratively switch the contact points of end-effectors based on transport priorities. To evaluate the effectiveness of our method, we introduce PlasticineLab-M that extends the existing differentiable physics benchmark PlasticineLab to seven new challenging multi-stage soft-body manipulation tasks. Extensive experimental results suggest that: 1) on multi-stage tasks that are infeasible for the vanilla differentiable physics solver, our approach discovers contact points that efficiently guide the solver to completion; 2) on tasks where the vanilla solver performs sub-optimally or near-optimally, our contact point discovery method performs better than or on par with the manipulation performance obtained with handcrafted contact points. Demos are available on our project page.\\n\\nINTRODUCTION\\n\\nSoft body manipulation has a wide application in cooking (Bollini et al., 2013), fabric manipulation (Wu et al., 2020), healthcare (Mayer et al., 2008) and manufacturing of deformable objects (Sanchez et al., 2018). Differentiable physics has recently been shown as a powerful and effective tool for solving control problems for soft-body manipulation tasks. As demonstrated in Huang et al. (2021), given a parameterized manipulation policy, the differentiable physics solver computes the gradients of the policy parameters, enabling gradient-based optimization much more efficiently than reinforcement learning algorithms at finding optimal solutions for soft-body manipulation tasks on a diverse collection of environments.\\n\\nHowever, the performance of the stand-alone gradient-based solver can be heavily influenced by the policy initialization. Especially, the end effectors' initial contact points with objects play critical roles in the optimization. Different contact points may lead to vast differences in manipulation performance due to local optima. Besides, some tasks require agents to switch contact points during the manipulation, where the local optima issue becomes a serious bottleneck for completing these tasks.\\n\\n\u2217Equal Contribution\\n\\nProject Page: http://cpdeform.csail.mit.edu\"}"}
{"id": "mmUA7_O9mjY", "page_num": 2, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"multi-stage tasks. For example, as shown in Figure 2, an agent needs to control the capsule \u201cpen\u201d to sculpt two scribbles on the surface of a yellow plasticine cube. In order to complete the second line, the agent needs to switch contact points after drawing the first one. While the stand-alone differentiable physics solver could possibly draw the first line, it often gets stuck and struggles to draw the second one, due to the lack of gradients that push the pen to a new contact point to begin the second line. How to automatically find proper contact points for soft body manipulation tasks remains a challenge in differentiable physics.\\n\\nIn this paper, we propose a principled framework that integrates an optimal transport-based contact discovery method into differentiable physics (CPDeform) to address this important challenge. CPDeform heuristically find contact points for end effectors by using transport priorities computed from optimal transport to compare the current shape with the target shape, where soft-body manipulation is treated as a particle transportation problem. After finding contact points, CPDeform can combine the differentiable physics solver to solve soft body manipulation tasks. On single-stage tasks that do not require contact point switching, CPDeform can find suitable initial contact points to finish the task. On multi-stage tasks, using an example shown in Figure 1 (right) where the goal is to reshape a plasticine cube into an airplane, CPDeform can iteratively switch the contact points of end effectors based on transport priorities. This iterative deformation process is motivated by how humans manipulate plasticine. As shown in Figure 1 (left), when humans manipulate a plasticine dough, they tend to repeatedly focus on the point of interest and modify it towards the target shape. CPDeform can mimic this process by iteratively switching contact points of interests based on transport priorities and deforming the soft bodies into the target shape with the help of the differentiable solver. By integrating contact points discovery into the differentiable physics solver, CPDeform can skip over the local minima caused by contact switching and improve the performance of the stand-alone solver.\\n\\nTo evaluate the effectiveness of CPDeform, we introduce PlasticineLab-M that extends the existing differentiable physics benchmark PlasticineLab (Huang et al., 2021) to seven new challenging multi-stage soft body tasks. Extensive experimental results suggest that: on single-stage tasks where the vanilla differentiable physics solver performs sub-optimally or near-optimally in PlasticineLab, we find that the backbone of CPDeform, a contact point discovery method based on optimal transport, single-handedly performs better than or on par with the manipulation performance obtained with random-selected or human-defined contact points. On multi-stage tasks that are infeasible for the vanilla gradient-based solver, we find that CPDeform performs reasonably well in practice and the iterative deformation method equipped with contact point discovery could serve as an alternative to the expensive long-horizon searching algorithm. In summary, our work makes the following contributions:\\n\\n\u2022 We perform an in-depth study of local optimum issues of differentiable physics solver for initial contact points and switching contact points.\\n\u2022 We propose a principled framework, CPDeform, that integrates optimal transport-based contact discovery into differentiable physics.\\n\u2022 We find that the backbone of CPDeform, the contact point discovery method, can be directly employed by the stand-alone solver to find better initial contact points for single-stage tasks.\\n\u2022 On multi-stage tasks, which are infeasible for the vanilla solver, CPDeform employs a heuristic searching approach to iteratively complete the tasks.\\n\\nFigure 1: Left: the process that a human applies to transform a plasticine dough into a bowl. Right: we use images captured in time sequence to demonstrate how our framework reshapes a plasticine cube into a target airplane. The bottom row indicates the transport priorities found by our framework by computing the optimal transport between the current and target shapes. The top row illustrates the pose of the end-effectors selected by our framework based on the transport priorities.\"}"}
{"id": "mmUA7_O9mjY", "page_num": 3, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Figure 2: (a) Writer to manipulate a \u201cpen\u201d; (b) given an initial handcrafted position of the \u201cpen\u201d, the differentiable physics solver can control the \u201cpen\u201d to minimize the loss; (c) the solver gets stuck and fails to finish the second curve, due to the lack of gradient to push the \u201cpen\u201d towards the second line. (d) shows the target shape.\\n\\n2 MOTIVATION\\n\\nIn this section, we provide an intuitive analysis of the drawback of the differentiable physics solver through motivating toy examples. We start with a brief review of how the differentiable physics solver could be employed to optimize manipulation policies. We then demonstrate how initial contact points affect the optimization performance. Finally, we take a simple but representative multi-stage task as an example and discuss why contact switching would often lead to local minima.\\n\\nWe study a Writer task as shown in Figure 2(a). In this task, an agent needs to manipulate the capsule \u201cpen\u201d to initiate contact with the yellow plasticine cube, and sculpt a line scribble on the plasticine surface. The agent can move the tip of the pen along three dimensions.\\n\\nTo solve this task with differentiable physics, we manually initialize the end-effector \u201cpen\u201d near the suitable contact point that allows the \u201cpen\u201d to initiate contact with the plasticine. We then parameterize the desired motion trajectory of the \u201cpen\u201d as a sequence of three-dimensional actions \\\\( a_1, \\\\ldots, a_T \\\\) where \\\\( T \\\\) is the number of simulation steps. Let \\\\( s_t \\\\) be simulation states at different time steps which include the state of the plasticine and manipulator. The differentiable simulator starts from the initial state \\\\( s_0 \\\\) and completes the action sequences by repeatedly executing the forward function \\\\( s_{t+1} = \\\\phi(s_t, a_{t+1}) \\\\) until the ending state \\\\( s_T \\\\) has been reached. The objective of the optimizer is to minimize the distance between the current and target shapes. We represent the objective as a loss function \\\\( L(s_T, g) \\\\) where \\\\( g \\\\) is the target shape. Since the simulation forward function \\\\( \\\\phi \\\\) is fully-differentiable, we can compute gradients \\\\( \\\\partial L / \\\\partial a_t \\\\) of the loss \\\\( L \\\\) with respect to action \\\\( a_t \\\\), and run gradient descent steps to optimize the action sequences by \\\\( a_t = a_t - \\\\alpha \\\\partial L / \\\\partial a_t \\\\) where \\\\( \\\\alpha \\\\) is the learning rate. As shown in Figure 2(b), we can see that the agent succeeds at sculpting the target scribble by moving the \u201cpen\u201d downwards. We refer the readers to Algorithm 2 in Appendix D for more details on differentiable physics for controller optimization.\\n\\nHowever, if positions of the end-effectors are not well-initialized, the solver would get stuck in the local minima. Taking the task shown in Figure 3 as an example, we illustrate the optimization outcomes with different contact points by showing their corresponding resulting shapes. Even with an arbitrarily large number of steps \\\\( T \\\\) given, the gradient-based solver is unable to discover a policy that moves away from the local optimum to a new contact point that allows for task completion. Such phenomena are commonly observed across soft body manipulation tasks using the differentiable physics solver (Huang et al., 2021). When end-effectors are far away from the region of interest, it is often unlikely that the gradient could push the end-effectors towards the desired region. This observation poses the question of how to efficiently find optimal contact points to place the end-effectors.\\n\\nThe local minima problem caused by inappropriate contact points becomes a more serious issue in multi-stage tasks. Taking the multi-stage writer task in Figure 2(c) as an example, the agent needs to write an additional line on the plasticine surface by switching its contact point. Even with a\"}"}
{"id": "mmUA7_O9mjY", "page_num": 4, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"well-initialized contact point for the first line, the solver is unable to relocate to the new region of interest for the upcoming line. We observe that, differing from the vanilla differentiable physics solver, humans tend to employ an explicit \\\"iterative deformation\\\" schema to complete such a task. Humans would decompose this task into two stages. In each stage, we tend to iteratively derive the correspondence between the current and target shapes to arrive at useful contact points from observations and then subsequently move the \\\"pen\\\" and write the lines. This motivates us to combine contact point discovery with iterative deformation.\\n\\n3 METHOD\\n\\nIn this section, we introduce CPDeform, a principled framework that integrates optimal transport-based contact discovery into differentiable physics for solving challenging soft-body manipulation tasks. We first describe our contact point discovery method in relation to the transport priorities found by optimal transport in Section 3.1. In Section 3.2, we describe how transport priorities can be used to place end-effectors. Finally, in Section 3.3, we show how CPDeform integrates contact points discovery with differentiable physics and iteratively deforms the soft bodies for multi-stage tasks.\\n\\n3.1 OPTIMAL TRANSPORT AND CONTACT POINT DISCOVERY\\n\\nOne way to consider soft-body manipulation is by treating it as a particle transportation problem. By evaluating the cost of transporting the current state particles \\\\( \\\\mu \\\\) to the target state particles \\\\( \\\\nu \\\\), optimal transport provides a useful framework for comparing differences between any given pair of shapes, which can guide us to discover contact points. Let all particles be weighted equally in our simulator. Given a cost matrix \\\\( M \\\\), optimal transport finds a transportation plan \\\\( P \\\\) in transportation polytope \\\\( U \\\\) by minimizing the transportation cost \\\\( \\\\min_{P \\\\in U} \\\\langle P, M \\\\rangle \\\\). Casting the problem into dual form, we have\\n\\n\\\\[\\n\\\\text{OT}(\\\\alpha, \\\\beta) := \\\\max_{f, g} E_{\\\\mu}[f] + E_{\\\\nu}[g]\\n\\\\]\\n\\nsuch that\\n\\n\\\\[\\n\\\\forall i, j, \\\\text{ Lagrange multipliers } f_i, g_j \\\\text{ satisfy } f_i + g_j \\\\leq M_{ij},\\n\\\\]\\n\\nwhere \\\\( \\\\alpha, \\\\beta \\\\) are the mass vectors for the particles in \\\\( \\\\mu, \\\\nu \\\\) respectively. We refer the reader to Appendix B for more details on optimal transport. We focus on the Lagrange multipliers \\\\( f \\\\) of the source particles, which we refer to as the dual potentials. Since it represents the supports of the source measure, we interpret \\\\( f \\\\) as the transport priorities for the source particles \\\\( \\\\mu \\\\).\\n\\nTransport priorities are helpful for selecting contact points. Given a pair of current and target shapes, we intuitively would place the end-effectors around the region of the largest difference between the two shapes, in order to substantially modify the shapes. This observation leads us to place the end-effectors at contact points whose corresponding optimal manipulation policies can minimize the shape difference. However, it is computationally prohibitive to directly evaluate the optimality of the contact point by exhaustively searching through a set of contact points. Thus, we propose to heuristically identify contact points, based on a simple rule of selecting contact points with high transport priorities. We observe that contact points with high transport priorities mostly correspond with superior optimization performances.\\n\\n3.2 END-EFFECTOR PLACEMENT WITH TRANSPORT PRIORITIES\\n\\nIn this section, we describe how manipulators are placed at advantageous locations based on optimal transport priorities. We first describe the single manipulator case, which can be extended to multiple manipulator environments by adding a heuristic.\\n\\nDirect Single Manipulator Placement. The transport priorities can be directly employed to place the single manipulator. We identify the source particle \\\\( \\\\mu^* \\\\) corresponding to the largest potential \\\\( f^* \\\\). We then find a suitable contact point around \\\\( \\\\mu^* \\\\) through grid search, where we create a 3D grid centered at \\\\( \\\\mu^* \\\\) with each dimension evenly spaced into \\\\( N_i \\\\) intervals. The criterion of the grid search is as follows: We reject points whose placements of the manipulator lead to collisions with the particles. And we iterate over each grid point \\\\( x \\\\in \\\\mathbb{R}^3 \\\\), and place the manipulator at the point with the maximal score according to the following criterion:\\n\\n\\\\[\\n\\\\text{score}(x) = \\\\frac{1}{N_p} \\\\sum_{i=1}^{N_p} f_i d(\\\\mu_i, x)^2 + 1\\n\\\\]\\n\\nwhere \\\\( d(\\\\mu_i, x) \\\\) computes the signed distance between the particle \\\\( \\\\mu_i \\\\) to the closest point on the manipulator placed at grid point \\\\( x \\\\). As shown in Figure 4 (top), the criterion leads us to discover contact points that allow the manipulator to cover high potential particles while reducing subsequent changes to the low potential particles.\"}"}
{"id": "mmUA7_O9mjY", "page_num": 5, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Current Shape\\nTransport Priorities\\nPlacement\\nTarget Shape\\n\\nFigure 4: Visualizations of the placement strategies. We visualize the current and target shapes, transport priorities for contact discovery, and the resulting placement of the manipulators. We show a single manipulator case using Torus (top), and a multiple-manipulator case using Airplane (bottom).\\n\\nMultiple Manipulator Placement With Heuristic. For multiple manipulator environments, we need to consider a heuristically defined candidate pose set $T$, where each pose corresponds with a different manipulation strategy. Taking Figure 4 (bottom) as an example, it is more advantageous to use the highlighted pose than the ones drawn with low opacity. Each pose is specified by the orientations of the manipulators and the direction vectors for placing other manipulators in relation to the first manipulator. For each pose, we employ the single-manipulator placement strategy for the first manipulator. Using the first placement position as a starting point, for the remaining manipulators, we search along their pose-specific directions to find placement positions with minimal distances from the first manipulator that do not result in collisions with soft bodies. Since the differentiable physics solver is able to effectively adjust manipulator orientations during optimization, in practice, the candidate pose set does not need to be exhaustively large. In practice, we use three poses to cover left-right, top-bottom, and front-back grasping poses.\\n\\n3.3 Iterative Deformation for Multi-Stage Soft-Body Manipulation\\n\\nContinuing with the focus on multi-stage soft-body manipulation tasks, we now describe how CPDeform combines the contact point discovery method with the use of differentiable physics for these tasks. For every stage, we iteratively specify the contact points and perform stage-level manipulation with the differentiable physics solver. For the multiple manipulator case, we search over contact plans corresponding to different poses, and choose the plan that achieves the lowest loss. We present the detailed Algorithm 1 in Appendix C. We start with the initial shape $S_0$. Our goal is to reach the target shape $G$ within a given number of stage $n_{\\\\text{stage}}$. Each stage contains $n_{\\\\text{step}}$ simulation steps. As described in Section 3.2, we consider a heuristically defined candidate pose set $T$. In each stage, we first compute the optimal transport between the current shape $S_i$ and the target shape $G$ to derive the transport priorities. Next, we select the particle $p$ with the largest transport priority. For each pose, we search for the placement in relation to $p$ that maximizes the aforementioned criterion.\\n\\n4 Experiments\\n\\nWe conduct multiple experiments to test the efficacy of CPDeform on soft-body manipulation tasks to address the following questions:\\n\\n- On multi-stage tasks that involve multiple contact switches, can CPDeform complete these tasks by iteratively manipulating the soft-bodies?\\n- How robust is the backbone of CPDeform, the contact point discovery method, when tested on single-stage tasks where it is only allowed to specify a single contact point in one shot?\\n- How is transport priority compared with other contact discovery methods?\"}"}
{"id": "mmUA7_O9mjY", "page_num": 6, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"4.1 DATASETS\\n\\nTo extensively evaluate our method, we introduce PlasticineLab-M, a dataset that extends the existing differentiable physics benchmark PlasticineLab with seven new challenging multi-stage soft-body manipulation tasks, and contains the multi-stage environment PlasticineLab. We show these eight multi-stage tasks in Figure 5, whose task descriptions are detailed in Appendix A.\\n\\nWe also use the remaining single-stage tasks in PlasticineLab to evaluate our contact point discovery method. For multi-stage environments, we use the Wasserstein-1 distance (Solomon et al., 2015) approximated by Sinkhorn iteration (Cuturi, 2013) between the source and target particles to quantify the fine-grained difference between a state and the goal. For single-stage environments, we evaluate our approach using the IoU metric for a fair and consistent comparison with PlasticineLab.\\n\\n4.2 EVALUATION OF CPD FORM ON MULTI-TASKS\\n\\nWe compare our approach with the following baselines:\\n\\n- PlasticineLab: The vanilla gradient-based solver does not come with any contact point discovery features. It corresponds with the stand-alone differentiable physics solver described in Huang et al. (2021).\\n- Reinforcement Learning (RL): We evaluate the performance of the existing RL algorithms on our tasks. We use three model-free reinforcement learning algorithms: Soft Actor-Critic (SAC) (Haarnoja et al., 2017), Policy Proximal Optimization (PPO) (Schulman et al., 2017), and TD3 (Fujimoto et al., 2018). For each stage, we optimize for 200 episodes for differentiable physics-based approaches with a learning rate $0.1$. For each environment, we modestly choose a horizon of 10 or 20. We restrict the number of environment steps used for optimization under 1 million. We train each RL algorithm on each environment for 1000 episodes, with 1000 environment steps per episode, which accounts for the 1 million environment-step limit. Our reward function is of the form $R = -R_{shape} - R_{grasp}$, where $R_{shape}$ is the Wasserstein-1 distance between the source and target particles for measuring shape differences. And $R_{grasp}$ encourages the manipulators to be closer to the soft bodies. For fair comparison with Pinch from PlasticineLab, we use the reward formulation described in Huang et al. (2021).\\n\\nWe show the quantitative results in Table 3 and the qualitative results in Figure 6. We find that our approach is capable of finishing these complex tasks, and significantly outperforms the baselines. We find that with the discovered contact points, our approach is able to iteratively build and refine the nose, tail, and wings of the Airplane. In Chair, we find that our approach guides the solver to first create the general seat, then refine the arm rest and back of the chair. In Bottle, our approach first pushes down the top of the plasticine cube to create the neck, before refining the sides of the bottle. For Move++, our approach is able to complete the transportation tasks of the three cubes by selecting the most advantageous object to transfer at each stage. In Rope++, our approach first moves the rope to form the general shape, before refining the ends of the rope. In Writer++, our approach is capable to iteratively guide the solver to print the \u201cICLR\u201d letters on the plasticine cube. Comparatively, we...\"}"}
{"id": "mmUA7_O9mjY", "page_num": 7, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Figure 6: Qualitative results of CPDeform and PlasticineLab on multi-stage task environments.\\n\\n| Env       | SAC         | PPO         | TD3         | PlasticineLab | CPDeform |\\n|-----------|-------------|-------------|-------------|---------------|----------|\\n| Airplane  | 0.0319 \u00b1 0.0003 | 0.0319 \u00b1 0.0003 | 0.0319 \u00b1 0.0003 | 0.0319 \u00b1 0.0003 | 0.0072 \u00b1 0.0001 |\\n| Chair     | 0.0437 \u00b1 0.0006 | 0.0437 \u00b1 0.0006 | 0.0437 \u00b1 0.0006 | 0.0437 \u00b1 0.0006 | 0.0073 \u00b1 0.0001 |\\n| Bottle    | 0.0383 \u00b1 0.0020 | 0.0383 \u00b1 0.0020 | 0.0383 \u00b1 0.0020 | 0.0383 \u00b1 0.0020 | 0.0093 \u00b1 0.0001 |\\n| Star      | 0.0382 \u00b1 0.0012 | 0.0382 \u00b1 0.0012 | 0.0382 \u00b1 0.0012 | 0.0382 \u00b1 0.0012 | 0.0198 \u00b1 0.0004 |\\n\\nTable 1: The averaged Wasserstein-1 distance and the standard deviations of each method.\\n\\nWe find that the stand-alone differentiable physics solver fails completely on the multi-stage tasks, as it lacks the necessary exploration power to overcome the local minima. Take Move++ as an example, the vanilla solver is unable to move away from the cube it first initiates contact with after a stage. Similar to PlasticineLab (Huang et al., 2021), we also observe that the RL approaches in general perform worse than the vanilla gradient-based method.\\n\\n4.3 Evaluation of Contact Point Discovery on Single-Stage Tasks\\n\\nTo further demonstrate the effectiveness of our approach, we compare the one-shot contact points discovered by the backbone of CPDeform with the human-defined contact points on single-stage tasks from PlasticineLab. Table 2 lists the normalized incremental IoU scores, together with the standard deviations of all approaches.\\n\\nFrom Table 2 we can see that on most tasks, CPDeform performs better than or on par with the manipulation performance obtained from the human-defined initial end-effector positions from PlasticineLab.\\n\\nIn Table 7, the agent needs to push one of the four legs of the plasticine. The initial position of the agent in PlasticineLab does not directly establish contact between the end effectors and the plasticine. The stand-alone differentiable physics solver from PlasticineLab with contact loss is inadequate for guiding the agent to find the correct \u201cleg\u201d to push. Whereas in CPDeform, the optimal priorities\"}"}
{"id": "mmUA7_O9mjY", "page_num": 16, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"different time steps, which include the state of the plasticine and manipulator. The differentiable simulator starts from the initial state \\\\( s_0 \\\\) and completes the action sequences by repeatedly executing the forward function \\\\( s_{t+1} = \\\\phi(s_t, a_{t+1}) \\\\) until the ending state \\\\( s_T \\\\) has been reached. The objective of the optimizer is to minimize the distance between the final shape and the target shape. We represent the objective as a loss function \\\\( L(s_T, g) \\\\) where \\\\( g \\\\) is the target shape. Since the simulation forward function \\\\( \\\\phi \\\\) is fully-differentiable, we can compute gradients \\\\( \\\\partial L / \\\\partial a_t \\\\) of the loss \\\\( L \\\\) with respect to each action \\\\( a_t \\\\), and run gradient descent steps to optimize the action sequences by \\\\( a_t = a_t - \\\\alpha \\\\partial L / \\\\partial a_t \\\\) where \\\\( \\\\alpha \\\\) is the learning rate. We repeat this optimization loop for \\\\( N \\\\) iterations. The overall process is reflected by Algorithm 2.\\n\\n**Algorithm 2**\\n\\n**Differentiable Physics Solver for Controller Optimization**\\n\\n**Input:** Target shape \\\\( g \\\\), action sequence \\\\( \\\\{a_1, \\\\ldots, a_T\\\\} \\\\), initial state \\\\( s_0 \\\\), differentiable simulation function \\\\( \\\\phi \\\\), number of iterations \\\\( N \\\\), learning rate \\\\( \\\\alpha \\\\)\\n\\n1: for \\\\( 0 \\\\leq i < N \\\\) do\\n2:   for \\\\( 0 \\\\leq t < T \\\\) do\\n3:     \\\\( s_{t+1} = \\\\phi(s_t, a_{t+1}) \\\\)\\n4:   end for\\n5:   Compute shape difference loss using \\\\( L(s_T, g) \\\\)\\n6:   Update the action sequence by \\\\( a_t = a_t - \\\\alpha \\\\partial L / \\\\partial a_t \\\\)\\n7: end for\\n\\n**Additional Baselines**\\n\\nWe compare CPDeform with two additional baselines, named Multiple-Restarts (Multi-Re) and Bayesian-Optimization (Bayes-Op).\\n\\n**Investigation on multiple restarts**\\n\\nFor each stage, we randomly sample a collection of 15 contact plans. We then use the differentiable physics solver to optimize the action sequence. The execution of the solver for each plan corresponds with a single restart or an \\\"initial guess.\\\" We use the contact plan that achieves the lowest loss for manipulation.\\n\\n**Investigation on Bayesian optimization**\\n\\nFor each stage, we use Bayesian optimization with Gaussian process to optimize the contact plan. We employ a black box function that takes a contact plan as its input and outputs the loss achieved by the differentiable physics solver with that contact plan. We then perform Bayesian optimization for 15 iterations to optimize the contact plan for the given stage.\\n\\n| Environment  | Multi-Re | Bayes-Op | PlasticineLab | CPDeform |\\n|--------------|----------|----------|---------------|----------|\\n| Airplane     | 0.0122   | 0.0369   | 0.0324        | 0.0073   |\\n| Chair        | 0.0098   | 0.0103   | 0.0218        | 0.0072   |\\n| Bottle       | 0.0112   | 0.0136   | 0.0283        | 0.0093   |\\n| Star         | 0.0221   | 0.0212   | 0.0274        | 0.0198   |\\n| Move++       | 0.1209   | 0.1234   | 0.1895        | 0.127    |\\n| Rope++       | 0.0055   | 0.0067   | 0.0075        | 0.0052   |\\n| Writer++     | 0.0076   | 0.0113   | 0.0094        | 0.0067   |\\n\\n**Table 3:** The averaged Wasserstein-1 distance of each method.\\n\\nIn general, we observe that Multiple-Restarts and Bayesian-Optimization perform better than PlasticineLab, or the standalone differentiable physics solver. CPDeform outperforms these two additional baselines. Additionally, because both Multiple-Restarts and Bayesian-Optimization rely heavily on trials and errors to find the suitable contact points, as illustrated in Figure 8, they are much more computationally expensive and less efficient than CPDeform.\\n\\n**Runtime**\\n\\nWe show the runtime of CPDeform, PlasticineLab, Bayesian-Optimization, and Multiple-Restarts in Figure 8. RL approaches are not drawn because they cannot complete the manipulation tasks, and their loss curves are close to the starting loss. We draw the wall-time in seconds on the x-axis and the corresponding Wasserstein-1 distance loss values on the y-axis. Each data point represents the lowest\"}"}
{"id": "mmUA7_O9mjY", "page_num": 17, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Bayesian-Optimization and Multiple-Restarts spend more time than the CPDeform and PlasticineLab on each stage due to the number of Bayesian optimization iterations and the number of restarts performed, respectively. We observe that CPDeform is more efficient than other approaches.\\n\\nFigure 8: Runtime of each method. We draw the wall-time in seconds on the x-axis and the corresponding Wasserstein-1 distance loss values on the y-axis. Each data point represents the lowest loss achieved for that method at the end of a stage.\\n\\nLIMITATION AND FUTURE WORKS\\n\\nIn this section, we discuss several implicit assumptions we made when constructing tasks. These limitations are not common in our tasks and could be addressed by including additional techniques; we did not take those factors into account in this work. We believe they constitute several interesting future directions to explore.\\n\\nDensity Assumption\\n\\nLow or non-uniform density could potentially impact the optimization steps due to varying optimal transport mapping. For instance, the optimal transport loss might not be able to capture areas of the target shape whose particle distributions are extremely sparse (e.g., a few particles) and is likely unable to guide the differentiable physics solver to task completion. In such a case, having low or non-uniform density might pose a limit on our method. As a solution, we have uniformly sampled particles inside the target shapes. By uniformly sampling particles inside a given 3D shape of mesh representation, we create its corresponding target template that the differentiable physics solver can use for the manipulation tasks. We think that considerations of target shapes (e.g., a cuboid) with varying internal configurations (e.g., non-uniform density) is an interesting future direction.\\n\\nVolume Assumption\\n\\nWe assume that the volumes of the initial and target shapes are similar. Since our tasks use manipulators that are tailored to compressing instead of expanding the soft materials, the initial shape cannot be significantly smaller than the target shape. Conversely, if the initial shape is significantly larger than the target shape, it will require a lot of effort to compress the initial shape into the target shape. As a solution, we can meet this condition by cutting and assembling the initial plasticines.\\n\\nTopology Assumption\\n\\nWe assume that the initial and target shapes do not have tremendous topological differences while requiring shape transformation that involves complex motion planning. When this condition is false, the greedy algorithm that finds the best contact points at the current stage could be limited. For example, consider a task where the initial shape is a straight rope, and the target shape is a rope with knots. In order to complete the task, the rope needs to be folded and wrapped, which might lead to a temporary increment of shape-matching loss for a few stages. The greedy approach is limited because it might be unwilling to accept the temporary increment of the loss. It would potentially arrive at a solution whose general shape is matched with the target rope by omitting the detailed knots. As a possible solution, if we incorporate RL-based algorithms into our approach, the ability to plan globally could allow the differentiable physics solver to overcome the temporary increment of the loss at an intermediate stage and act for the best completion of the task at the final stage.\"}"}
{"id": "mmUA7_O9mjY", "page_num": 18, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"We use Writer to study the optimality of our optimal-transport-based heuristic. Holding the height of the manipulator at a fixed value, as illustrated in the leftmost figure in Figure 9, we create a 2D grid that covers the top surface of the plasticine cube. The grid is of size 20 \\\\times 20, and its points are equidistant from each other on each row or column. We then record the loss achieved by executing the differentiable physics solver at each grid point (i.e., contact point). Having collected a grid of loss values, we use interpolation to draw the 2D loss landscape, as illustrated in Figure 9. By exhaustively searching through each grid point, we observe that the higher transport priorities indicated by our heuristic tend to correlate with lower loss values, and vice versa.\\n\\nFigure 9: We demonstrate the visualizations of the transport priorities and the loss landscape using Writer. For the loss landscape, the color of each pixel corresponds with the loss achieved by applying the differentiable physics solver near the corresponding simulator coordinate, where the height of the manipulator is set as a fixed value (illustrated in the current shape). Here, warmer colors indicate smaller loss values and colder colors indicate larger loss values.\"}"}
{"id": "mmUA7_O9mjY", "page_num": 12, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Differentiable cloth simulation for inverse problems. Junbang Liang, Ming C Lin, and Vladlen Koltun. Advances in Neural Information Processing Systems, 2019.\\n\\nSoftgym: Benchmarking deep reinforcement learning for deformable object manipulation. Xingyu Lin, Yufei Wang, Jake Olkin, and David Held. arXiv preprint arXiv:2011.07215, 2020.\\n\\nLearning visible connectivity dynamics for cloth smoothing. Xingyu Lin, Yufei Wang, and David Held. arXiv preprint arXiv:2105.10389, 2021.\\n\\nDiffaqua: A differentiable computational design pipeline for soft underwater swimmers with shape interpolation. Pingchuan Ma, Tao Du, John Z Zhang, Kui Wu, Andrew Spielberg, Robert K Katzschmann, and Wojciech Matusik. ACM Transactions on Graphics (TOG), 40(4):132, 2021.\\n\\nDex-net 2.0: Deep learning to plan robust grasps with synthetic point clouds and analytic grasp metrics. Jeffrey Mahler, Jacky Liang, Sherdil Niyaz, Michael Laskey, Richard Doan, Xinyu Liu, Juan Aparicio Ojea, and Ken Goldberg. CoRR, abs/1703.09312, 2017.\\n\\nSim-to-real reinforcement learning for deformable object manipulation. Jan Matas, Stephen James, and Andrew J Davison. arXiv preprint arXiv:1806.07851, 2018.\\n\\nA system for robotic heart surgery that learns to tie knots using recurrent neural networks. Hermann Mayer, Faustino Gomez, Daan Wierstra, Istvan Nagy, Alois Knoll, and J\u00fcrgen Schmidhuber. Advanced Robotics, 22(13-14):1521\u20131537, 2008.\\n\\nManipulating deformable objects by interleaving prediction, planning, and control. Dale McConachie, Andrew Dobson, Mengyao Ruan, and Dmitry Berenson. The International Journal of Robotics Research, 39(8):957\u2013982, 2020.\\n\\nAutomatic differentiation and continuous sensitivity analysis of rigid body dynamics. David Millard, Eric Heiden, Shubham Agrawal, and Gaurav S Sukhatme. arXiv preprint arXiv:2001.08539, 2020.\\n\\nGraspit! a versatile simulator for robotic grasping. A.T. Miller and P.K. Allen. IEEE Robotics Automation Magazine, 11(4):110\u2013122, 2004. doi: 10.1109/MRA.2004.1371616.\\n\\nPlaying atari with deep reinforcement learning. Volodymyr Mnih, Koray Kavukcuoglu, David Silver, Alex Graves, Ioannis Antonoglou, Daan Wierstra, and Martin Riedmiller. arXiv preprint arXiv:1312.5602, 2013.\\n\\nDiscovery of complex behaviors through contact-invariant optimization. Igor Mordatch, Emanuel Todorov, and Zoran Popovi\u0107. ACM Transactions on Graphics (TOG), 31(4):1\u20138, 2012.\\n\\nGradsim: Differentiable simulation for system identification and visuomotor control. In International Conference on Learning Representations, 2020.\\n\\nCombining self-supervised learning and imitation for vision-based rope manipulation. Ashvin Nair, Dian Chen, Pulkit Agrawal, Phillip Isola, Pieter Abbeel, Jitendra Malik, and Sergey Levine. In 2017 IEEE international conference on robotics and automation (ICRA), pp. 2146\u20132153. IEEE, 2017.\\n\\nConstructing force-closure grasps. Van-Duc Nguyen. The International Journal of Robotics Research, 7(3):3\u201316, 1988. doi: 10.1177/027836498800700301.\\n\\nA direct method for trajectory optimization of rigid bodies through contact. Michael Posa, Cecilia Cantu, and Russ Tedrake. The International Journal of Robotics Research, 33(1):69\u201381, 2014.\\n\\nScalable differentiable physics for learning and control. Yi-Ling Qiao, Junbang Liang, Vladlen Koltun, and Ming C Lin. arXiv preprint arXiv:2007.02168, 2020.\"}"}
{"id": "mmUA7_O9mjY", "page_num": 13, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":null}"}
{"id": "mmUA7_O9mjY", "page_num": 14, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Yilin Wu, Wilson Yan, Thanard Kurutach, Lerrel Pinto, and Pieter Abbeel. Learning to manipulate deformable objects without demonstrations, 2020.\\n\\nMengyuan Yan, Yilin Zhu, Ning Jin, and Jeannette Bohg. Self-supervised learning of state estimation for manipulating deformable linear objects. IEEE Robotics and Automation Letters, 5(2):2372\u20132379, 2020.\"}"}
{"id": "mmUA7_O9mjY", "page_num": 15, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"A E N V I R O N M E N T D E T A I L S\\n\\n\u2022 Airplane\\nThe agent needs to manipulate a pair of \\\"spatulas\\\" (represented as round boxes) to sculpt the nose, wing, and tail on the plasticine cube to match the target airplane shape.\\n\\n\u2022 Chair\\nWith a pair of \\\"spatulas,\\\" the agent needs to build the seat, back, and armrest from the plasticine cube to reach the target chair shape.\\n\\n\u2022 Bottle\\nWith a pair of \\\"spatulas,\\\" the agent needs to build the neck and body from the plasticine cube to reach the target bottle shape.\\n\\n\u2022 Star\\nThe agent needs to manipulate a pair of \\\"spatulas\\\" to build the tips of the star from the plasticine cube to reach the target bottle shape.\\n\\n\u2022 Move++\\nThe agent needs to use a single pair of sphere manipulators to separately transport three plasticine cubes to fulfill the three destinations of demand.\\n\\n\u2022 Rope++\\nThe agent needs to use a single pair of sphere manipulators to reshape the plasticine rope to reach the target polyline shape.\\n\\n\u2022 Writer++\\nThe agent manipulates a \\\"pen\\\" (represented using a vertical capsule) to print the letters \\\"ICLR\\\" on the plasticine cube.\\n\\n\u2022 Pinch\\nIn this task, the agent manipulates one rigid sphere to create dents specified by the target shape on the plasticine box.\\n\\nB M O R E D E T A I L S A B O U T O P T I M A L T R A N S P O R T\\n\\nOptimal transport is useful for comparing measures $\\\\mu$ and $\\\\nu$ in a Lagrangian framework, by accounting for the cost of transporting one measure to another. Here, we consider the first measure $\\\\mu$ as the soft-body particles in the source state and $\\\\nu$ as the soft-body particles in the target state that we wish to achieve through manipulation, where both input measures are on the space $\\\\mathbb{R}^n_p \\\\times 3$.\\n\\nLet $\\\\alpha, \\\\beta \\\\in \\\\mathbb{R}^n_p$ be the mass vectors that for the particles in $\\\\mu, \\\\nu$ respectively. Since all particles are weighted equally in our simulator, $\\\\alpha = \\\\beta = 1$.\\n\\nLet $U(\\\\alpha, \\\\beta)$ be the polytope that contains all transport plans, which are non-negative matrices whose rows and columns sum to $\\\\alpha, \\\\beta$ respectively. We have $U(\\\\alpha, \\\\beta) := \\\\{ P \\\\in \\\\mathbb{R}^n_p \\\\times \\\\mathbb{n}_p^+ | P_{1} = \\\\alpha, P^T_{1} = \\\\beta \\\\}$.\\n\\nGiven a cost function $C: \\\\mathbb{R}^3 \\\\times \\\\mathbb{R}^3 \\\\rightarrow [0, \\\\infty]$, we create the cost matrix $M \\\\in \\\\mathbb{R}^n_p \\\\times \\\\mathbb{n}_p$, where each element $M_{i,j} = C(\\\\mu_i, \\\\nu_j)$ measures the cost of transporting the particle $\\\\mu_i$ to $\\\\nu_j$. Now, the cost of mapping $\\\\mu$ to $\\\\nu$ can be quantified as $\\\\langle P, M \\\\rangle$.\\n\\nWe define the primal form of the optimal transport (OT) problem as $\\\\text{OT}(\\\\alpha, \\\\beta) := \\\\min_{P \\\\in U(\\\\alpha, \\\\beta)} \\\\langle P, M \\\\rangle$.\\n\\nC P S E U D O C O D E O F C P D E F O R M\\n\\nAlgorithm 1\\n\\nInput:\\nCurrent shape $S_0$ with $N$ particles, goal shape $G$, number of stages $n_{stage}$, number of steps per stage $n_{step}$, candidate pose set $T$\\n\\n1: for $0 \\\\leq i < n_{stage}$ do\\n2: Compute optimal transport priorities $\\\\{\\\\alpha_i\\\\}_{i \\\\leq N}$ between $S_i$ and goal shape $G$\\n3: Find point $p$ with largest priorities $\\\\alpha_p$\\n4: for pose $t \\\\in T$ do\\n5: Place manipulators around point $p$ with largest heuristic value without collisions\\n6: Solve trajectories with differentiable physics to generate plan $p_t$ and compute its shape matching loss $c_t$\\n7: end for\\n8: Execute the plan $p_t$ with the minimal loss $c_t$\\n9: end for\\n\\nD O N T R O N O R L E R O P T I M I Z A T I O N W I T H D I F F E R E N T I A L P H Y S I C S\\n\\nConsider that the motion trajectory is parameterized as a sequence of three-dimensional actions $\\\\{a_1, \\\\ldots, a_T\\\\}$, where $T$ is the number of simulation steps. Let $\\\\{s_t\\\\}_{0 \\\\leq t \\\\leq T}$ be simulation states at time $t$. This sequence is parameterized by a differentiable function, $s_t = f_{\\\\theta}(a_1, \\\\ldots, a_T, t, \\\\theta)$, where $\\\\theta$ are the differentiable physics parameters.\\n\\nTo optimize the controller, we would typically use gradient descent to minimize the following cost function:\\n\\n$$\\\\mathcal{L}(\\\\theta) = \\\\frac{1}{T} \\\\sum_{t=1}^{T} (s_t - s^*_t)^2$$\\n\\nwhere $s^*_t$ is the desired state at time $t$.\"}"}
{"id": "mmUA7_O9mjY", "page_num": 8, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table 2: We compare our contact point discovery backbone with human-defined contact points from PlasticineLab on single-stage tasks. We show the averaged normalized incremental IoU scores and the standard deviations of each method. capable of identifying the \u201cleg\u201d of interest, resulting in a suitable placement of the manipulator that significantly improves task completion. However, we recognize that CPDeform is not a panacea. We notice that CPDeform struggles on Chopsticks due to the limitation of transport priorities for capturing the dramatic topological change. Specifically, we find that the transport priorities cannot discover the transport plan that preserves the continuity of the topology, as discussed in Feydy (2020). How to find a continuous correspondence to map a source shape to target remains to be an interesting future direction to explore.\\n\\n4.4 COMPARISON WITH OTHER CONTACT DISCOVERY METHOD\\n\\nIn this section, we perform an ablation study to verify if transport priorities help find accurate solutions efficiently. We compare CPDeform with random sampling contact points on the surface of the soft bodies, while maintaining all other settings and hyperparameters, including the number of stages and candidate pose sets. Figure 7 shows the comparison of randomly sampled contact points with CPDeform. We observe that our method in CPDeform outperforms the surface-point sampling strategy by a large margin in terms of both accuracy and efficiency, proving the effectiveness of the transport-priority-based contact point discovery backbone employed by CPDeform.\\n\\n5 RELATED WORK\\n\\nSoft Body Manipulation. Soft body manipulation has a long history in robotics across multiple fields, such as fabric manipulation (Liang et al., 2019; Wu et al., 2020; Ha & Song, 2021), rope controlling (Yan et al., 2020; Wu et al., 2020; Gan et al., 2021), and food preparation (Bollini et al., 2013; Heiden et al., 2019). In this work, we study the elastoplastic materials in PlasticineLab (Huang et al., 2021) due to their wider applications than the pure elastic material model, leading to more general and realistic modeling of real-world soft bodies. The high degrees of freedom of soft bodies (Hu et al., 2018; Essahbi et al., 2012) limit the application of motion planning methods (Kuffner & LaValle, 2000; Kavraki et al., 1996) and most works focus on linear models like rope (Saha & Isto, 2006; 2007; Wakamatsu et al., 2006) or planar models like cloth (McConachie et al., 2020). Control methods such as Hirai & Wada (2000); Wada et al. (2001); Smolen & Patriciu (2009) bypass the expensive global planning by approximating local models and manipulating soft bodies with local controllers, which sacrifices the ability to plan for the multi-stage tasks that we study in this work.\\n\\nRecent development of Deep RL (Mnih et al., 2013; Schulman et al., 2017; Haarnoja et al., 2017; Fujimoto et al., 2018) methods has enabled a unified approach to learn both perception module and manipulation policy in an end-to-end way (Lin et al., 2020; Wu et al., 2020; Nair et al., 2017; Wang et al., 2019). However, policy learning suffers from exploration issue and usually require a huge\"}"}
{"id": "mmUA7_O9mjY", "page_num": 9, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"amount of data or additional expert demonstrations to support imitation learning (Wu et al., 2020; Lee et al., 2015; Matas et al., 2018; Seita et al., 2019). Another popular approach is to use neural networks to approximate soft body dynamics (Li et al., 2018; Lin et al., 2021; Hoque et al., 2021) and solve control problems with model predictive control (Rubinstein, 1999) or gradient-based optimization. While these methods gain the generalizability by employing a shared local dynamic model, they need a way to use the model for planning. Similar to our iterative contact-and-deform approach, methods like Lin et al. (2020); Seita et al. (2019); Li et al. (2018) apply a pick-and-place action space to manipulate soft bodies like cloth and rope. While this action space enables efficient exploration and simplifies learning tasks, it poses a restriction for the type of end effectors, making it unsuitable for the fine-grained manipulation of soft bodies such as plasticine. Comparatively, CPDeform leverages the differentiable physics solver to complete more sophisticated manipulation tasks.\\n\\nDifferentiable Physics for Trajectory Optimization.\\n\\nOur method uses the differentiable simulator developed in PlasticineLab (Huang et al., 2021) for trajectory optimization. Encouraged by the success of gradient descent in neural network learning, differentiable physics with analytic physics models (Geilinger et al., 2020; Degrave et al., 2016; de Avila Belbute-Peres et al., 2018; Carpentier & Mansard, 2018; Giftthaler et al., 2017; Heiden et al., 2019; 2020; 2021; Toussaint et al., 2018; Hu et al., 2019; 2020; Qiao et al., 2020; Murthy et al., 2020; Millard et al., 2020; Werling et al., 2021; Du et al., 2021; Ma et al., 2021) has gained increasing popularity. As mentioned in Sec. 2, applying gradient-optimization with an inappropriate contact point would get stuck in the local minima, especially in tasks where multiple contact switches are needed. Previous research has explored various ways to handle contacts for rigid bodies. Contact-invariant optimization (Mordatch et al., 2012) imposes variables as soft representation of objects' contact relationship, and in (Posa et al., 2014; Sleiman et al., 2019), contacts are handled implicitly within analytical models. However, due to the nonlinear and contact-rich nature of manipulation tasks, we often have to combine search and optimization to solve mixed-integer program (Han & Tedrake, 2020) or logic-geometric program (Toussaint et al., 2018) problems, which are inefficient given the complexity of 3D soft bodies. We explore a complementary direction of previous approaches. By integrating visual cues into differentiable physics, we are able to skip many local minima and boost the performance in various soft body manipulation tasks.\\n\\nGrasping and Rigid Body Manipulation.\\n\\nOur contact point discovery approach shares a similar spirit with grasp pose detection in rigid body manipulation. Determining contact point or grasp pose for different end effectors is one of the everlasting topics in rigid body manipulation (Bohg et al., 2014; Miller & Allen, 2004; Dang & Allen, 2012; Qin et al., 2020; Mahler et al., 2017). By analyzing 3D geometry (Sahbani et al., 2012; Hong et al., 2021), one can find antipodal grasps that satisfy force closure (Nguyen, 1988; Chen & Burdick, 1993), and grasp objects without running simulation. Similarly, our contact point discovery method tries to find contact points through geometrical analysis, in an effort to extend geometric analysis for more general soft body manipulation tasks.\\n\\n6 CONCLUSIONS AND FUTURE WORK\\n\\nIn this paper, we propose a novel framework, CPDeform, that integrates optimal transport-based contact discovery into differentiable physics. Extensive experiments suggest that our proposed contact point discovery method, when directly employed by the differentiable solver, performs on par with or better than human-defined initial contact points on single-stage tasks. On multi-stage tasks that are infeasible for the vanilla solver, CPDeform employs a heuristic searching approach to iteratively solve the tasks. Our work demonstrates the importance of contact points in policy learning with differentiable physics and the advantage of geometric-analysis methods as a heuristic.\\n\\nOur framework requires a properly defined Wasserstein distance on the object's representation. The choice of material types does not affect our optimal transport heuristic because it relies on shape information only. We assume uniform density of the object template and moderately similar topology across initial and target shapes. Interesting avenues for future work include generalizing the discovery of useful contact points through learning methods for a diverse set of shapes, and applying a similar contact point discovery principle to dexterous rigid body manipulation, or combining it with other planning approaches. We refer the readers to Appendix G for more discussions on the limitation and future works.\\n\\nAcknowledgement.\\n\\nWe thank Hannah Skye Dunnigan for her help on graphic design. This work was supported by MIT-IBM Watson AI Lab and its member company Nexplore, ONR MURI (N00014-13-1-0333), DARPA Machine Common Sense program, ONR (N00014-18-1-2847) and MERL.\"}"}
{"id": "mmUA7_O9mjY", "page_num": 10, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Jeannette Bohg, Antonio Morales, Tamim Asfour, and Danica Kragic. Data-driven grasp synthesis\u2014a survey. IEEE Transactions on Robotics, 30(2):289\u2013309, 2014. doi: 10.1109/TRO.2013.2289018.\\n\\nMario Bollini, Stefanie Tellex, Tyler Thompson, Nicholas Roy, and Daniela Rus. Interpreting and executing recipes with a cooking robot. In Experimental Robotics, pp. 481\u2013495. Springer, 2013.\\n\\nJustin Carpentier and Nicolas Mansard. Analytical derivatives of rigid body dynamics algorithms. In Robotics: Science and systems (RSS 2018), 2018.\\n\\nI-Ming Chen and J.W. Burdick. Finding antipodal point grasps on irregularly shaped objects. IEEE Transactions on Robotics and Automation, 9(4):507\u2013512, 1993. doi: 10.1109/70.246063.\\n\\nMarco Cuturi. Sinkhorn distances: Lightspeed computation of optimal transport. In C. J. C. Burges, L. Bottou, M. Welling, Z. Ghahramani, and K. Q. Weinberger (eds.), Advances in Neural Information Processing Systems, volume 26. Curran Associates, Inc., 2013. URL https://proceedings.neurips.cc/paper/2013/file/af21d0c97db2e27e13572cbf59eb343d-Paper.pdf.\\n\\nHao Dang and Peter K. Allen. Semantic grasping: Planning robotic grasps functionally suitable for an object manipulation task. In 2012 IEEE/RSJ International Conference on Intelligent Robots and Systems, pp. 1311\u20131317, 2012. doi: 10.1109/IROS.2012.6385563.\\n\\nFilipe de Avila Belbute-Peres, Kevin Smith, Kelsey Allen, Josh Tenenbaum, and J Zico Kolter. End-to-end differentiable physics for learning and control. In Advances in Neural Information Processing Systems, pp. 7178\u20137189, 2018.\\n\\nJonas Degrave, Michiel Hermans, Joni Dambre, et al. A differentiable physics engine for deep learning in robotics. arXiv preprint arXiv:1611.01652, 2016.\\n\\nTao Du, Kui Wu, Pingchuan Ma, Sebastien Wah, Andrew Spielberg, Daniela Rus, and Wojciech Matusik. Diffpd: Differentiable projective dynamics with contact. arXiv preprint arXiv:2101.05917, 2021.\\n\\nNabil Essahbi, Belhassen Chedli Bouzgarrou, and Grigore Gogu. Soft material modeling for robotic manipulation. In Applied Mechanics and Materials, volume 162, pp. 184\u2013193. Trans Tech Publ, 2012.\\n\\nJ Feydy. Geometric data analysis, beyond convolutions. PhD thesis, PhD thesis, Universit\u00e9 Paris-Saclay, 2020.\\n\\nScott Fujimoto, Herke Hoof, and David Meger. Addressing function approximation error in actor-critic methods. In International Conference on Machine Learning, pp. 1582\u20131591, 2018.\\n\\nChuang Gan, Jeremy Schwartz, Seth Alter, Martin Schrimpf, James Traer, Julian De Freitas, Jonas Kubilius, Abhishek Bhandwaldar, Nick Haber, Megumi Sano, et al. Threedworld: A platform for interactive multi-modal physical simulation. NeurIPS, 2021.\\n\\nMoritz Geilinger, David Hahn, Jonas Zehnder, Moritz B\u00e4cher, Bernhard Thomaszewski, and Stelian Coros. Add: Analytically differentiable dynamics for multi-body systems with frictional contact. arXiv preprint arXiv:2007.00987, 2020.\\n\\nMarkus Giftthaler, Michael Neunert, Markus St\u00e4uble, Marco Frigerio, Claudio Semini, and Jonas Buchli. Automatic differentiation of rigid body dynamics for optimal control and estimation. Advanced Robotics, 31(22):1225\u20131237, 2017.\\n\\nHuy Ha and Shuran Song. Flingbot: The unreasonable effectiveness of dynamic manipulation for cloth unfolding. arXiv preprint arXiv:2105.03655, 2021.\"}"}
{"id": "mmUA7_O9mjY", "page_num": 11, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Tuomas Haarnoja, Aurick Zhou, Pieter Abbeel, and Sergey Levine. Soft actor-critic: Off-policy maximum entropy deep reinforcement learning with a stochastic actor. 2017.\\n\\nWeiqiao Han and Russ Tedrake. Local trajectory stabilization for dexterous manipulation via piecewise affine approximations. In 2020 IEEE International Conference on Robotics and Automation (ICRA), pp. 8884\u20138891. IEEE, 2020.\\n\\nEric Heiden, David Millard, Hejia Zhang, and Gaurav S Sukhatme. Interactive differentiable simulation. arXiv preprint arXiv:1905.10706, 2019.\\n\\nEric Heiden, David Millard, Erwin Coumans, and Gaurav S Sukhatme. Augmenting differentiable simulators with neural networks to close the sim2real gap. arXiv preprint arXiv:2007.06045, 2020.\\n\\nEric Heiden, Miles Macklin, Yashraj Narang, Dieter Fox, Animesh Garg, and Fabio Ramos. Disect: A differentiable simulation engine for autonomous robotic cutting. arXiv preprint arXiv:2105.12244, 2021.\\n\\nShinichi Hirai and Takahiro Wada. Indirect simultaneous positioning of deformable objects with multi-pinching fingers based on an uncertain model. Robotica, 18(1):3\u201311, 2000.\\n\\nYining Hong, Li Yi, Joshua B Tenenbaum, Antonio Torralba, and Chuang Gan. Ptr: A benchmark for part-based conceptual, relational, and physical reasoning. In Advances In Neural Information Processing Systems, 2021.\\n\\nRyan Hoque, Daniel Seita, Ashwin Balakrishna, Aditya Ganapathi, Ajay Kumar Tanwani, Nawid Jamali, Katsu Yamane, Soshi Iba, and Ken Goldberg. Visuospatial foresight for physical sequential fabric manipulation. arXiv preprint arXiv:2102.09754, 2021.\\n\\nYuanming Hu, Yu Fang, Ziheng Ge, Ziyin Qu, Yixin Zhu, Andre Pradhana, and Chenfanfu Jiang. A moving least squares material point method with displacement discontinuity and two-way rigid body coupling. ACM Transactions on Graphics (TOG), 37(4):1\u201314, 2018.\\n\\nYuanming Hu, Jiancheng Liu, Andrew Spielberg, Joshua B Tenenbaum, William T Freeman, Jiajun Wu, Daniela Rus, and Wojciech Matusik. Chainqueen: A real-time differentiable physical simulator for soft robotics. In 2019 International Conference on Robotics and Automation (ICRA), pp. 6265\u20136271. IEEE, 2019.\\n\\nYuanming Hu, Luke Anderson, Tzu-Mao Li, Qi Sun, Nathan Carr, Jonathan Ragan-Kelley, and Fr\u00e9do Durand. Difftaichi: Differentiable programming for physical simulation. ICLR, 2020.\\n\\nZhiao Huang, Yuanming Hu, Tao Du, Siyuan Zhou, Hao Su, Joshua B Tenenbaum, and Chuang Gan. Plasticinelab: A soft-body manipulation benchmark with differentiable physics. arXiv preprint arXiv:2104.03311, 2021.\\n\\nLydia E Kavraki, Petr Svestka, J-C Latombe, and Mark H Overmars. Probabilistic roadmaps for path planning in high-dimensional configuration spaces. IEEE transactions on Robotics and Automation, 12(4):566\u2013580, 1996.\\n\\nJames J Kuffner and Steven M LaValle. Rrt-connect: An efficient approach to single-query path planning. In Proceedings 2000 ICRA. Millennium Conference. IEEE International Conference on Robotics and Automation. Symposia Proceedings (Cat. No. 00CH37065), volume 2, pp. 995\u20131001. IEEE, 2000.\\n\\nAlex X Lee, Abhishek Gupta, Henry Lu, Sergey Levine, and Pieter Abbeel. Learning from multiple demonstrations using trajectory-aware non-rigid registration with applications to deformable object manipulation. In 2015 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), pp. 5265\u20135272. IEEE, 2015.\\n\\nYunzhu Li, Jiajun Wu, Russ Tedrake, Joshua B Tenenbaum, and Antonio Torralba. Learning particle dynamics for manipulating rigid bodies, deformable objects, and fluids. arXiv preprint arXiv:1810.01566, 2018.\"}"}
