{"id": "O50443AsCP", "page_num": 6, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table 3: Denotation accuracies on SQA test set. ALL is the denotation accuracy over all sentences, SEQ the denotation accuracy over all conversations, and $Q_i$ the denotation accuracy of the $i$-th sentence in a conversation.\\n\\n| Model         | Dev Test | Test Test |\\n|---------------|----------|-----------|\\n| Pre-trained Language Models |          |           |\\n| Chen et al. (2020) | 65.1 65.1 | 79.1 58.2 |\\n| Zhong et al. (2020b) | 71.8 71.7 | 85.4 65.1 |\\n| Shi et al. (2020a) | 72.5 72.3 | 85.9 65.1 |\\n| Zhang et al. (2020) | 73.3 73.2 | 85.5 67.2 |\\n| Yang et al. (2020) | 74.9 74.4 | 88.3 67.2 |\\n| Eisenschlos et al. (2020) | 81.0 81.0 | 92.3 75.3 |\\n| BART | 81.2 80.8 | 90.7 76.0 |\\n\\nTable 4: Accuracies on TAF, including the Human Performance. In the following, unless specified explicitly, all the experimental results are by default evaluated under the 5 million setting. Our pre-training procedure runs up to 50,000 steps with a batch size of 256. It takes about 36 hours on 8 Tesla V100 GPUs to finish the pre-training. The best pre-training checkpoint is selected based on the loss on the validation set. For all downstream datasets, the fine-tuning procedure runs up to 20,000 steps with a batch size of 128. For both pre-training and fine-tuning, the learning rate is $3 \\\\times 10^{-5}$.\\n\\n4.1 RESULTS\\n\\nTable 1, Table 2, Table 3 and Table 4 summarize the experimental results of various models on WikiSQL-WeAK, WikiTABLE QUESTIONS, SQA and TAF respectively. For both dev and test sets of all datasets, we report the median performance of our approach for five random runs.\\n\\nAs shown in Table 1, TAPEX outperforms all the baselines by a large margin. On the test set of WikiSQL-WeAK, TAPEX registers a denotation accuracy of 89.5%, which is 3.7% higher than BART and 2.3% higher than the previous best performance. This is significant since the previous best model has already utilized the execution-guided decoding. In short, TAPEX achieves a new state-of-the-art result on the well-known benchmark WikiSQL-WeAK.\\n\\nOn the more challenging WikiTABLE QUESTIONS, TAPEX also achieves a new state-of-the-art denotation accuracy of 57.5%, surpassing the previous best system by 4.8% (Table 2). Meanwhile, we find that BART alone can only reach the denotation accuracy of 38.0%, much worse than the performance of previous pre-training models. We conjecture that the performance degradation could be attributed to the relatively small amount of training data in WikiTABLE QUESTIONS, which makes the adaptation of BART to tabular structures more challenging.\"}"}
{"id": "O50443AsCP", "page_num": 7, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Who are the only players listed that played in 2011?\\n\\n| Player | Year | Round     | Result | Opponent       |\\n|--------|------|-----------|--------|----------------|\\n| Raymon van Barneveld | 2009 | Quarter-final | Won   | Jelle Klaasen |\\n| Raymon van Barneveld | 2010 | 2nd round  | Won   | Brenda and Oscar |\\n| Adrian Lewis | 2011 | Final      | Won   | Gary anderson |\\n\\nFigure 4: The visualization results of attention weights from other tokens to the cell \\\"adrian lewis.\\n\\nIntuitively, the darker the color, the more closely the word is associated with \\\"adrian lewis.\\\" However, TAPEX delivers a dramatic improvement of 19.5% over BART, indicating that in the low data regime, the improvements introduced by TAPEX are often more significant.\\n\\nTable 3 presents the performance of various models on the test set of SQA, where TAPEX again obtains a new state-of-the-art denotation accuracy in terms of both the conversation level (48.4%) and the sentence level (74.5%). This improvement is also a surprise to us since SQA is a conversational dataset while our pre-training task is context-free. Meanwhile, the substantial improvements of TAPEX over BART on SQA continues to verify the same observation that TAPEX alleviates the low resource issue.\\n\\nBeyond TableQA, TAPEX also excels at TableFV. As shown in Table 4, TAPEX achieves new state-of-the-art results on all subsets of TableFV. For example, it surpasses the previous best system by 4.0% on Test complex. The result shows that TAPEX endows BART with generic table understanding capabilities, which could be adapted to different downstream tasks, regardless of whether these tasks are highly similar to the TAPEX pre-training task or not.\\n\\nOverall Results\\n\\nExperimental results on four datasets show that TAPEX can broadly improve the model ability on understanding tables, especially in the low data regime.\\n\\n4.2 Multi-Task Results\\n\\nAs discussed in \u00a7 2.2, our approach can easily perform multi-task learning, thereby conferring benefits to downstream tasks. To verify it, we conducted multi-task fine-tuning experiments and obtained the following findings: (1) when initialized by BART, multi-task fine-tuning boosts the performance of the target task significantly; (2) when initialized by TAPEX, the gain of multi-task fine-tuning tends to be marginal, suggesting that most of the \\\"skills\\\" (loosely speaking) gained by multi-task learning can be acquired by our table pre-training. Detailed results can be found in Appendix B.\\n\\n5 Analysis\\n\\nIn this section, we carefully analyze our approach in terms of various aspects. Besides, we perform an exploratory analysis to provide more insights for future work, which can be found in Appendix C.\\n\\nSQL Execution by Pre-training\\n\\nIn order to understand how well TAPEX performs SQL execution after pre-training, we analyze its performance on nearly 20,000 held-out SQL queries over unseen tables. Overall, the SQL execution accuracy is relatively high, as TAPEX correctly \\\"executes\\\" 89.6% of the SQL queries. In particular, TAPEX performs better on Filter, Aggregate and Superlative operators, indicating that it is highly accurate in table cell selection and table aggregating. Regarding Arithmetic and Comparative operators, TAPEX also does a good job, demonstrating its numerical reasoning skill on tables. To summarize, TAPEX has learned to be a neural SQL executor with good selection, aggregating and numerical capabilities.\\n\\nTable Understanding by Pre-training\\n\\nTo provide insight on if TAPEX helps downstream tasks understand tables better, we visualize and analyze the self-attention of TAPEX (without fine-tuning) on sampled WikiTableQuestions examples. As shown in Figure 4, TAPEX seems to focus more on the row and the header where a cell corresponds to. Taking the example from Figure 4, the attention weights imply that \\\"adrian lewis\\\" is closely associated with the first column \\\"player\\\" and the entire third row, which are the positions of \\\"adrian lewis\\\" in the structured table.\\n\\nTable Reasoning by Pre-training\\n\\nTo understand if TAPEX can improve table reasoning, we compare the performance of TAPEX to BART on 500 randomly selected questions and manually analyzed.\\n\\nThe full analysis about SQL execution can be found in Appendix D.\"}"}
{"id": "O50443AsCP", "page_num": 8, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Published as a conference paper at ICLR 2022\\n\\nOperator Example Question BART T\\n\\nSelect\\nWhat is\\nthe years won\\nfor each team?\\n\\n41.3%\\n64.8%\\n(\\\\(+\\\\) 23.5%)\\n\\nFilter\\nHow long did\\nTaiki Tsuchiya\\nlast?\\n\\n40.1%\\n65.7%\\n(\\\\(+\\\\) 25.6%)\\n\\nAggregate\\nWhat is the\\namount of\\nmatches drawn?\\n\\n26.9%\\n57.4%\\n(\\\\(+\\\\) 30.5%)\\n\\nSuperlative\\nWhat was the\\nlast\\nBaekje Temple?\\n\\n46.3%\\n64.3%\\n(\\\\(+\\\\) 18.0%)\\n\\nArithmetic\\nWhat is the\\ndifference\\nbetween White\\nvoters and Black voters in 1948?\\n\\n33.1%\\n53.5%\\n(\\\\(+\\\\) 20.4%)\\n\\nComparative\\nBesides Tiger Woods, what other player\\nwon\\nbetween 2007 and 2009?\\n\\n30.0%\\n55.9%\\n(\\\\(+\\\\) 25.9%)\\n\\nGroup\\nWhat was score\\nfor each\\nwinning game?\\n\\n49.5%\\n66.7%\\n(\\\\(+\\\\) 17.2%)\\n\\nTable 5: The most common operators in the randomly\\nselected\\n500\\nquestions from WIKI TABLE QUESTIONS\\ndev set. Listed are, the operator, the example question with the operator semantic (i.e.,\\nthe colorful\\nspans), the performance of BART and TAPEX on the operator.\\n\\nAmount of Pretraining Corpus (Millions)\\n\\n| Task Performance (%) |\\n|----------------------|\\n| WIKITABLEQUESTIONS  |\\n| STABFAQT            |\\n| WIKISQL-WEAK        |\\n\\nFigure 5: The illustration of downstream tasks per-\\nformance with different scales of pre-training corpus. Scaling up the pre-training corpus of TAPEX\\ngenerally brings positive effects across datasets.\\n\\nAmount of Pretraining Corpus (Millions)\\n\\n| Denotation Accuracy (%) |\\n|-------------------------|\\n| TAPEX                   |\\n| TAPEX                   |\\n\\nFigure 6: The amount of pre-training cor-\\npus vs. denotation accuracy on WIKI TABLE-\\nQUESTIONS dev set. TAPEX surpasses exist-\\ning table pre-training approaches with a much\\nsmaller corpus, showing its high efficiency.\\n\\nThe Scale of Pre-training Corpus\\n\\nFigure 5 illustrates downstream performance with different\\nscales of the pre-training corpus. It can be seen that even if our pre-training corpus is synthetic,\\nscaling up the pre-training corpus generally brings positive effects. The observation is analogous to\\nthe one in language modeling (Brown et al., 2020): the larger the pre-training corpus, the better the\\ndownstream performance. By the comparison across different datasets, we can find that for simple\\ntasks like WIKISQL-WEAK, the gains by scaling up pre-training corpus become marginal, while\\nthey remain non-trivial for complex tasks like TABFAQT. Meanwhile, both downstream datasets in\\nthe low data regime show a positive trend by increasing the pre-training corpus. Conclusively, the\\nscale matters when the downstream task is difficult, or the downstream dataset is relatively small.\\n\\nThe Efficiency of Pre-training\\n\\nAs mentioned in \u00a7 1, the pre-training efficiency of existing ta-\\nble pre-training approaches is relatively low, as they usually require an extremely large corpus.\\nTherefore, taking WIKI TABLE QUESTIONS as an example, we compare the pre-training efficiency\\nof TAPEX with TAPEX (Herzig et al., 2020), TAPEXTABLE (Yin et al., 2020) and GRAPP (Yu et al.,\\n2021a). It is worth noting that part of the pre-training corpus for GRAPP comes from human-\\nannotated, high-quality parallel data. As shown in Figure 6, TAPEX can yield very promising\\nperformance when using a much smaller pre-training corpus, indicating that our proposed SQL\\nexecution pre-training task is more efficient than other table pre-training tasks.\\n\\nLimitations\\n\\nThe first limitation of our approach is that it cannot ideally handle large tables. As\\nmentioned above, we employ the table flattening technique to represent a table. It works well when\\nthe table is relatively small, but it becomes infeasible when the table is too large to fit in memory.\\nIn practice, we can compress tables by removing some unrelated rows or columns, which would\\ndecrease downstream performance. The second limitation is that the task of text-to-SQL cannot\\n\"}"}
{"id": "O50443AsCP", "page_num": 9, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"benefit from our proposed table pre-training. We have tried to apply T\\\\textsubscript{APEX} for a text-to-SQL task, where the input remains the same and the output converts to SQL. However, T\\\\textsubscript{APEX} does not show a significant advantage over BART. We attribute this to two factors: first, our synthetic pre-training corpus does not contribute to grounding, one of the most important factors for semantic parsing (Liu et al., 2021); second, table reasoning capabilities (e.g., aggregate) learned by T\\\\textsubscript{APEX} may not be necessary for SQL generation. For example, a model could still understand an NL phrase \\\"total\\\" as the aggregation function \\\"sum\\\", even though it is unaware of the mathematical meaning of \\\"sum\\\".\\n\\n6 RELATED WORK\\n\\nTable Pre-training\\n\\nThe work most related to ours is table pre-training whose key factors include the pre-training corpus and the pre-training task. As for the pre-training corpus, most of previous works almost collect NL-table data to perform table pre-training. They either mined a large corpus of tables and their NL sentence contexts (Yin et al., 2020; Herzig et al., 2020), leveraged human-annotated parallel NL-table datasets for pre-training (Deng et al., 2021; Yu et al., 2021a), or synthesized a NL-table corpus using human-written templates (Yu et al., 2021a; Eisenschlos et al., 2020). Our work is different from theirs because we are the first to use pure synthetic SQL-table data for table pre-training, which allows us to automatically synthesize a diverse, large-scale, and high-quality pre-training corpus. As for the pre-training task, existing works proposed several pre-training tasks, such as Mask Column Prediction (Yin et al., 2020), Multi-choice Cloze at the Cell Level (Wang et al., 2021b) and Structure Grounding (Deng et al., 2021). Different from all of them, we present a novel SQL execution task to perform table pre-training.\\n\\nJoint Understanding on Table and Text\\n\\nAs our experiments are mainly on TableQA and TableFV, our work is also closely related to previous methods for these tasks. For TableQA, previous works almost formulate it as a weakly semantic parsing task (Liang et al., 2018; Wang et al., 2019a; Guo et al., 2021), which always employ reinforcement learning to optimize semantic parsers over tables. Although these parsers produce logic forms (e.g., SQL), they have difficulties in training due to the large search space and the presence of spurious programs (Goldman et al., 2018). In addition, another promising line of work has emerged in recent advances (Mueller et al., 2019; Herzig et al., 2020), which aims at answering NL sentences without logical forms. This line of work predicts answer(s) by selecting cell values and optionally applying an aggregation operator to them. They can be easily trained, but their modeling ability is limited. For example, it is hard to support compound aggregation operators such as $max(Year) - min(Year)$. What makes our approach different from these works is that we employ generative models to handle TableQA and can enjoy the end-to-end training and flexibility simultaneously. For TableFV, previous works usually employ specialized architectures with limited scalability (Shi et al., 2020a; Yang et al., 2020; Shi et al., 2021b). For example, Zhong et al. (2020b) leveraged a graph construction mechanism, a semantic parser, and a semantic composition model to capture the connections among the NL sentence and the table. While the approach works well for TableFV, it is not easily applied to other table-related tasks. Compared with them, our approach works well for a variety of downstream tasks in the same architecture.\\n\\n7 CONCLUSION\\n\\nIn this paper, we present T\\\\textsubscript{APEX}, an execution-centric table pre-training approach whose corpus is automatically synthesized via sampling SQL queries and their execution results. T\\\\textsubscript{APEX} addresses the data scarcity challenge in table pre-training by learning a neural SQL executor on a diverse, large-scale, and high-quality synthetic corpus. Experimental results on four downstream datasets demonstrate that T\\\\textsubscript{APEX} outperforms previous table pre-training approaches by a large margin and achieves new state-of-the-art results on all of them. Our work opens the way to exploit structured data by pre-training on synthetic executable programs, which is conceptually simple and has great potential to be extended to other research areas (e.g., knowledge base).\\n\\nACKNOWLEDGEMENT\\n\\nWe would like to thank all the anonymous reviewers for their constructive feedback. The first author Qian is supported by the Academic Excellence Foundation of Beihang University for PhD Students.\"}"}
{"id": "O50443AsCP", "page_num": 14, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":null}"}
{"id": "O50443AsCP", "page_num": 15, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":true,\"is_diagram\":false,\"natural_text\":\"| Task    | Dataset | Type  | # Sentences | # Tables |\\n|---------|---------|-------|-------------|----------|\\n| WIKI    | SQL-W   | EAK   | 80          | 24       |\\n| Simple QA | TableQA WIKI    | TABLE QUESTIONS | Complex QA | 22       | 033 |\\n|         |         |       | 241         |          |\\n| SQA     | Conversation QA | TableFV | Fact Verification | 17       | 553 |\\n|         |         |       | 982         |          |\\n|         |         |       | 118         |          |\\n|         |         |       | 275         |          |\\n|         |         |       | 16          |          |\\n|         |         |       | 573         |          |\\n\\nTable 6: Experimental dataset statistics.\\n\\n| Example Input | Example Output |\\n|---------------|----------------|\\n| How many CFL teams are from York College? | [HEAD] | pick # | CFL team | Player | Position | College |\\n| | [ROW] | 1 | 27 | hamilton tiger-cats | connor healey | db | wilfrid laurier |\\n| | [ROW] | 2 | 28 | calgary stampeders | anthony forgione | ol | york |\\n\\n| Example Input | Example Output |\\n|---------------|----------------|\\n| Which album released by the band schnell fenster produced the most singles appearing on the australian peak chart? | [HEAD] | Year | Title | Peak Chart Positions AUS | Peak Chart Positions NZ | Album |\\n| | [ROW] | 1988 | whisper | 58 | 42 | the sound of trees |\\n| | [ROW] | 1988 | love-hate relationship | 81 | 46 | The Sound Of Trees |\\n\\n| Example Input | Example Output |\\n|---------------|----------------|\\n| where are the players from? which player went to louisiana state university? | [HEAD] | Pick | Player | Team | Position | School |\\n| | [ROW] | 1 | Ben McDonald | Baltimore Orioles | RHP | Louisiana State University |\\n| | [ROW] | 2 | Tyler Houston | Atlanta Braves | C | Valley HS (Las Vegas, NV) |\\n\\n| Example Input | Example Output |\\n|---------------|----------------|\\n| On june 26th, 2010 kyle busch drove a total of 211.6 miles at an average speed of 110.673 miles per hour. | [HEAD] | year | date | driver | team | manufacturer | laps | race time | average speed (mph) |\\n| | [ROW] | 1990 | july 15 | tommy ellis | john jackson | buick | 300 | 317.4 (510.805) | 3:41:58 | 85.797 |\\n| | [ROW] | 1990 | october 14 | rick mast | ag dillard motorsports | buick | 250 | 264.5 (425.671) | 2:44:37 | 94.45 |\\n\\nTable 7: The example inputs and outputs for our model on experimental datasets.\\n\\nA DOWNSAMPLING DATASETS\\n\\nThe dataset statistics are shown in Table 6, while Table 7 show example inputs and outputs for our model. Note that SQA is a conversation benchmark, and we directly concatenate the history and i-th question as the \u201csentence\u201d part (x) in the input, as done in Liu et al. (2020).\\n\\nMULTITASK RESULTS\\n\\nTable 8 presents the full experimental results on multi-task fine-tuning mentioned in \u00a7 2.2. Note that we chose WIKI SQL-W EAK and TABLE QUESTIONS as the transfer source because their training data are relatively rich.\\n\\nEXPLORATORY ANALYSIS\\n\\nIn this section, we perform an exploratory analysis to provide more insights for future work. Concretely, we explore two interesting research questions: (1) How does the difficulty of SQL queries\"}"}
{"id": "O50443AsCP", "page_num": 16, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table 8: Experimental results (denotation accuracy) of multi-task fine-tuning on the Target dev set. Source \u2192 Target means first fine-tuning on Source and then fine-tuning on Target.\\n\\nTable 9: Four SQL query difficulty levels and their corresponding example SQL queries.\\n\\nC.1 Impact of SQL Query Difficulty in Pre-Training\\n\\nSQL Difficulty Criteria\\nInspired by Yu et al. (2018), we suppose that the difficulty of a SQL query can be measured by the number of SQL elements. An element can be either a SQL keyword (e.g., `SELECT`), or a table schema (i.e., a header or a cell value). In practice, we obtain elements of SQL queries via an off-the-shelf SQL parser\\\\(^2\\\\), which returns a stream of SQL elements for each SQL query. Empirically, we categorize SQL queries with \\\\( \\\\leq 6 \\\\) elements into Easy, \\\\( > 6 \\\\) and \\\\( \\\\leq 14 \\\\) elements into Medium, \\\\( > 14 \\\\) and \\\\( \\\\leq 20 \\\\) elements into Hard, and the rest into Extra Hard. Example SQL queries of different difficulty levels can be found in Table 9. Based on the SQL difficulty criteria, we divide the templates from SQUALL (Shi et al., 2020b) into four levels of difficulty and gradually add them to the construction of the pre-training corpus from Easy-level (\\\\( \\\\leq \\\\) Easy) to Extra-Hard-level (\\\\( \\\\leq \\\\) Extra Hard). Notably, to avoid the effect of the scale of pre-training, we maintain the same amount of examples for the above pre-training corpus.\\n\\nDownstream Performance\\nThe experimental results are shown in Figure 7. As can be seen, it is helpful to add harder SQL queries to the pre-training corpus in most cases. For example, compared to \\\\( \\\\leq \\\\) Easy, \\\\( \\\\leq \\\\) Medium achieves consistent improvements on the performance of downstream tasks (e.g., 10.6% on WIKITABLEQUESTIONS). Meanwhile, we also notice that the impact of the difficulty of SQL queries becomes less significant after the Medium-level. On the TABLEFACT dataset, involving Extra-Hard-level SQL queries in pre-training even slightly hurts the performance.\\n\\n\\\\(^2\\\\) https://github.com/forward/sql-parser\"}"}
{"id": "O50443AsCP", "page_num": 17, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":true,\"is_diagram\":false,\"natural_text\":\"Figure 7: The performance of downstream tasks (dev sets) at different pre-training difficulties with the same amount of examples (0.5 Million). \u2264Medium means that we only use SQL query templates with a difficulty level less than or equal to Medium when synthesizing its pre-training corpus. Notably, \u2264Extra Hard is equivalent to using all SQL query templates.\\n\\n| SQL Difficulty Level in Pre-training | Question Difficulty Level in Downstream |\\n|------------------------------------|----------------------------------------|\\n| Extra Hard                         | 27.5                                   |\\n| Hard                               | 28.3                                   |\\n| Medium                             | 32.5                                   |\\n| Easy                               | 40.8                                   |\\n| \u2264Easy                              | 42.5                                   |\\n| \u2264Medium                            | 40.0                                   |\\n| \u2264Hard                              | 42.6                                   |\\n| Extra Hard                         | 53.1                                   |\\n| Hard                               | 58.8                                   |\\n| Medium                             | 60.2                                   |\\n| Easy                               | 34.4                                   |\\n| \u2264Easy                              | 38.2                                   |\\n| \u2264Medium                            | 56.2                                   |\\n| \u2264Hard                              | 57.3                                   |\\n| Extra Hard                         | 56.9                                   |\\n| Hard                               | 57.4                                   |\\n| Medium                             | 63.9                                   |\\n| Easy                               | 70.2                                   |\\n| \u2264Easy                              | 70.2                                   |\\n| \u2264Medium                            | 71.7                                   |\\n\\nFigure 8: The fine-grained performance of different SQL difficulty levels in pre-training on different question difficulty levels from WIKI TABLE QUESTIONS dev set.\\n\\nFine-Grained Analysis\\nTo understand the impact from a fine-grained perspective, we divide questions from the WIKI TABLE QUESTIONS dev set into the same four levels of difficulty, with the help of SQL query annotation for WIKI TABLE QUESTIONS questions provided by SQUALL. All fine-grained experimental results are presented in Figure 8. We can see that with the addition of harder SQL queries, the performance on questions at the same difficulty level are greatly improved. For example, the addition of Medium level SQL queries boosts the performance of Medium-level questions from 38.2% (\u2264Easy) to 56.2% (\u2264Medium), which is in line with expectations. More encouragingly, adding simpler SQL queries can even improve performance on harder questions. For example, compared to BART, the \u2264Medium pre-training leads to an impressive improvement of up to 13.1% in the performance of Hard-level questions.\\n\\nC.2 IMPACT OF NATURAL LANGUAGE IN PRE-TRAINING\\nNatural Language Generation\\nIntuitively, compared to SQL queries, using NL sentences in pre-training is better for downstream tasks since the pre-training objective is nearly the same as the fine-tuning objective. However, it is non-trivial to obtain a fluent NL sentence which faithfully reflects the semantics of a SQL query. In this experiment, we follow Zhong et al. (2020a) to train a SQL-to-NL model and employ the model to translate SQL queries from the pre-training corpus into NL sentences. Concretely, our SQL-to-NL model is based on BART-Large (Lewis et al., 2020) and trained on the SQUALL dataset (Shi et al., 2020b), which contains nearly 9,000 SQL-NL pairs. Then we apply the well-trained SQL-to-NL model to the pre-training corpus of TAPEX (0.5 Million) and obtain a NL pre-training corpus of the same size. By manually analyzing 100 sampled translated NL sentences, we are surprised to find that all NL sentences are fluent, and nearly 68% of them...\"}"}
{"id": "O50443AsCP", "page_num": 2, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"In this paper, we present a novel execution-centric table pre-training approach TAPEx (Table Pre-training via Execution). It addresses the above challenges and achieves efficient table pre-training via approximating the structural reasoning process of formal languages over tables. The structural reasoning process is associated with the executability of tables, i.e., tables are inherently capable of supporting various reasoning operations (e.g., summing over a column in the table). In particular, TAPEx approximates the structural reasoning process of SQL queries by pre-training LMs to mimic the behavior of a SQL execution engine on tables. As shown in Figure 1, by sampling executable SQL queries over tables, TAPEx first synthesizes a large-scale pre-training corpus. Then it continues pre-training a language model to output the execution results of these SQL queries, which are obtained from the SQL execution engine. Since the diversity of SQL queries can be systematically guaranteed, we can easily synthesize a diverse, large-scale, and high-quality pre-training corpus.\\n\\nOur key insight is that if a language model can be pre-trained to faithfully \u201cexecute\u201d SQL queries and produce correct results, it should have a deep understanding of tables. Thus, the execution pre-training task could be more efficient in understanding tables and reasoning over tables. To our knowledge, TAPEx is the first one to explore table pre-training via synthetic executable programs. TAPEx is conceptually simple and easy to implement. In this paper, we regard the pre-training as a sequence generation task and employ an encoder-decoder model. Specifically, we employ the pre-trained encoder-decoder language model BART (Lewis et al., 2020) as the backbone. Furthermore, we examine the effectiveness of TAPEx via two fundamental downstream tasks: table-based question answering (TableQA) and table-based fact verification (TableFV). To enable fine-tuning of downstream tasks to take full advantage of TAPEx, we reformulate these tasks using the encoder-decoder sequence generation paradigm. We evaluate TAPEx using four well-known benchmark datasets. Experimental results clearly demonstrate that TAPEx can bring significant and consistent improvements on these datasets. For example, TAPEx obtains an absolute improvement of 19.5% over BART in the WIKITABLEQUESTIONS dataset. Furthermore, TAPEx yields strong results even with a small pre-training corpus, demonstrating its high efficiency. Finally, TAPEx achieves new state-of-the-art results on all experimental benchmarks, outperforming previous approaches by a large margin, including complicated table pre-training approaches with several heuristics in data processing. We will make our code, model, and data publicly available to facilitate future research.\"}"}
{"id": "O50443AsCP", "page_num": 3, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Who is the other person who is 24 years old besides Reyna Royo?\\n\\n| Contestant       | Age | Hometown         |\\n|------------------|-----|------------------|\\n| Reyna Royo       | 24  | Panama City      |\\n| Marisela Moreno  | 24  | Panama City      |\\n| Patricia De Le\u00f3n | 19  | Panama City      |\\n\\n**Figure 2:** The illustration of the fine-tuning procedure in our method. During fine-tuning, we feed the concatenation of an NL sentence and its corresponding table taken from the downstream task to the model, and train it to output the answer (e.g., \u201cMarisela Moreno Montero\u201d).\\n\\n2.1 **DOWNSTREAM TASK FORMULATION**\\n\\nAs mentioned in \u00a7 1, downstream tasks always involve joint reasoning over free-form NL sentences and tables. Therefore, examples of downstream tasks generally contain an NL sentence \\\\(x\\\\) and a (semi-)structured table \\\\(T\\\\) as the model input. Each NL sentence consists of \\\\(K\\\\) tokens as \\\\(x = x_1, x_2, \\\\ldots, x_K\\\\), while each table \\\\(T\\\\) consists of \\\\(M\\\\) rows \\\\(\\\\{r_i\\\\}_{i=1}^{M}\\\\), in which each row \\\\(r_i\\\\) contains \\\\(N\\\\) cell values \\\\(\\\\{s_{i,j}\\\\}_{j=1}^{N}\\\\). Each cell \\\\(s_{i,j}\\\\) includes a list of tokens and corresponds to a table header \\\\(c_j\\\\).\\n\\nAs for the output, there are variations among different tasks. In this paper, we focus on TableQA and TableFV. TableQA aims to retrieve table content to answer the user\u2019s question, and thus its output is either a list of cell values or number(s) calculated over the selected table region by aggregation functions (e.g., SUM). It is worth noting that for semi-structured tables, the answer may not be exactly table cell values, but their normalized forms (e.g., from \\\\(2k\\\\) to \\\\(2,000\\\\)), which makes downstream tasks more challenging (Oguz et al., 2020). As for TableFV, the output is a binary decision entailed or refused, indicating whether the NL sentence follows the fact indicated by the table.\\n\\n2.2 **GENERATIVE FINE-TUNING**\\n\\nIn this section, we present a generative approach for downstream task fine-tuning. Unlike previous works, we model both TableQA and TableFV as sequence generation tasks and leverage generative LMs to generate the output autoregressively. Taking TableQA as an example, given an NL question, our method generates the answer by decoding it in a word-by-word fashion.\\n\\n**Architecture**\\n\\nOur method theoretically applies for any LM as long as it can generate sequence, such as GPT3 (Brown et al., 2020) and UniLM (Bao et al., 2020). In our experiments, we implemented our method based on BART (Lewis et al., 2020), a widely used pre-trained encoder-decoder model. BART follows a standard sequence-to-sequence Transformer architecture (Vaswani et al., 2017), with modifying ReLU activation functions to GeLU. It is pre-trained via corrupting sentences (i.e., randomly sampling length-variable spans and masking each one with a single [MASK] token) and then optimizing a reconstruction loss. As for the number of layers, we employ the BART Large configuration in our experiments, i.e., 12 layers are used in both the encoder and the decoder.\\n\\n**Model Input**\\n\\nAs illustrated in Figure 2, the input contains an NL sentence and its corresponding table. Encoding the NL sentence is relatively straightforward, while encoding the table is non-trivial since it exhibits underlying structures. In practice, we flatten the table into a sequence so that it can be fed directly into the model. By inserting several special tokens to indicate the table boundaries, a flattened table can be represented as \\\\(T^* = [\\\\text{HEAD}], c_1, \\\\ldots, c_N, [\\\\text{ROW}], r_1, [\\\\text{ROW}], r_2, \\\\ldots, r_M\\\\). Here [HEAD] and [ROW] are special tokens indicating the region of table headers and rows respectively, and the number after [ROW] is used to indicate the row index. Notably, we also separate headers or cells in different columns using a vertical bar |. Finally, we prefix the flattened table \\\\(T^*\\\\) with the NL sentence \\\\(x\\\\) and feed them into the model encoder.\\n\\n**Model Output**\\n\\nWith attending on the encoder, the decoder is responsible for modeling the outputs of both TableQA and TableFV. For TableQA, the output is the concatenation of the answer(s) separated by commas, and the decoder generates it autoregressively. In this way, our model can readily support (almost) all operators and their compositions in TableQA. For TableFV, as BART does for sequence classification tasks (Lewis et al., 2020), the same input is fed into both the encoder and decoder, and a binary classifier upon the hidden state of the last token in the decoder is used for the output. Notably, our method can be easily extended to other table related tasks in a similar way.\"}"}
{"id": "O50443AsCP", "page_num": 4, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Pre-training\\n\\nFigure 3: The illustration of the pre-training procedure in our method. During pre-training, we feed the concatenation of a sampled SQL query and a sampled table to the model, and train it to output the corresponding execution result (e.g., \u201cPairs\u201d).\\n\\nFine-Tuning Strategy\\n\\nSince our approach can perform various downstream tasks on the same architecture, it can easily perform multi-task learning. Therefore, we explore two ways of fine-tuning, one for vanilla fine-tuning and the other for multi-task fine-tuning. The former is to fine-tune the model on each individual downstream task. The latter is inspired by TAPAS (Herzig et al., 2020) and T5 (Raffel et al., 2020), which first fine-tunes the model on related or similar intermediate downstream tasks and then continues to fine-tune it on the target downstream task.\\n\\nDiscussion\\n\\nOur approach comes with several advantages: (i) Flexibility: due to the powerful expressiveness of encoder-decoder models, our approach can readily adapt to (almost) any kind of output. (ii) Conveniency: our approach does not require any modification (e.g., table-specific masking) on pre-trained LMs, and can be trained in an end-to-end manner. (iii) Transferability: since we formulate downstream tasks as sequence generation tasks, which allows different tasks to share the same training protocol, it is easy to perform multi-task fine-tuning for our approach.\\n\\n3 TABLE-TRAINING VIA EXECUTION\\n\\nAs mentioned in \u00a7 1, TAPPX achieves efficient table pre-training by training LMs to mimic the behavior of a SQL execution engine. In this section, we illustrate how to conduct table pre-training from two aspects: the pre-training task and the pre-training corpus.\\n\\n3.1 P-TRAINING TASK\\n\\nFollowing the MLM task in NL pre-training, existing works usually use reconstruction tasks for table pre-training. They generally take corrupted tables and NL sentences as input and try to recover the corrupted parts, in order to strengthen the linking between NL sentences and tables. While these pre-training tasks perform well, they tend to be less efficient since they usually require an extremely large pre-training corpus.\\n\\nTo design efficient tasks for table pre-training, we argue that the key lies in the executability of tables. That is to say, structured tables enable us to perform discrete operations on them via programming languages such as SQL queries, while unstructured text does not. Taking this into account, TAPPX adopts SQL execution as the only pre-training task. As illustrated in Figure 3, the pre-training of TAPPX is similar to the procedure of the above generative fine-tuning. Given an executable SQL query and a table $T$, TAPPX first concatenates the SQL query and the flattened table $T^\\\\ast$ to feed into the model encoder. Then it obtains the query's execution result through an off-the-shelf SQL executor (e.g., MySQL) to serve as the supervision for the model decoder. Intuitively, the pre-training procedure is to encourage a language model to be a neural SQL executor. We believe that if a language model can be trained to faithfully \u201cexecute\u201d SQL queries and produce correct results, then it should have a deep understanding of tables.\\n\\n3.2 P-TRAINING CORPUS\\n\\nSynthesizing the pre-training corpus is very important for table pre-training. Generally, there are two key factors: the table source and the SQL query sampling strategy.\"}"}
{"id": "O50443AsCP", "page_num": 5, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Published as a conference paper at ICLR 2022\\n\\nModel Dev Test\\n\\nPrevious Systems\\n\\nGuo & Gao (2019) 61.1 61.0\\nLiang et al. (2018) 71.8 72.4\\nAgarwal et al. (2019) 74.9 74.8\\nWang et al. (2019b) 79.4 79.3\\n\\nPre-trained Language Models\\nMin et al. (2019) 84.4 83.9\\n\\nExecution-Guided Decoding\\nHerzig et al. (2020) 85.1 83.6\\nYu et al. (2021a) 85.9 84.7\\n\\nBART 87.3 85.8\\n\\nTable 1: Denotation accuracies on WIKI-SQL-WEB.\\n\\nPre-trained Language Models\\nHerzig et al. (2020) 48.8\\nYin et al. (2020) 53.0 52.3\\nYu et al. (2021a) 51.9 52.7\\nBART 37.2 38.0\\n\\nTable 2: Denotation accuracies on WIKI-ITABLEQUESTIONS.\\n\\nFollowing previous work by Yin et al. (2020), we choose publicly available semi-structured tables as the table source. However, rather than requiring millions of raw tables in (Yin et al., 2020), TAPEX works well even with only a few thousand tables. Therefore, instead of fetching noisy tables from the Web and then heuristically filtering them, we pick high-quality tables right from existing public datasets. Concretely, we randomly select nearly 1,500 tables from the training set of WIKI-ITABLEQUESTIONS (Pasupat & Liang, 2015) as the table source for our pre-training corpus. Notice that there is no overlap between the tables used in our pre-training and the tables used in the dev and test sets of all downstream tasks, so there is no data leakage problem.\\n\\nQuery Sampling\\nRegarding the sampling of diverse SQL queries, there are various choices in the literature. We can either sample SQL queries according to a probabilistic context-free grammar (Wang et al., 2021a), or instantiate SQL templates over different tables (Zhong et al., 2020a). In our experiments, we follow the latter, where SQL templates are automatically extracted from the SQUAL dataset (Shi et al., 2020b). An example SQL template is:\\n\\n```\\nSELECT num = val, where\\n```\\n\\nwhere num and text correspond to a numeric column and a text column respectively, and val refers to one of the cell values with respect to the column text. Given a SQL template, at each instantiation, we uniformly sample headers and cell values from a sampled table to fill the template, forming a concrete SQL query. Notably, SQL queries that execute with empty results are discarded, because empty results do not reflect much information about the executability of tables. This way, we can obtain a large-scale pre-training corpus with high quality.\\n\\n4 EXPERIMENTS\\nIn this section, we evaluate TAPEX on different downstream tasks to verify its effectiveness.\\n\\nDataset and Evaluation\\nWe evaluate the performance of our approach on weakly-supervised WikiSQL (WIKI-SQL-WEB) (Zhong et al., 2017), WIKI-ITABLEQUESTIONS (Pasupat & Liang, 2015), SQA (Iyyer et al., 2017), and TAFFACT (Chen et al., 2020). Compared to WIKI-SQL-WEB, which only requires filtering and optionally aggregating on table cell values, WIKI-ITABLEQUESTIONS requires more complicated reasoning capabilities. SQA is a conversational benchmark, which requires our approach to model the conversational context. Details can be found in Appendix A. For TableQA datasets, the evaluation metric is denotation accuracy, which checks whether the predicted answer(s) is equal to the ground-truth answer(s). It is worth noting that we evaluate our approach on WIKI-SQL-WEB with answer annotations provided by TAPEX (Herzig et al., 2020), since nearly 2% of answers obtained from the official evaluation script are incorrect. For TAFFACT, the evaluation metric is accuracy, which is calculated using the percentage of correct prediction.\\n\\nImplementation Details\\nWe implement our approach based on fairseq (Ott et al., 2019). During pre-training, we synthesize up to 5 million pairs of SQL queries and their execution results for...\"}"}
{"id": "O50443AsCP", "page_num": 1, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"TAPET: TABLE PRE-TRAINING VIA LEARNING A NEURAL SQL EXECUTOR\\n\\nQian Liu\u2020\u2217, Bei Chen\u00a7, Jiaqi Guo\u2662\u2217, Morteza Ziyadi\u2661, Zeqi Lin\u00a7, Weizhu Chen\u2661, Jian-Guang Lou\u00a7\\n\\nBeihang University, Xi'an Jiaotong University, Microsoft Research Asia, Microsoft Azure AI\\nqian.liu@buaa.edu.cn, jasperguo2013@stu.xjtu.edu.cn\\n{bei.chen, morteza.ziyadi, zeqi.lin, wzchen, jlou}@microsoft.com\\n\\nABSTRACT\\n\\nRecent progress in language model pre-training has achieved a great success via leveraging large-scale unstructured textual data. However, it is still a challenge to apply pre-training on structured tabular data due to the absence of large-scale high-quality tabular data. In this paper, we propose TAPET to show that table pre-training can be achieved by learning a neural SQL executor over a synthetic corpus, which is obtained by automatically synthesizing executable SQL queries and their execution outputs. TAPET addresses the data scarcity challenge via guiding the language model to mimic a SQL executor on the diverse, large-scale and high-quality synthetic corpus. We evaluate TAPET on four benchmark datasets. Experimental results demonstrate that TAPET outperforms previous table pre-training approaches by a large margin and achieves new state-of-the-art results on all of them. This includes improvements on the weakly-supervised WikiSQL denotation accuracy to 89.5% (+2.3%), the WikiTableQuestions denotation accuracy to 57.5% (+4.8%), the SQA denotation accuracy to 74.5% (+3.5%), and the TabFact accuracy to 84.2% (+3.2%). To our knowledge, this is the first work to exploit table pre-training via synthetic executable programs and to achieve new state-of-the-art results on various downstream tasks. Our code can be found at https://github.com/microsoft/Table-Pretraining.\\n\\n1 INTRODUCTION\\n\\nPre-trained language models (LMs) such as BERT (Devlin et al., 2019) and BART (Lewis et al., 2020) have hit a success on a range of free-form natural language (NL) tasks. By learning from a large amount of unstructured textual data, these models have demonstrated surprising capabilities in understanding NL sentences. Inspired by this huge success, researchers have attempted to extend pre-training to structured tabular data (Herzig et al., 2020; Yin et al., 2020; Yu et al., 2021a; Wang et al., 2021b; Deng et al., 2020; 2021; Shi et al., 2021a). However, different from free-form NL sentences, tabular data often contains rich and meaningful structural information, for which existing pre-training approaches designed for unstructured data are not well suited.\\n\\nTo apply pre-training techniques on structured tabular data, there exist two key challenges: (i) where to obtain a large-scale pre-training corpus with high quality, and (ii) how to design an efficient pre-training task for table pre-training. For the first challenge, existing works generally collect parallel data including NL sentences and tables as the pre-training corpus, since downstream tasks often involve a joint reasoning over both free-form NL sentences and tables. They either crawled tables and their surrounding NL sentences from the Web (Herzig et al., 2020; Yin et al., 2020; Deng et al., 2021), or synthesized NL sentences on available tables (Yu et al., 2021a; Shi et al., 2021a). However, as pointed by Yin et al. (2020), the raw data mined from the Web is extremely noisy and requires complicated heuristics to clean. Conversely, the synthesis method is easier to control the data quality, but it usually requires experts to write hundreds of templates, which is both costly and often lacking diversity. Regarding the pre-training task, existing works often employ different variants of Masked Language Modeling (MLM) (Devlin et al., 2019) to guide LMs to learn better representations of...\"}"}
{"id": "O50443AsCP", "page_num": 10, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"In this work, we present a novel pre-training approach for tabular data, which approximates the structural reasoning process of formal languages over tables to achieve efficient table pre-training. Different from previous works which employ web crawling to construct a large-scale NL-table corpus for pre-training, our pre-training corpus is synthesized via sampling SQL queries and their execution results on public tables. Compared with previous works, our pre-training corpus is more controllable with high-quality. For example, compared with TA-BERT which crawls 26 million noisy tables from the Web, our approach adopts 1,500 high-quality tables from public datasets, which greatly alleviates the potential privacy and bias issues raised by web crawling. We evaluate our approach on two fundamental table-related tasks: table-based question answering and table-based fact verification. The former enables non-expert users to query databases without learning programming languages, while the latter helps users to verify whether a textual hypothesis is valid based on given tabular evidence. Experimental results on four well-known benchmark datasets show that our approach achieves new state-of-the-art results on all of them, especially in the low data regime.\\n\\nREFERENCES\\n\\nRishabh Agarwal, Chen Liang, Dale Schuurmans, and Mohammad Norouzi. Learning to generalize from sparse and underspecified rewards. In ICML, 2019.\\n\\nHangbo Bao, Li Dong, Furu Wei, Wenhui Wang, Nan Yang, Xiaodong Liu, Yu Wang, Songhao Piao, Jianfeng Gao, M. Zhou, and H. Hon. Unilmv2: Pseudo-masked language models for unified language model pre-training. In ICML, 2020.\\n\\nTom Brown, Benjamin Mann, Nick Ryder, Melanie Subbiah, Jared D Kaplan, Prafulla Dhariwal, Arvind Neelakantan, Pranav Shyam, Girish Sastry, Amanda Askell, Sandhini Agarwal, Ariel Herbert-Voss, Gretchen Krueger, Tom Henighan, Rewon Child, Aditya Ramesh, Daniel Ziegler, Jeffrey Wu, Clemens Winter, Chris Hesse, Mark Chen, Eric Sigler, Mateusz Litwin, Scott Gray, Benjamin Chess, Jack Clark, Christopher Berner, Sam McCanndish, Alec Radford, Ilya Sutskever, and Dario Amodei. Language models are few-shot learners. In H. Larochelle, M. Ranzato, R. Hadsell, M. F. Balcan, and H. Lin (eds.), Advances in Neural Information Processing Systems, volume 33, pp. 1877\u20131901. Curran Associates, Inc., 2020. URL https://proceedings.neurips.cc/paper/2020/file/1457c0d6bfcb4967418bfb8ac142f64a-Paper.pdf.\\n\\nWenhu Chen, Hongmin Wang, Jianshu Chen, Yunkai Zhang, Hong Wang, Shiyang Li, Xiyou Zhou, and William Yang Wang. Tabfact: A large-scale dataset for table-based fact verification. In International Conference on Learning Representations, 2020. URL https://openreview.net/forum?id=rkeJRhNYDH.\\n\\nPradeep Dasigi, Matt Gardner, Shikhar Murty, Luke Zettlemoyer, and Eduard Hovy. Iterative search for weakly supervised semantic parsing. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers), pp. 2669\u20132680, Minneapolis, Minnesota, June 2019. Association for Computational Linguistics. doi: 10.18653/v1/N19-1273. URL https://aclanthology.org/N19-1273.\\n\\nXiang Deng, Huan Sun, Alyssa Lees, You Wu, and Cong Yu. TURL: table understanding through representation learning. Proc. VLDB Endow., 14(3):307\u2013319, 2020. doi: 10.5555/3442430. URL http://www.vldb.org/pvldb/vol14/p307-deng.pdf.\\n\\nXiang Deng, Ahmed Hassan Awadallah, Christopher Meek, Oleksandr Polozov, Huan Sun, and Matthew Richardson. Structure-grounded pretraining for text-to-SQL. In Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pp. 1337\u20131350, Online, June 2021. Association for Computational Linguistics. doi: 10.18653/v1/2021.naacl-main.105. URL https://www.aclweb.org/anthology/2021.naacl-main.105.\\n\\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of deep bidirectional transformers for language understanding. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pp. 4171\u20134186, Minneapolis, Minnesota, June 2019. Association for Computational Linguistics. doi: 10.18653/v1/N19-1422. URL https://www.aclweb.org/anthology/N19-1422.\\n\\nWenhu Chen, Hongmin Wang, Jianshu Chen, Yunkai Zhang, Hong Wang, Shiyang Li, Xiyou Zhou, and William Yang Wang. Tabfact: A large-scale dataset for table-based fact verification. In International Conference on Learning Representations, 2020. URL https://openreview.net/forum?id=rkeJRhNYDH.\\n\\nPradeep Dasigi, Matt Gardner, Shikhar Murty, Luke Zettlemoyer, and Eduard Hovy. Iterative search for weakly supervised semantic parsing. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers), pp. 2669\u20132680, Minneapolis, Minnesota, June 2019. Association for Computational Linguistics. doi: 10.18653/v1/N19-1273. URL https://aclanthology.org/N19-1273.\\n\\nXiang Deng, Huan Sun, Alyssa Lees, You Wu, and Cong Yu. TURL: table understanding through representation learning. Proc. VLDB Endow., 14(3):307\u2013319, 2020. doi: 10.5555/3442430. URL http://www.vldb.org/pvldb/vol14/p307-deng.pdf.\\n\\nXiang Deng, Ahmed Hassan Awadallah, Christopher Meek, Oleksandr Polozov, Huan Sun, and Matthew Richardson. Structure-grounded pretraining for text-to-SQL. In Proceedings of the 2021 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pp. 1337\u20131350, Online, June 2021. Association for Computational Linguistics. doi: 10.18653/v1/2021.naacl-main.105. URL https://www.aclweb.org/anthology/2021.naacl-main.105.\\n\\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of deep bidirectional transformers for language understanding. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers), pp. 4171\u20134186, Minneapolis, Minnesota, June 2019. Association for Computational Linguistics. doi: 10.18653/v1/N19-1422. URL https://www.aclweb.org/anthology/N19-1422.\"}"}
{"id": "O50443AsCP", "page_num": 11, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":null}"}
{"id": "O50443AsCP", "page_num": 12, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":null}"}
{"id": "O50443AsCP", "page_num": 13, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":null}"}
{"id": "O50443AsCP", "page_num": 18, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table 10: The sampled SQL queries, their corresponding NL sentences translated by our SQL-to-NL model, and the faithfulness of the NL sentences.\\n\\n| SQL Query                          | NL Sentence                          | Faithfulness |\\n|------------------------------------|--------------------------------------|--------------|\\n| SELECT Name WHERE Age >= 28        | Who is at least 28 years old?        | \u2713            |\\n| SELECT MAX (Pick#)                 | What was the last pick in the 1989 major league baseball draft? | \u2717            |\\n| SELECT Driver ORDER BY Pos DESC LIMIT 1 | What driver came in last place? | \u2713            |\\n| SELECT COUNT (Competition) WHERE Notes != 100 | How many competitions have no notes? | \u2717            |\\n| SELECT COUNT (*) WHERE Result = \\\"won\\\" AND Year > 1987 | How many times did they win after 1987? | \u2713            |\\n| SELECT MAX (Chart Position) - MIN (Chart Position) WHERE Release date = \\\"july 21, 1995\\\" | What is the difference between the chart position of july 21, 1995 and the chart position of july 22, 1995? | \u2717            |\\n| SELECT Nation WHERE Nation != \\\"Japan\\\" AND Gold = (SELECT Gold WHERE Nation = \\\"Japan\\\") | Which other countries had the same number of gold medals as Japan? | \u2713            |\\n| SELECT Incumbent Electoral History GROUP BY Incumbent Electoral History ORDER BY COUNT (*) DESC LIMIT 1 | Who has held the office the most? | \u2717            |\\n\\nTable 11: The downstream performance on dev sets of TAP with the SQL and the NL pre-training corpus. The NL corpus is obtained via translating the SQL corpus using our SQL-to-NL model, and they share the same amount of examples (0.5 Million).\\n\\nPerformance Comparison\\n\\nWe compare the performance of all downstream tasks between TAP with SQL and TAP with NL in Table 11. Surprisingly, the performance of TAP with NL is comparable or even worse than the one of TAP with SQL. For example, compared to using SQL queries in pre-training, using NL sentences causes a drop of 1.4% on IKI TABLE QUESTIONS. We attribute such drop to the fact that the translated NL sentences contain some noise. Taking the second row in Table 11 as an example, the translated NL sentence includes extra information such as \\\"in the 1989 major league baseball draft\\\", which may interfere with the pre-training.\"}"}
{"id": "O50443AsCP", "page_num": 19, "content": "{\"primary_language\":\"en\",\"is_rotation_valid\":true,\"rotation_correction\":0,\"is_table\":false,\"is_diagram\":false,\"natural_text\":\"Table Execution Performance\\n\\n| Year | City   | Country | Nations |\\n|------|--------|---------|---------|\\n| 1896 | Athens | Greece  | 14      |\\n| 1900 | Paris  | France  | 24      |\\n| 1904 | St. Louis | USA | 12      |\\n| 1908 | London | UK      | 22      |\\n| \u2026   | \u2026      | \u2026       | \u2026       |\\n| 2004 | Athens | Greece  | 201     |\\n| 2008 | Beijing| China   | 204     |\\n| 2012 | London | UK      | 204     |\\n\\nFigure 9: The fine-grained statistics of typical operators, example SQLs, operator percentage and their execution accuracies on the held-out 20,000 SQL queries.\"}"}
